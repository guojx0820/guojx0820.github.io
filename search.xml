<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python类中self的作用</title>
      <link href="/2022/05/03/Python%E7%B1%BB%E4%B8%ADself%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2022/05/03/Python%E7%B1%BB%E4%B8%ADself%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="self定义。"><a href="#self定义。" class="headerlink" title="self定义。"></a>self定义。</h2><p>要想理解self就首先要理解Python中的类，不信的话，先看看他的定义：self是对象的载体，可以理解为一个储存实例化对象属性的字典（dict），self储存属性，而没有动作执行，self总是指向调用时类的实例。（怎么样，还行吧！）</p><h2 id="什么是类。"><a href="#什么是类。" class="headerlink" title="什么是类。"></a>什么是类。</h2><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都相互独立、互不影响；方法是与实例绑定的函数，和普通的函数不同，方法可以直接访问实例的数据。也就是说方法（method）是类（class）中的函数（function）。</p><h2 id="self的通俗理解。"><a href="#self的通俗理解。" class="headerlink" title="self的通俗理解。"></a>self的通俗理解。</h2><p>self简言之就是把类（class）中定义的变量和方法（method）变成实例变量和实例方法，即把抽象的编程具体的：具体的学生，XXX（姓名）&#x3D;抽象的人。作为类的成员，使得成员间能互相调用（变量，方法），互相传递（变量，方法）。而不需要从外部调用数据（即变量）和方法（即函数），以实现数据的封装。</p><p>怎么样，self是不是很厉害呢？下面这篇文章写的很好，可以借鉴呢。</p><blockquote><p>参考文献：</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/356325860">Python中的self详细解析</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限问题的解决</title>
      <link href="/2022/04/29/%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/04/29/%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>问题描述：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">err: Error: Spawn failed</span><br><span class="line">at ChildProcess.&lt;anonymous&gt; (/Users/leo/Documents/Blog/LuoMuBlog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">at ChildProcess.emit (events.js:315:20)</span><br><span class="line">at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">code: 128</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MacOS系统本机Root权限问题"><a href="#MacOS系统本机Root权限问题" class="headerlink" title="MacOS系统本机Root权限问题"></a>MacOS系统本机Root权限问题</h2><h3 id="1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。"><a href="#1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。" class="headerlink" title="1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。"></a>1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考<a href="https://blog.csdn.net/qq_40657321/article/details/106528128">Mac本机读写权限</a>。</h3><h3 id="2、进入Mac终端，输入命令：sudo-su-给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。"><a href="#2、进入Mac终端，输入命令：sudo-su-给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。" class="headerlink" title="2、进入Mac终端，输入命令：sudo su, 给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。"></a>2、进入Mac终端，输入命令：sudo su, 给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。</h3><h2 id="GitHub部署权限问题"><a href="#GitHub部署权限问题" class="headerlink" title="GitHub部署权限问题"></a>GitHub部署权限问题</h2><h3 id="1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限"><a href="#1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限" class="headerlink" title="1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限"></a>1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考<a href="https://nokiasonic.github.io/2021/08/30/%E3%80%90Hexo%E3%80%91github%E5%BC%80%E5%90%AF%E4%BB%A4%E7%89%8C%E9%AA%8C%E8%AF%81%E5%90%8E%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0Blog%E7%9A%84%E9%97%AE%E9%A2%98/">GitHub更新令牌后部署权限</a></h3><h3 id="2、问题解决关键，多试几遍！"><a href="#2、问题解决关键，多试几遍！" class="headerlink" title="2、问题解决关键，多试几遍！"></a>2、问题解决关键，多试几遍！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我为什么要自建博客网站</title>
      <link href="/2022/04/23/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2022/04/23/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><h3 id="写博客的初心是可以记录生活，学习与工作上值得记录的事情。"><a href="#写博客的初心是可以记录生活，学习与工作上值得记录的事情。" class="headerlink" title="写博客的初心是可以记录生活，学习与工作上值得记录的事情。"></a>写博客的初心是可以记录生活，学习与工作上值得记录的事情。</h3><h2 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h2><h3 id="然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。"><a href="#然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。" class="headerlink" title="然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。"></a>然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><p><img src="/2022/04/23/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/timg.jpeg" alt="心好累～"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo--Hexo 初步运行指令</title>
      <link href="/2022/04/23/hello-world/"/>
      <url>/2022/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++编程基础</title>
      <link href="/2022/04/22/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/22/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="C-学习基础"><a href="#C-学习基础" class="headerlink" title="C++学习基础"></a>C++学习基础</h1><h2 id="C-学习计划"><a href="#C-学习计划" class="headerlink" title="C++学习计划"></a>C++学习计划</h2><p>（1）基础语法（复习）——初步了解，基础编程<br>（2）核心编程——面向对象<br>（3）提高编程——泛型编程，STL</p><h2 id="C-编程流程（Clion）"><a href="#C-编程流程（Clion）" class="headerlink" title="C++编程流程（Clion）"></a>C++编程流程（Clion）</h2><p>（1）创建项目<br>（2）创建文件<br>（3）编写代码<br>（4）运行程序</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>作用：给一段指定的内存空间取名，以方便操作这段内存，管理内存空间<br>语法：数据类型 变量名 &#x3D; 初始值;<br><img src="/2022/04/22/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%9B%BE%E7%A4%BA.png" alt="变量与内存图示"></p><blockquote><p>注意：<br>1、C++关键字不能用做变量名标识符<br>常用的关键字如下：<br><img src="/2022/04/22/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C++%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="C++关键字"><br>2、标识符是有字母、数字、下划线组成<br>3、标识符的第一个字符只能是字母或者下划线，不能是数字<br>4、标识符区分大小写<br><strong>建议：在给变量命名之时，最好能够见名知义</strong></p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量的定义方式通常有两种：<br>1、#define 宏常量：#define 常量名 常量值<br>（注：#define定义的宏常量一般放在函数之外或者开头）<br>2、const修饰的变量：const 变量类型 变量名 &#x3D; 变量值<br>（注：变量分全局变量和局部变量……)</p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by Leo on 2022/4/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//常量的定义方式有</span></span><br><span class="line"><span class="comment">//1、define宏常量</span></span><br><span class="line"><span class="comment">//2、const修饰的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、define宏常量，不能修改,一旦修改就会报错</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Day 24 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Week 7 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Year 12 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    2、const修饰的变量也被定义为常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Month = <span class="number">30</span>; <span class="comment">//定义一个变量，数据类型 变量名 = 变量初始值</span></span><br><span class="line"><span class="comment">//    Month = 31;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*分别输出</span></span><br><span class="line"><span class="comment">     * 一天，</span></span><br><span class="line"><span class="comment">     * 一周，</span></span><br><span class="line"><span class="comment">     * 一年的时间*/</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一天有&quot;</span> &lt;&lt; Day &lt;&lt; <span class="string">&quot;小时&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一周有&quot;</span> &lt;&lt; Week &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一月有&quot;</span> &lt;&lt; Month &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一年有&quot;</span> &lt;&lt; Year &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p><strong>作用：在给变量分配内存时 ，需要给其一个合理的内存空间</strong></p></blockquote><p>1、整形<br>int：整形；<br>short：短整形<br>long：长整形<br>long long：长长整形<br><img src="/2022/04/22/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%95%B4%E5%9E%8B%E6%89%80%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D.png" alt="整型所占用的内存空间分配"></p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Leo on 2022/4/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    1、短整型(值的范围为：-32768～32767)</span></span><br><span class="line">    <span class="type">short</span> num1 = <span class="number">32767</span>;</span><br><span class="line"><span class="comment">//    2、整型</span></span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">32768</span>;</span><br><span class="line"><span class="comment">//    3、长整型</span></span><br><span class="line">    <span class="type">long</span> num3 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//    4、长长整型；</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num4 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输出的数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num3 = &quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num4 = &quot;</span> &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、实型<br>（1）单精度：float<br>（2） 双精度：double<br>float 变量名 &#x3D; 变量值f;<br>double 变量名 &#x3D; 变量值;</p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by Leo on 2022/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    1、单精度</span></span><br><span class="line"><span class="comment">//    2、双精度</span></span><br><span class="line"><span class="comment">//    C++中默认输出的数字位数为6位有效数字</span></span><br><span class="line">    <span class="type">float</span> f1 = <span class="number">3.1415966f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1 &lt;&lt; endl; <span class="comment">//占用4个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> d1 = <span class="number">3.1415966</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 = &quot;</span> &lt;&lt; d1 &lt;&lt; endl; <span class="comment">//占用8个字节</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1占用的内存空间为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1占用的内存空间为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(d1) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    3、科学计数法</span></span><br><span class="line">    <span class="type">float</span> f2 = <span class="number">1e4</span>; <span class="comment">//10000</span></span><br><span class="line">    <span class="type">float</span> f3 = <span class="number">1e-4</span>; <span class="comment">//0.0001</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、字符型<br>作用：字符型变量用于显示单个字符<br>语法：char 变量名 &#x3D; ‘变量值’;</p><blockquote><p>代码实例：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Leo on 2022/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、字符型变量创建方式</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ch = &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"><span class="comment">//2、字符型变量所占内存的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型变量所占内存大小为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(ch) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//3、字符型变量常见的错误</span></span><br><span class="line"><span class="comment">//    char ch1 = &#x27;abc&#x27;; //字符型变量&#x27;&#x27;内不能存放多个字符，放一个字符</span></span><br><span class="line"><span class="comment">//    char ch1 = &quot;a&quot;; //字符型变量不能用双引号</span></span><br><span class="line"><span class="comment">//  a的ASCII码为97</span></span><br><span class="line"><span class="comment">//  A的ASCII码为65</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;所对应的ASCII码数值为&quot;</span> &lt;&lt; (<span class="type">int</span>) ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中国内陆Google搜索使用</title>
      <link href="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转发自 <a href="http://www.javanx.cn/20190318/google/">Web秀 作者：<a href="http://www.javanx.cn/author/1/">Javan</a> </a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自2010年Google退出中国内陆后，搜索引擎百度一家独大，很多小伙伴也是很不甘心啊，毕竟百度和Google比，还是Google搜索更好用一些。</p><p>搜索内容准确，不会出现乱七八糟的广告，推广等。</p><p>先来看一波，对比：</p><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><p><strong>推荐工具的前提是，希望大家都能借助工具学习有用的知识啊，作为一名程序猿，有时<a href="http://www.javanx.cn/tag/google%E6%90%9C%E7%B4%A2/">google搜索</a>带来的知识还是很客观的。希望大家用在正途。</strong></p><h1 id="谷歌访问助手使用"><a href="#谷歌访问助手使用" class="headerlink" title="谷歌访问助手使用"></a><a href="http://www.javanx.cn/tag/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/">谷歌访问助手</a>使用</h1><h2 id="这里我们需要安装一个Chrome扩展插件——谷歌访问助手"><a href="#这里我们需要安装一个Chrome扩展插件——谷歌访问助手" class="headerlink" title="这里我们需要安装一个Chrome扩展插件——谷歌访问助手"></a>这里我们需要安装一个Chrome扩展插件——<a href="http://www.javanx.cn/wp-content/themes/lensnews2.2/images/google.rar">谷歌访问助手</a></h2><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="打开Chrome浏览器，设置-——-更多工具-——-扩展程序。"><a href="#打开Chrome浏览器，设置-——-更多工具-——-扩展程序。" class="headerlink" title="打开Chrome浏览器，设置 —— 更多工具 —— 扩展程序。"></a>打开Chrome浏览器，设置 —— 更多工具 —— 扩展程序。</h2><h2 id="将已经下载并解压的-谷歌访问助手-v2-3-0-crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。"><a href="#将已经下载并解压的-谷歌访问助手-v2-3-0-crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。" class="headerlink" title="将已经下载并解压的 谷歌访问助手_v2.3.0.crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。"></a>将已经下载并解压的 谷歌访问助手_v2.3.0.crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。</h2><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%8E%8B.png" alt="内陆也能使用Google了，如何能使用Google教程"><br>这时候会弹框提示：</p><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E6%B7%BB%E5%8A%A0%E6%8B%93%E5%B1%95%E7%A8%8B%E5%BA%8F.png" alt="内陆也能使用Google了，如何能使用Google教程"><br>完成安装后，用户有12个小时的免费试用时间。如何永久免费使用了？</p><p>其实也很简单，只需要将<code>123.hao245.com</code>设置成主页就可以了。</p><p>安装成功后，浏览器右上角就有这个图标了，如果发现不能使用，可以重启它。</p><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="谷歌访问助手常见问题"><a href="#谷歌访问助手常见问题" class="headerlink" title="谷歌访问助手常见问题"></a>谷歌访问助手常见问题</h2><p>(1)设置首页成功，但是重启浏览器还是显示没有激活，一般是因为关闭浏览器并没有真正退出浏览器。chrome浏览器的退出方法是点击选项-&gt;退出彻底关闭浏览器。也可以尝试在任务管理器中结束浏览器的所有进程。</p><p>(2)如果设置首页不成功或者不会设置首页的，可以设置自动打开首页。点左图上的设置图标，勾选自动打开首页，任意勾选一个主页，在重启浏览器器（务必重启浏览器）。</p><p>(3)谷歌访问助手软件安装成功后，用户有12个小时的免费试用时间。</p><p>(4)有用户反应，谷歌访问助手在使用的过程中会突然无法使用，或者说前几天谷歌访问助手还挺好用的，突然就不好用了。出现这个问题是原因可能是浏览器的默认首页被更改了，因为我都知道谷歌访问助手由于考虑自身的经营问题强制要求用户必须使用好123导航作为首页。所以如果你的谷歌访问助手之前是可以使用后来突然不能正常使用了，那么首先请考率你是不是修改了默认主页。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%881.png" alt="内陆也能使用Google了，如何能使用Google教程"><br><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%882.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="YOUTUBE访问指南"><a href="#YOUTUBE访问指南" class="headerlink" title="YOUTUBE访问指南"></a>YOUTUBE访问指南</h2><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/YouTube.png" alt="YOUTUBE访问指南"></p><p>当前你google访问助手安装成功后，访问<a href="https://chrome.google.com/webstore/category/extensions?hl=zh">google插件市场</a></p><h2 id="谷歌网上应用商店"><a href="#谷歌网上应用商店" class="headerlink" title="谷歌网上应用商店"></a>谷歌网上应用商店</h2><p><img src="/2021/04/13/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E7%BD%91%E4%B8%8A%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97.png" alt="Google网上应用商店"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建自己的个人博客网站</title>
      <link href="/2021/03/06/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2021/03/06/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="下载并安装git-nodeJS框架"><a href="#下载并安装git-nodeJS框架" class="headerlink" title="下载并安装git nodeJS框架"></a>下载并安装git nodeJS框架</h1><h1 id="打开终端，进入root模式，命令行：sudo-su"><a href="#打开终端，进入root模式，命令行：sudo-su" class="headerlink" title="打开终端，进入root模式，命令行：sudo su"></a>打开终端，进入root模式，命令行：sudo su</h1><h2 id="输入密码回车"><a href="#输入密码回车" class="headerlink" title="输入密码回车"></a>输入密码回车</h2><h1 id="利用npm安装包管理器cnpm达到提速的目的，命令行：npm-install-g-cnpm-–registry-x3D-https-registry-npm-taobao-org"><a href="#利用npm安装包管理器cnpm达到提速的目的，命令行：npm-install-g-cnpm-–registry-x3D-https-registry-npm-taobao-org" class="headerlink" title="利用npm安装包管理器cnpm达到提速的目的，命令行：npm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org"></a>利用npm安装包管理器cnpm达到提速的目的，命令行：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></h1><h1 id="利用cnpm安装hexo，命令行：cnpm-install-g-hexo-cli"><a href="#利用cnpm安装hexo，命令行：cnpm-install-g-hexo-cli" class="headerlink" title="利用cnpm安装hexo，命令行：cnpm install -g hexo-cli"></a>利用cnpm安装hexo，命令行：cnpm install -g hexo-cli</h1><h1 id="新建空文件夹，命令行：mkdir-blog"><a href="#新建空文件夹，命令行：mkdir-blog" class="headerlink" title="新建空文件夹，命令行：mkdir blog"></a>新建空文件夹，命令行：mkdir blog</h1><h1 id="进入博客，命令行：cd-blog"><a href="#进入博客，命令行：cd-blog" class="headerlink" title="进入博客，命令行：cd blog"></a>进入博客，命令行：cd blog</h1><h1 id="利用hexo初始化一个博客，命令行：sudo-hexo-init"><a href="#利用hexo初始化一个博客，命令行：sudo-hexo-init" class="headerlink" title="利用hexo初始化一个博客，命令行：sudo hexo init"></a>利用hexo初始化一个博客，命令行：sudo hexo init</h1><h1 id="本地启动，命令行：hexo-s"><a href="#本地启动，命令行：hexo-s" class="headerlink" title="本地启动，命令行：hexo s"></a>本地启动，命令行：hexo s</h1><h2 id="浏览器：localhost-4000端口打开"><a href="#浏览器：localhost-4000端口打开" class="headerlink" title="浏览器：localhost:4000端口打开"></a>浏览器：localhost:4000端口打开</h2><h1 id="新建一篇博客文章，命令行：hexo-n-“博客文章”"><a href="#新建一篇博客文章，命令行：hexo-n-“博客文章”" class="headerlink" title="新建一篇博客文章，命令行：hexo n “博客文章”"></a>新建一篇博客文章，命令行：hexo n “博客文章”</h1><h2 id="cd-到文件夹下，用vim打开，命令行：vim-博客文章-md"><a href="#cd-到文件夹下，用vim打开，命令行：vim-博客文章-md" class="headerlink" title="cd 到文件夹下，用vim打开，命令行：vim 博客文章.md"></a>cd 到文件夹下，用vim打开，命令行：vim 博客文章.md</h2><h1 id="保存退出，命令行：esc-wq或者Ctl-C"><a href="#保存退出，命令行：esc-wq或者Ctl-C" class="headerlink" title="保存退出，命令行：esc :wq或者Ctl+C"></a>保存退出，命令行：esc :wq或者Ctl+C</h1><h2 id="cd到根目录-x2F-blog下"><a href="#cd到根目录-x2F-blog下" class="headerlink" title="cd到根目录&#x2F;blog下"></a>cd到根目录&#x2F;blog下</h2><h1 id="hexo-clean清除一下目录"><a href="#hexo-clean清除一下目录" class="headerlink" title="hexo clean清除一下目录"></a>hexo clean清除一下目录</h1><h1 id="hexo-g或者hexo-generate，更新"><a href="#hexo-g或者hexo-generate，更新" class="headerlink" title="hexo g或者hexo generate，更新"></a>hexo g或者hexo generate，更新</h1><h1 id="hexo-s或者hexo-server，部署到本地服务器上"><a href="#hexo-s或者hexo-server，部署到本地服务器上" class="headerlink" title="hexo s或者hexo server，部署到本地服务器上"></a>hexo s或者hexo server，部署到本地服务器上</h1><h1 id="hexo-d或者hexo-deploy，部署到远端托管"><a href="#hexo-d或者hexo-deploy，部署到远端托管" class="headerlink" title="hexo d或者hexo deploy，部署到远端托管"></a>hexo d或者hexo deploy，部署到远端托管</h1><blockquote><p>持续更新中…</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
