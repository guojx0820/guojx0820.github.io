<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>气溶胶分类方法——AOD与AE阈值法分类</title>
      <link href="/archives/f863e629.html"/>
      <url>/archives/f863e629.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOD与AE阈值法原理"><a href="#AOD与AE阈值法原理" class="headerlink" title="AOD与AE阈值法原理"></a>AOD与AE阈值法原理</h1><h2 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h2><h1 id="MCD19A2数据介绍"><a href="#MCD19A2数据介绍" class="headerlink" title="MCD19A2数据介绍"></a>MCD19A2数据介绍</h1><blockquote><p><a href="https://pan.baidu.com/s/1-DXuNMzeSBl3mXBss2FkWA">MCD19A2 AOD数据示例</a></p><p>提取码：jjgg</p></blockquote><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@Time ： 2023/9/7 16:08</span></span><br><span class="line"><span class="string">@Auth ： Guo Jiaxiang</span></span><br><span class="line"><span class="string">@Blog : https://www.guojxblog.cn</span></span><br><span class="line"><span class="string">@GitHub : https://github.com/guojx0820</span></span><br><span class="line"><span class="string">@Email : guojx0820@gmail.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal, osr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Retrieval_AOD_AE_Classification</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.geo_resolution = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read_tiff_mcd_</span>(<span class="params">self, aod_550_file, aod_470_file</span>):</span><br><span class="line">        aod_550_dataset = gdal.Open(aod_550_file)</span><br><span class="line">        aod_470_dataset = gdal.Open(aod_470_file)</span><br><span class="line">        aod_550_data = aod_550_dataset.ReadAsArray() * <span class="number">0.001</span></span><br><span class="line">        aod_470_data = aod_470_dataset.ReadAsArray() * <span class="number">0.001</span></span><br><span class="line">        geo_transform = aod_550_dataset.GetGeoTransform()</span><br><span class="line">        projection = aod_550_dataset.GetProjection()</span><br><span class="line">        <span class="keyword">return</span> aod_550_data, aod_470_data, geo_transform, projection</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_ae_470_550_cal_</span>(<span class="params">self, aod_550_data, aod_470_data, geo_transform, projection</span>):</span><br><span class="line">        lon_min = geo_transform[<span class="number">0</span>]</span><br><span class="line">        lat_max = geo_transform[<span class="number">3</span>]</span><br><span class="line">        geo_resolution_row = geo_transform[<span class="number">1</span>]</span><br><span class="line">        geo_resolution_col = geo_transform[<span class="number">5</span>]</span><br><span class="line">        ae_470_550_data = -(np.log(aod_470_data / aod_550_data)) / (np.log(<span class="number">470</span> / <span class="number">550</span>))</span><br><span class="line">        <span class="keyword">return</span> ae_470_550_data, lon_min, lat_max, geo_resolution_row, geo_resolution_col</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_traditional_method_classification_</span>(<span class="params">self, aod550, ae470_550</span>):</span><br><span class="line">        tra_type = np.empty((aod550.shape[<span class="number">0</span>], aod550.shape[<span class="number">1</span>]), dtype=np.float32)</span><br><span class="line">        <span class="keyword">for</span> i_raw <span class="keyword">in</span> <span class="built_in">range</span>(tra_type.shape[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> j_col <span class="keyword">in</span> <span class="built_in">range</span>(tra_type.shape[<span class="number">1</span>]):</span><br><span class="line">                aod_temp = np.<span class="built_in">round</span>(aod550[i_raw, j_col], <span class="number">3</span>)</span><br><span class="line">                ae_temp = np.<span class="built_in">round</span>(ae470_550[i_raw, j_col], <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">if</span> aod_temp == <span class="number">0.</span> <span class="keyword">and</span> ae_temp == <span class="number">0.</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">0.</span>  <span class="comment"># No Data</span></span><br><span class="line">                <span class="keyword">elif</span> aod_temp &gt; <span class="number">0.5</span> <span class="keyword">and</span> ae_temp &gt; <span class="number">1.0</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">1.</span>  <span class="comment"># BB</span></span><br><span class="line">                <span class="keyword">elif</span> aod_temp &lt; <span class="number">0.5</span> <span class="keyword">and</span> ae_temp &gt; <span class="number">1.0</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">2.</span>  <span class="comment"># CC</span></span><br><span class="line">                <span class="keyword">elif</span> aod_temp &lt; <span class="number">0.5</span> <span class="keyword">and</span> ae_temp &lt; <span class="number">1.0</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">3.</span>  <span class="comment"># CM</span></span><br><span class="line">                <span class="keyword">elif</span> aod_temp &gt; <span class="number">0.5</span> <span class="keyword">and</span> ae_temp &lt; <span class="number">0.7</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">4.</span>  <span class="comment"># DD</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tra_type[i_raw, j_col] = <span class="number">5.</span>  <span class="comment"># MX</span></span><br><span class="line">        <span class="keyword">return</span> tra_type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_write_tiff_</span>(<span class="params">self, data, lon_min, lat_max, geo_resolution_row, geo_resolution_col, out_name</span>):</span><br><span class="line">        <span class="keyword">if</span> data.ndim == <span class="number">3</span>:</span><br><span class="line">            band_count, rows, cols = data.shape</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            band_count, (rows, cols) = <span class="number">1</span>, data.shape</span><br><span class="line">        driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">        out_raster = driver.Create(out_name, cols, rows, band_count, gdal.GDT_Float32)</span><br><span class="line">        out_raster.SetGeoTransform((lon_min, geo_resolution_row, <span class="number">0</span>, lat_max, <span class="number">0</span>, geo_resolution_col))</span><br><span class="line">        out_raster_SRS = osr.SpatialReference()</span><br><span class="line">        <span class="comment"># 代码4326表示WGS84坐标</span></span><br><span class="line">        out_raster_SRS.ImportFromEPSG(<span class="number">4326</span>)</span><br><span class="line">        out_raster.SetProjection(out_raster_SRS.ExportToWkt())</span><br><span class="line">        <span class="keyword">if</span> band_count == <span class="number">1</span>:</span><br><span class="line">            out_raster.GetRasterBand(<span class="number">1</span>).WriteArray(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 获取数据集第一个波段，是从1开始，不是从0开始</span></span><br><span class="line">            <span class="keyword">for</span> i_band_count <span class="keyword">in</span> <span class="built_in">range</span>(band_count):</span><br><span class="line">                out_raster.GetRasterBand(i_band_count + <span class="number">1</span>).WriteArray(data[i_band_count])</span><br><span class="line">        out_raster.FlushCache()</span><br><span class="line">        <span class="keyword">del</span> out_raster</span><br><span class="line">        out_raster = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    input_directory = <span class="string">&#x27;/mnt/d/Experiments/Aerosol_Classification/Data/MCD19A2/&#x27;</span></span><br><span class="line">    output_directory = <span class="string">&#x27;/mnt/d/Experiments/Aerosol_Classification/Data/Results/MCD_Cls/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(output_directory) == <span class="literal">False</span>:</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(input_directory):</span><br><span class="line">        aod550_file_list = [input_directory + i_tif <span class="keyword">for</span> i_tif <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                            i_tif.endswith(<span class="string">&#x27;20220328_avr.tif&#x27;</span>) <span class="keyword">and</span> i_tif.startswith(<span class="string">&#x27;aod_055&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line">        aod470_file_list = [input_directory + i_tif <span class="keyword">for</span> i_tif <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                            i_tif.endswith(<span class="string">&#x27;20220328_avr.tif&#x27;</span>) <span class="keyword">and</span> i_tif.startswith(<span class="string">&#x27;aod_047&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line">    retr_aod_ae = Retrieval_AOD_AE_Classification()</span><br><span class="line">    <span class="keyword">for</span> i_aod550, j_aod470 <span class="keyword">in</span> <span class="built_in">zip</span>(aod550_file_list, aod470_file_list):</span><br><span class="line">        single_start_time = time.time()</span><br><span class="line">        out_name = output_directory + <span class="built_in">str</span>(os.path.basename(i_aod550)[<span class="number">12</span>:<span class="number">20</span>]) + <span class="string">&#x27;_MCD_Cls.tiff&#x27;</span></span><br><span class="line">        aod_550_data, aod_470_data, geo_transform, projection = retr_aod_ae._read_tiff_mcd_(i_aod550, j_aod470)</span><br><span class="line">        ae_470_550_data, lon_min, lat_max, geo_resolution_row, geo_resolution_col = retr_aod_ae._ae_470_550_cal_(</span><br><span class="line">            aod_550_data, aod_470_data, geo_transform, projection)</span><br><span class="line">        tra_type = retr_aod_ae._traditional_method_classification_(aod_550_data, ae_470_550_data)</span><br><span class="line">        retr_aod_ae._write_tiff_(tra_type, lon_min, lat_max, geo_resolution_row, geo_resolution_col, out_name)</span><br><span class="line">        single_end_time = time.time()</span><br><span class="line">        single_run_time = np.<span class="built_in">round</span>(single_end_time - single_start_time, <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;The data &#x27;</span> + <span class="built_in">str</span>(os.path.basename(i_aod550)[<span class="number">12</span>:<span class="number">20</span>]) + <span class="string">&#x27; are classified, the time cosuming is &#x27;</span> +</span><br><span class="line">              <span class="built_in">str</span>(single_run_time) + <span class="string">&#x27; s.&#x27;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    total_run_time = np.<span class="built_in">round</span>(end_time - start_time, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All the data are classified, the time cosuming is &#x27;</span> + <span class="built_in">str</span>(total_run_time) + <span class="string">&#x27; s.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AOD_AE_Classification/aod_047_20210310.png" alt="AOD_470nm 2021/03/10"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AOD_AE_Classification/aod_055_20210310.png" alt="AOD_550nm 2021/03/10"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AOD_AE_Classification/Cls.png" alt="2021/03/10 分类结果示例"></p>]]></content>
      
      
      <categories>
          
          <category> 研究方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大气与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow深度学习——神经网络</title>
      <link href="/archives/6f5df5c1.html"/>
      <url>/archives/6f5df5c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Tensorflow介绍"><a href="#Tensorflow介绍" class="headerlink" title="Tensorflow介绍"></a>Tensorflow介绍</h1><p>TensorFlow 是一个采用数据流图(data flow graphs)，用于数值计算的开源软件库。TensorFlow 最初由Google大脑小组(隶属于Google机器智能研究机构)的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。它是谷歌基于DistBelief进行研发的第二代人工智能学习系统。2015年11月9日，Google发布人工智能系统TensorFlow并宣布开源。</p><p>其命名来源于本身的原理，Tensor(张量)意味着N维数组，Flow(流)意味着基于数据流图的计算。Tensorflow运行过程就是张量从图的一端流动到另一端的计算过程。张量从图中流过的直观图像是其取名为“TensorFlow”的原因。</p><p>TensorFlow的关键点是：“Data Flow Graphs”，表示TensorFlow是一种基于图的计算框架，其中节点（Nodes）在图中表示数学操作，线（Edges）则表示在节点间相互联系的多维数据数组，即张量（Tensor），这种基于流的架构让TensorFlow具有非常高的灵活性，该灵活性也让TensorFlow框架可以在多个平台上进行计算，例如：台式计算机、服务器、移动设备等。</p><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><h2 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/softmax.png" alt="Softmax函数"></p><h2 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/sigmoid.png" alt="Sigmoid函数"></p><h2 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/relu.png" alt="ReLU函数"></p><h1 id="独热编码及其转化"><a href="#独热编码及其转化" class="headerlink" title="独热编码及其转化"></a>独热编码及其转化</h1><p>对于离散型数据，比如一个特征为颜色，他一共有三个值，分别为红，蓝，绿，按照正常想法，我们可能认为，令红色&#x3D;0，蓝色&#x3D;1，绿色&#x3D;2，这样对数据进行了编码，但是，如果把这些数据放到需要计算距离的或者其他模型中，模型会认为重要性是绿色＞蓝色＞红色。但这并不是我们的让机器学习的本意，只是想让机器区分它们，并无大小比较之意。所以这时标签编码是不够的，需要进一步转换。我们可以设置，这个特征有三个取值，我们可以设置三列，分别是红，蓝，绿，对于红色，它的取值是1，0，0，对于蓝色，它的取值是0，1，0，而对于绿色，它的取值是0，0，1。如此一来每两个向量之间的距离都是根号2，在向量空间距离都相等，所以这样不会出现偏序性，基本不会影响基于向量空间度量算法的效果。</p><h1 id="模型层级结构"><a href="#模型层级结构" class="headerlink" title="模型层级结构"></a>模型层级结构</h1><h2 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h2><h2 id="展平层"><a href="#展平层" class="headerlink" title="展平层"></a>展平层</h2><h2 id="隐藏层"><a href="#隐藏层" class="headerlink" title="隐藏层"></a>隐藏层</h2><h2 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/DNN.png" alt="DNN全连接神经网络"></p><p>表1 模型参数信息 Model: “sequential”</p><table><thead><tr><th align="center">Layer (type)</th><th align="center">Output Shape</th><th align="center">Param #</th></tr></thead><tbody><tr><td align="center">flatten (Flatten)</td><td align="center">(None, 784)</td><td align="center">0</td></tr><tr><td align="center">dense (Dense)</td><td align="center">(None, 64)</td><td align="center">50240</td></tr><tr><td align="center">dense_1 (Dense)</td><td align="center">(None, 10)</td><td align="center">650</td></tr></tbody></table><blockquote><p>Total params: 50,890</p><p>Trainable params: 50,890</p><p>Non-trainable params: 0</p></blockquote><hr><h1 id="损失（Loss）函数及准确率"><a href="#损失（Loss）函数及准确率" class="headerlink" title="损失（Loss）函数及准确率"></a>损失（Loss）函数及准确率</h1><p>深度学习中的所有学习算法都必须有一个 最小化或最大化一个函数，称之为损失函数（loss function），或“目标函数”、“代价函数”。损失函数是衡量模型的效果评估。比如：求解一个函数最小点最常用的方法是梯度下降法。</p><p>比如（：全批量梯度下降 Batch GD、随机梯度下降 SGD、小批量梯度下降 mini-batch GD、Adagrad法，Adadelta法、Adam法等）。损失函数就像起伏的山，梯度下降就像从山上滑下来到达最底部的点。</p><h1 id="代码实现及注解"><a href="#代码实现及注解" class="headerlink" title="代码实现及注解"></a>代码实现及注解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@Time ： 2023/7/18 16:55</span></span><br><span class="line"><span class="string">@Auth ： Guo Jiaxiang</span></span><br><span class="line"><span class="string">@Blog : https://www.guojxblog.cn</span></span><br><span class="line"><span class="string">@GitHub : https://github.com/guojx0820</span></span><br><span class="line"><span class="string">@Email : guojx0820@gmail.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"><span class="comment"># 数据归一化：0-255--&gt;0-1</span></span><br><span class="line">plt.imshow(train_images[<span class="number">0</span>])</span><br><span class="line">plt.savefig(<span class="string">&#x27;output_img/train.png&#x27;</span>, dpi=<span class="number">300</span>)</span><br><span class="line">train_images = train_images / <span class="number">255</span></span><br><span class="line">test_images = test_images / <span class="number">255</span></span><br><span class="line"><span class="comment"># 加载labels</span></span><br><span class="line">train_labels = np.array(pd.get_dummies(train_labels))</span><br><span class="line">test_labels = np.array(pd.get_dummies(test_labels))</span><br><span class="line"><span class="comment"># 顺序结构的模型搭建</span></span><br><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(tf.keras.layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)))  <span class="comment"># 展平层</span></span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>))  <span class="comment"># 隐藏层，激活函数sigmoid</span></span><br><span class="line">model.add(tf.keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))  <span class="comment"># 全连接层，激活函数softmax</span></span><br><span class="line">model.summary()  <span class="comment"># 模型预览</span></span><br><span class="line"><span class="comment"># 设置优化器，损失函数和记录准确率</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="string">&#x27;acc&#x27;</span>])</span><br><span class="line"><span class="comment"># 载入训练集，验证机，设置训练轮次</span></span><br><span class="line">history = model.fit(train_images, train_labels, epochs=<span class="number">10</span>, validation_data=(test_images, test_labels))</span><br><span class="line">model.evaluate(test_images, test_labels)</span><br></pre></td></tr></table></figure><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/write.png" alt="手写数据集示例"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/CNN/10epoch.png" alt="10 Epoches训练"></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMAP海洋表面盐度（SSS）数据可视化——Python实现</title>
      <link href="/archives/b9d5eb5f.html"/>
      <url>/archives/b9d5eb5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据介绍：SMAP-海洋表面盐度（SSS）数据"><a href="#数据介绍：SMAP-海洋表面盐度（SSS）数据" class="headerlink" title="数据介绍：SMAP 海洋表面盐度（SSS）数据"></a>数据介绍：SMAP 海洋表面盐度（SSS）数据</h1><p>从海面发出的能量，以开尔文为单位测量等效的“亮度”温度。为实现任务的科学目标，水瓶座探测到亮度温度的变化约为 0.1 开尔文。这是通过仔细的仪器设计（例如，热控制）、数据平均以及避免和&#x2F;或减轻污染源（例如来自太阳的辐射）来实现的。下面概述的要素是使这种极具挑战性的测量成为可能的关键。</p><h2 id="轨道设计："><a href="#轨道设计：" class="headerlink" title="轨道设计："></a>轨道设计：</h2><p>Aquarius 数据条带的可视化，在 7 天重复的太阳同步轨道上，在其下降过程中于上午 6:00 穿过赤道。它不断地在昼&#x2F;夜终结者的暗面采样，以最大限度地减少反射辐射和阳光闪烁（即反向散射）。<br>Aquarius 数据条带（左侧）在 7 天内的可视化侧重于地球某一部分的连续数据条带。三个单独的光束由一个宽椭圆表示，总光束为 390 公里（242 英里）。尽管实际的条带以连续的带状收集数据，但每个椭圆形都以 1 分钟的间隔显示足迹。</p><p>图1 SMAP卫星轨道示意图</p><h2 id="相同的辐射计："><a href="#相同的辐射计：" class="headerlink" title="相同的辐射计："></a>相同的辐射计：</h2><p>三个机载辐射计共用一个直径为 2.5 米（8.2 英尺）的天线反射器。三台辐射计一起连续拍摄了一条 390 公里（242 英里）的幅面，大致垂直于天文台的航向。</p><h2 id="快速采样："><a href="#快速采样：" class="headerlink" title="快速采样："></a>快速采样：</h2><p>Aquarius 辐射计快速采样（即每个数据样本 10 微秒），以帮助检测和减轻射频干扰 (RFI)。具有讽刺意味的是，RFI对 Aquarius 来说是一个不应该存在的问题，因为它的辐射计工作在一个以 1.41 GHz 为中心的频段，这对射电天文学来说是“受保护的”。使用这个频率使水瓶座能够检测到从地球表面自然发出的小亮度温度信号。然而，即使是来自通信和空中交通管制雷达等人造来源的非常微弱的带外信号，也可能压倒 Aquarius 旨在测量的自然信号。</p><h2 id="极化测量："><a href="#极化测量：" class="headerlink" title="极化测量："></a>极化测量：</h2><p>Aquarius 辐射计测量了地球表面自然 L 波段发射的垂直和水平极化。第三个斯托克斯参数是这两种极化之间的相关性。所述第三斯托克斯参数被用于校正法拉第旋转，在发生在电离层，波从地球表面和到达卫星仪器之前传播之后的电磁辐射的偏振方向的变化。</p><h2 id="海洋粗糙度校正："><a href="#海洋粗糙度校正：" class="headerlink" title="海洋粗糙度校正："></a>海洋粗糙度校正：</h2><p>Aquarius 有一个机载散射计，其占地面积与其辐射计相同。散射计通过向地球表面发射微波能量脉冲并测量反射能量（称为反向散射）来工作。<br>一般来说，较粗糙的海洋条件会比光滑、反射性更强的镜面海洋表面散射更多的能量。因此，散射计数据可以帮助修正海洋表面粗糙度，这是水瓶座盐度测量的最大误差来源。<br>数据集中涵盖了从 11 年 8 月 25 日到 15 年 6 月 7 日的完整 45 个月的 Aquarius 科学数据可用性。提高水瓶座测量的准确性是确保数据对科学和社会最有用的一项关键活动。科学家和工程师共同测试和改进算法——或计算的分步程序——用于处理宝瓶座的海洋表面盐度数据。V5 数据代表了盐度遥感方面的最新技术，虽然 Aquarius 项目已经结束，但原始数据可用，并且计划继续进行改进。</p><h2 id="处理步骤："><a href="#处理步骤：" class="headerlink" title="处理步骤："></a>处理步骤：</h2><p>图2 SMAP数据反演SSS处理流程</p><h2 id="改进的地理校正："><a href="#改进的地理校正：" class="headerlink" title="改进的地理校正："></a>改进的地理校正：</h2><p>V4.0 中的地表以 1&#x2F;8° 分辨率导出。在 V3.0 中，地表分辨率的空间分辨率为 ½°。用于推导 V4.0 中地表的地表亮温 (TB) 基于 SMAP 陆地 TB 测量的月气候学。在 V3.0 中，地表 TB 基于地表排放模型。</p><h2 id="修改后的海冰掩膜和标志："><a href="#修改后的海冰掩膜和标志：" class="headerlink" title="修改后的海冰掩膜和标志："></a>修改后的海冰掩膜和标志：</h2><p>V4.0 中的海冰掩码取自遥感系统 (RSS) AMSR-2 海冰地图。在 V3.0 中，海冰掩码来自国家环境预测中心 (NCEP)。V4.0 中的海冰排除阈值已更改为 gice &gt;0.003。这个阈值在 V3.0 中是 gice &gt;0.001。<br>对于 NASA&#x2F;RSS Aquarius 盐度反演至 V4 和 RSS SMAP 盐度反演至 V3（包括 V3），来自 NCEP 的每日海冰掩膜用作辅助场。布鲁克等人。(2014) 和 Dinnat 和 Brucker (2016) 发现 NCEP 海冰面罩在一些情况下是不切实际的。因此，在 Aquarius 第 5 版任务发布结束时，实施了来自特殊传感器微波成像仪 (SSMI) 和 EOS 上的高级微波扫描辐射计 (AMSR-2) 的海冰面罩，而不是 NCEP 海冰面罩。 ## 空间分辨率和空间响应函数：<br>V4.0 盐度检索算法仅在 0.25°地球网格上使用 40 公里空间分辨率巴科斯吉尔伯特最佳插值 (OI) 运行。由此产生的盐度产品称为 sss_smap_40km。从这个 40 公里的产品中，使用简单的下一个邻居平均得出空间分辨率约为 70 公里的平滑产品（称为 sss_smap）。这个平滑的 70 公里 sss_smap 将被视为默认（标准）盐度产品。在 V4 中，sss_smap 和 sss_smap_40km 在同一个文件中提供。</p><h2 id="经验不确定性估计："><a href="#经验不确定性估计：" class="headerlink" title="经验不确定性估计："></a>经验不确定性估计：</h2><p>3 级文件中为 sss_smap 提供了经验不确定性估计 sss_smap_uncertainty。这种不确定性基于 SMAP 和 Scripps Argo 插值场之间的比较。这还包括 Argo 数据在网格地图比例尺上的采样误差，以及制图误差。</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><ul><li>Dennat, E. 和 Brucker, L.（2016 年）。通过水瓶座辐射计改进 L 波段观测的海冰分数表征，IEEE 地球科学和遥感汇刊，doi：10.1109&#x2F;TGRS.2016.2622011。</li><li>Meissner, T.、Wentz, FJ 和 Le Vine, DM (2017)。Aquarius 盐度检索算法理论基础文件 (ATBD)，任务版本结束；RSS技术报告120117；2017 年 12 月 1 日。在线提供。</li><li>Meissner, T.、Wentz, FJ 和 Le Vine, DM (2018)。NASA Aquarius 第 5 版和 SMAP 第 3 版的盐度检索算法，遥感 10, 1121, doi: 10.3390&#x2F;rs10071121。<br>温茨等人。(2014)。0.25 度网格上的遥感系统 GCOM-W1 AMSR2 日常环境套件，版本 8。可在线获取。<blockquote><p>以上资料翻译自NASA官网，具体请参考<a href="https://salinity.oceansciences.org/home.htm">官网</a> 简介。</p></blockquote><h1 id="Python代码与注释详解："><a href="#Python代码与注释详解：" class="headerlink" title="Python代码与注释详解："></a>Python代码与注释详解：</h1><p>处理NASA SMAP海表盐度分析海表盐度随时间和区域变化；<br>下载2020&#x2F;01-2021&#x2F;09 SMAP Salinity V4 data<br><a href="https://salinity.oceansciences.org/home.htm%EF%BC%9B">https://salinity.oceansciences.org/home.htm；</a><br>制作逐月全球海表盐度图并保存；</p><blockquote><p>制作图展示海表盐度分析海表盐度随时间和区域变化代码展示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=np.inf)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_process</span>(<span class="params">file</span>):</span><br><span class="line">    dataset = nc.Dataset(file)</span><br><span class="line">    <span class="comment"># print(dataset)</span></span><br><span class="line">    lon = (dataset.variables[<span class="string">&#x27;lon&#x27;</span>][:])</span><br><span class="line">    lat = (dataset.variables[<span class="string">&#x27;lat&#x27;</span>][:])</span><br><span class="line">    sss = np.array(dataset.variables[<span class="string">&#x27;sss_smap&#x27;</span>][:])</span><br><span class="line">    <span class="comment"># sss[np.where(sss == -9999)] = 0</span></span><br><span class="line">    sss[np.where(sss &gt;= <span class="number">0</span>) <span class="keyword">and</span> (sss &lt; <span class="number">33</span>)] = <span class="number">33</span></span><br><span class="line">    sss[np.where(sss &gt; <span class="number">38</span>)] = <span class="number">38</span></span><br><span class="line">    valid_values = np.where(sss &gt; <span class="number">0</span>)</span><br><span class="line">    sss_min = np.<span class="built_in">round</span>(np.<span class="built_in">min</span>(sss[valid_values]))</span><br><span class="line">    sss_mean = np.<span class="built_in">round</span>(np.mean(sss[valid_values]))</span><br><span class="line">    sss_max = np.<span class="built_in">round</span>(np.<span class="built_in">max</span>(sss[valid_values]))</span><br><span class="line">    <span class="built_in">print</span>(sss[valid_values], sss_min, sss_mean, sss_max)</span><br><span class="line">    <span class="comment"># print(lon.shape, lat.shape, sss.shape)</span></span><br><span class="line">    <span class="keyword">return</span> lon, lat, sss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_sss_fig</span>(<span class="params">file</span>):</span><br><span class="line">    lon, lat, sss = data_process(file)</span><br><span class="line">    lx, ly = np.meshgrid(lon, lat)</span><br><span class="line">    <span class="comment"># sss = np.flip(sss, 1)</span></span><br><span class="line">    <span class="built_in">map</span> = Basemap(projection=<span class="string">&#x27;ortho&#x27;</span>, resolution=<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">                  lat_0=<span class="number">0</span>, lon_0=l)</span><br><span class="line">    <span class="built_in">map</span>.drawmapboundary()</span><br><span class="line">    <span class="built_in">map</span>.fillcontinents(color=<span class="string">&#x27;darkgray&#x27;</span>, lake_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawstates(linewidth=<span class="number">0.25</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawcoastlines(linewidth=<span class="number">0.25</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmeridians(np.arange(-<span class="number">180.</span>, <span class="number">181.</span>, <span class="number">10.</span>), labels=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], fontsize=<span class="number">12</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, color=<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">                      linewidth=<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawparallels(np.arange(-<span class="number">90.</span>, <span class="number">91.</span>, <span class="number">10.</span>), labels=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], fontsize=<span class="number">12</span>, linestyle=<span class="string">&#x27;-.&#x27;</span>, color=<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">                      linewidth=<span class="number">0.5</span>)</span><br><span class="line">    x, y = <span class="built_in">map</span>(lx, ly)</span><br><span class="line">    <span class="comment"># plt.figure(&#x27;Show SSS&#x27;)</span></span><br><span class="line">    lvls = np.linspace(<span class="number">33.</span>, <span class="number">38.</span>, <span class="number">300</span>)</span><br><span class="line">    show_sss = <span class="built_in">map</span>.contourf(x, y, sss, alpha=<span class="number">1.0</span>, cmap=plt.cm.turbo, levels=lvls)</span><br><span class="line">    plt.imshow(sss)</span><br><span class="line">    cbar = <span class="built_in">map</span>.colorbar(show_sss, <span class="string">&#x27;bottom&#x27;</span>, ticks=np.arange(<span class="number">33.</span>, <span class="number">38.1</span>, <span class="number">1.0</span>), <span class="built_in">format</span>=<span class="string">&#x27;%.1f&#x27;</span>, pad=<span class="string">&#x27;10%&#x27;</span>)</span><br><span class="line">    cbar.ax.tick_params(labelsize=<span class="number">12</span>)</span><br><span class="line">    font = &#123;<span class="string">&#x27;weight&#x27;</span>: <span class="string">&#x27;normal&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">16</span>&#125;</span><br><span class="line">    <span class="comment"># plt.text(&#x27;Center:(0,180)&#x27;, fontsize=12, verticalalignment=&#x27;bottom&#x27;, horizontalalignment=&#x27;center&#x27;)</span></span><br><span class="line">    plt.title(<span class="string">&#x27;Global Sea Surface Salinity &#x27;</span> + j, font=font, y=<span class="number">1.02</span>)</span><br><span class="line">    plt.savefig(output_path + k + <span class="built_in">str</span>(l) + <span class="string">&#x27;.jpg&#x27;</span>, dpi=<span class="number">600</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    postfix = <span class="string">&#x27;.nc&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;2020_01&#x27;, &#x27;2020_02&#x27;, &#x27;2020_03&#x27;, &#x27;2020_04&#x27;, &#x27;2020_05&#x27;, &#x27;2020_06&#x27;, &#x27;2020_07&#x27;, &#x27;2020_08&#x27;, &#x27;2020_09&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;2020_10&#x27;, &#x27;2020_11&#x27;, &#x27;2020_12&#x27;, &#x27;2021_01&#x27;, &#x27;2021_02&#x27;,</span></span><br><span class="line">    prefix = [<span class="string">&#x27;2021_03&#x27;</span>, <span class="string">&#x27;2021_04&#x27;</span>, <span class="string">&#x27;2021_05&#x27;</span>, <span class="string">&#x27;2021_06&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2021_07&#x27;</span>, <span class="string">&#x27;2021_08&#x27;</span>, <span class="string">&#x27;2021_09&#x27;</span>]</span><br><span class="line">    <span class="comment"># &#x27;Jan.2020&#x27;, &#x27;Feb.2020&#x27;, &#x27;Mar.2020&#x27;, &#x27;Apr.2020&#x27;, &#x27;May.2020&#x27;, &#x27;Jun.2020&#x27;, &#x27;Jul.2020&#x27;, &#x27;Aug.2020&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;Sept.2020&#x27;, &#x27;Oct.2020&#x27;, &#x27;Nov.2020&#x27;, &#x27;Dec.2020&#x27;, &#x27;Jan.2021&#x27;, &#x27;Feb.2021&#x27;,</span></span><br><span class="line">title_list = [<span class="string">&#x27;Mar.2021&#x27;</span>, <span class="string">&#x27;Apr.2021&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;May.2021&#x27;</span>, <span class="string">&#x27;Jun.2021&#x27;</span>, <span class="string">&#x27;Jul.2021&#x27;</span>, <span class="string">&#x27;Aug.2021&#x27;</span>, <span class="string">&#x27;Sept.2021&#x27;</span>]</span><br><span class="line">input_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest8/Data/&#x27;</span></span><br><span class="line">output_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest8/Results/Img2/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">    os.mkdir(output_path)</span><br><span class="line">file_list = os.listdir(input_path)</span><br><span class="line"><span class="keyword">for</span> k, j <span class="keyword">in</span> <span class="built_in">zip</span>(prefix, title_list):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">if</span> i.endswith(postfix) <span class="keyword">and</span> i[<span class="number">24</span>:].startswith(k):</span><br><span class="line">            file = input_path + i</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">180</span>, <span class="number">180</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="built_in">print</span>(file, l)</span><br><span class="line">                <span class="comment"># input_file = &#x27;/Users/leo/Desktop/MarineTechTest8/Data/RSS_smap_SSS_L3_monthly_2020_01_FNL_v04.0.nc&#x27;</span></span><br><span class="line">                draw_sss_fig(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>生成gif动态图代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio, os</span><br><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_gif</span>(<span class="params">image_list, gif_name, duration</span>):</span><br><span class="line">    frames = []</span><br><span class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> image_list:</span><br><span class="line">        frames.append(imageio.imread(image_name))</span><br><span class="line">    imageio.mimsave(gif_name, frames, <span class="string">&#x27;GIF&#x27;</span>, duration=duration)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    postfix = <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    postfix1 = <span class="string">&#x27;Global_SSS_All1.gif&#x27;</span></span><br><span class="line">    prefix = [<span class="string">&#x27;2020_01170&#x27;</span>,  <span class="string">&#x27;2020_02170&#x27;</span>,  <span class="string">&#x27;2020_03170&#x27;</span>,  <span class="string">&#x27;2020_04170&#x27;</span>,  <span class="string">&#x27;2020_05170&#x27;</span>,  <span class="string">&#x27;2020_06170&#x27;</span>,  <span class="string">&#x27;2020_07170&#x27;</span>,  <span class="string">&#x27;2020_08170&#x27;</span>,  <span class="string">&#x27;2020_09170&#x27;</span>,  <span class="string">&#x27;2020_10170&#x27;</span>,  <span class="string">&#x27;2020_11170&#x27;</span>,  <span class="string">&#x27;2020_12170&#x27;</span>,  <span class="string">&#x27;2021_01170&#x27;</span>,  <span class="string">&#x27;2021_02170&#x27;</span>,  <span class="string">&#x27;2021_03170&#x27;</span>,  <span class="string">&#x27;2021_04170&#x27;</span>,  <span class="string">&#x27;2021_05170&#x27;</span>,  <span class="string">&#x27;2021_06170&#x27;</span>,  <span class="string">&#x27;2021_07170&#x27;</span>,  <span class="string">&#x27;2021_08170&#x27;</span>,  <span class="string">&#x27;2021_09170&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01160&#x27;</span>,  <span class="string">&#x27;2020_02160&#x27;</span>,  <span class="string">&#x27;2020_03160&#x27;</span>,  <span class="string">&#x27;2020_04160&#x27;</span>,  <span class="string">&#x27;2020_05160&#x27;</span>,  <span class="string">&#x27;2020_06160&#x27;</span>,  <span class="string">&#x27;2020_07160&#x27;</span>,  <span class="string">&#x27;2020_08160&#x27;</span>,  <span class="string">&#x27;2020_09160&#x27;</span>,  <span class="string">&#x27;2020_10160&#x27;</span>,  <span class="string">&#x27;2020_11160&#x27;</span>,  <span class="string">&#x27;2020_12160&#x27;</span>,  <span class="string">&#x27;2021_01160&#x27;</span>,  <span class="string">&#x27;2021_02160&#x27;</span>,  <span class="string">&#x27;2021_03160&#x27;</span>,  <span class="string">&#x27;2021_04160&#x27;</span>,  <span class="string">&#x27;2021_05160&#x27;</span>,  <span class="string">&#x27;2021_06160&#x27;</span>,  <span class="string">&#x27;2021_07160&#x27;</span>,  <span class="string">&#x27;2021_08160&#x27;</span>,  <span class="string">&#x27;2021_09160&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01150&#x27;</span>,  <span class="string">&#x27;2020_02150&#x27;</span>,  <span class="string">&#x27;2020_03150&#x27;</span>,  <span class="string">&#x27;2020_04150&#x27;</span>,  <span class="string">&#x27;2020_05150&#x27;</span>,  <span class="string">&#x27;2020_06150&#x27;</span>,  <span class="string">&#x27;2020_07150&#x27;</span>,  <span class="string">&#x27;2020_08150&#x27;</span>,  <span class="string">&#x27;2020_09150&#x27;</span>,  <span class="string">&#x27;2020_10150&#x27;</span>,  <span class="string">&#x27;2020_11150&#x27;</span>,  <span class="string">&#x27;2020_12150&#x27;</span>,  <span class="string">&#x27;2021_01150&#x27;</span>,  <span class="string">&#x27;2021_02150&#x27;</span>,  <span class="string">&#x27;2021_03150&#x27;</span>,  <span class="string">&#x27;2021_04150&#x27;</span>,  <span class="string">&#x27;2021_05150&#x27;</span>,  <span class="string">&#x27;2021_06150&#x27;</span>,  <span class="string">&#x27;2021_07150&#x27;</span>,  <span class="string">&#x27;2021_08150&#x27;</span>,  <span class="string">&#x27;2021_09150&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01140&#x27;</span>,  <span class="string">&#x27;2020_02140&#x27;</span>,  <span class="string">&#x27;2020_03140&#x27;</span>,  <span class="string">&#x27;2020_04140&#x27;</span>,  <span class="string">&#x27;2020_05140&#x27;</span>,  <span class="string">&#x27;2020_06140&#x27;</span>,  <span class="string">&#x27;2020_07140&#x27;</span>,  <span class="string">&#x27;2020_08140&#x27;</span>,  <span class="string">&#x27;2020_09140&#x27;</span>,  <span class="string">&#x27;2020_10140&#x27;</span>,  <span class="string">&#x27;2020_11140&#x27;</span>,  <span class="string">&#x27;2020_12140&#x27;</span>,  <span class="string">&#x27;2021_01140&#x27;</span>,  <span class="string">&#x27;2021_02140&#x27;</span>,  <span class="string">&#x27;2021_03140&#x27;</span>,  <span class="string">&#x27;2021_04140&#x27;</span>,  <span class="string">&#x27;2021_05140&#x27;</span>,  <span class="string">&#x27;2021_06140&#x27;</span>,  <span class="string">&#x27;2021_07140&#x27;</span>,  <span class="string">&#x27;2021_08140&#x27;</span>,  <span class="string">&#x27;2021_09140&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01130&#x27;</span>,  <span class="string">&#x27;2020_02130&#x27;</span>,  <span class="string">&#x27;2020_03130&#x27;</span>,  <span class="string">&#x27;2020_04130&#x27;</span>,  <span class="string">&#x27;2020_05130&#x27;</span>,  <span class="string">&#x27;2020_06130&#x27;</span>,  <span class="string">&#x27;2020_07130&#x27;</span>,  <span class="string">&#x27;2020_08130&#x27;</span>,  <span class="string">&#x27;2020_09130&#x27;</span>,  <span class="string">&#x27;2020_10130&#x27;</span>,  <span class="string">&#x27;2020_11130&#x27;</span>,  <span class="string">&#x27;2020_12130&#x27;</span>,  <span class="string">&#x27;2021_01130&#x27;</span>,  <span class="string">&#x27;2021_02130&#x27;</span>,  <span class="string">&#x27;2021_03130&#x27;</span>,  <span class="string">&#x27;2021_04130&#x27;</span>,  <span class="string">&#x27;2021_05130&#x27;</span>,  <span class="string">&#x27;2021_06130&#x27;</span>,  <span class="string">&#x27;2021_07130&#x27;</span>,  <span class="string">&#x27;2021_08130&#x27;</span>,  <span class="string">&#x27;2021_09130&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01120&#x27;</span>,  <span class="string">&#x27;2020_02120&#x27;</span>,  <span class="string">&#x27;2020_03120&#x27;</span>,  <span class="string">&#x27;2020_04120&#x27;</span>,  <span class="string">&#x27;2020_05120&#x27;</span>,  <span class="string">&#x27;2020_06120&#x27;</span>,  <span class="string">&#x27;2020_07120&#x27;</span>,  <span class="string">&#x27;2020_08120&#x27;</span>,  <span class="string">&#x27;2020_09120&#x27;</span>,  <span class="string">&#x27;2020_10120&#x27;</span>,  <span class="string">&#x27;2020_11120&#x27;</span>,  <span class="string">&#x27;2020_12120&#x27;</span>,  <span class="string">&#x27;2021_01120&#x27;</span>,  <span class="string">&#x27;2021_02120&#x27;</span>,  <span class="string">&#x27;2021_03120&#x27;</span>,  <span class="string">&#x27;2021_04120&#x27;</span>,  <span class="string">&#x27;2021_05120&#x27;</span>,  <span class="string">&#x27;2021_06120&#x27;</span>,  <span class="string">&#x27;2021_07120&#x27;</span>,  <span class="string">&#x27;2021_08120&#x27;</span>,  <span class="string">&#x27;2021_09120&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01110&#x27;</span>,  <span class="string">&#x27;2020_02110&#x27;</span>,  <span class="string">&#x27;2020_03110&#x27;</span>,  <span class="string">&#x27;2020_04110&#x27;</span>,  <span class="string">&#x27;2020_05110&#x27;</span>,  <span class="string">&#x27;2020_06110&#x27;</span>,  <span class="string">&#x27;2020_07110&#x27;</span>,  <span class="string">&#x27;2020_08110&#x27;</span>,  <span class="string">&#x27;2020_09110&#x27;</span>,  <span class="string">&#x27;2020_10110&#x27;</span>,  <span class="string">&#x27;2020_11110&#x27;</span>,  <span class="string">&#x27;2020_12110&#x27;</span>,  <span class="string">&#x27;2021_01110&#x27;</span>,  <span class="string">&#x27;2021_02110&#x27;</span>,  <span class="string">&#x27;2021_03110&#x27;</span>,  <span class="string">&#x27;2021_04110&#x27;</span>,  <span class="string">&#x27;2021_05110&#x27;</span>,  <span class="string">&#x27;2021_06110&#x27;</span>,  <span class="string">&#x27;2021_07110&#x27;</span>,  <span class="string">&#x27;2021_08110&#x27;</span>,  <span class="string">&#x27;2021_09110&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01100&#x27;</span>,  <span class="string">&#x27;2020_02100&#x27;</span>,  <span class="string">&#x27;2020_03100&#x27;</span>,  <span class="string">&#x27;2020_04100&#x27;</span>,  <span class="string">&#x27;2020_05100&#x27;</span>,  <span class="string">&#x27;2020_06100&#x27;</span>,  <span class="string">&#x27;2020_07100&#x27;</span>,  <span class="string">&#x27;2020_08100&#x27;</span>,  <span class="string">&#x27;2020_09100&#x27;</span>,  <span class="string">&#x27;2020_10100&#x27;</span>,  <span class="string">&#x27;2020_11100&#x27;</span>,  <span class="string">&#x27;2020_12100&#x27;</span>,  <span class="string">&#x27;2021_01100&#x27;</span>,  <span class="string">&#x27;2021_02100&#x27;</span>,  <span class="string">&#x27;2021_03100&#x27;</span>,  <span class="string">&#x27;2021_04100&#x27;</span>,  <span class="string">&#x27;2021_05100&#x27;</span>,  <span class="string">&#x27;2021_06100&#x27;</span>,  <span class="string">&#x27;2021_07100&#x27;</span>,  <span class="string">&#x27;2021_08100&#x27;</span>,  <span class="string">&#x27;2021_09100&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0190&#x27;</span>,   <span class="string">&#x27;2020_0290&#x27;</span>,   <span class="string">&#x27;2020_0390&#x27;</span>,   <span class="string">&#x27;2020_0490&#x27;</span>,   <span class="string">&#x27;2020_0590&#x27;</span>,   <span class="string">&#x27;2020_0690&#x27;</span>,   <span class="string">&#x27;2020_0790&#x27;</span>,   <span class="string">&#x27;2020_0890&#x27;</span>,   <span class="string">&#x27;2020_0990&#x27;</span>,   <span class="string">&#x27;2020_1090&#x27;</span>,   <span class="string">&#x27;2020_1190&#x27;</span>,   <span class="string">&#x27;2020_1290&#x27;</span>,   <span class="string">&#x27;2021_0190&#x27;</span>,   <span class="string">&#x27;2021_0290&#x27;</span>,   <span class="string">&#x27;2021_0390&#x27;</span>,   <span class="string">&#x27;2021_0490&#x27;</span>,   <span class="string">&#x27;2021_0590&#x27;</span>,   <span class="string">&#x27;2021_0690&#x27;</span>,   <span class="string">&#x27;2021_0790&#x27;</span>,   <span class="string">&#x27;2021_0890&#x27;</span>,   <span class="string">&#x27;2021_0990&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0180&#x27;</span>,   <span class="string">&#x27;2020_0280&#x27;</span>,   <span class="string">&#x27;2020_0380&#x27;</span>,   <span class="string">&#x27;2020_0480&#x27;</span>,   <span class="string">&#x27;2020_0580&#x27;</span>,   <span class="string">&#x27;2020_0680&#x27;</span>,   <span class="string">&#x27;2020_0780&#x27;</span>,   <span class="string">&#x27;2020_0880&#x27;</span>,   <span class="string">&#x27;2020_0980&#x27;</span>,   <span class="string">&#x27;2020_1080&#x27;</span>,   <span class="string">&#x27;2020_1180&#x27;</span>,   <span class="string">&#x27;2020_1280&#x27;</span>,   <span class="string">&#x27;2021_0180&#x27;</span>,   <span class="string">&#x27;2021_0280&#x27;</span>,   <span class="string">&#x27;2021_0380&#x27;</span>,   <span class="string">&#x27;2021_0480&#x27;</span>,   <span class="string">&#x27;2021_0580&#x27;</span>,   <span class="string">&#x27;2021_0680&#x27;</span>,   <span class="string">&#x27;2021_0780&#x27;</span>,   <span class="string">&#x27;2021_0880&#x27;</span>,   <span class="string">&#x27;2021_0980&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0170&#x27;</span>,   <span class="string">&#x27;2020_0270&#x27;</span>,   <span class="string">&#x27;2020_0370&#x27;</span>,   <span class="string">&#x27;2020_0470&#x27;</span>,   <span class="string">&#x27;2020_0570&#x27;</span>,   <span class="string">&#x27;2020_0670&#x27;</span>,   <span class="string">&#x27;2020_0770&#x27;</span>,   <span class="string">&#x27;2020_0870&#x27;</span>,   <span class="string">&#x27;2020_0970&#x27;</span>,   <span class="string">&#x27;2020_1070&#x27;</span>,   <span class="string">&#x27;2020_1170&#x27;</span>,   <span class="string">&#x27;2020_1270&#x27;</span>,   <span class="string">&#x27;2021_0170&#x27;</span>,   <span class="string">&#x27;2021_0270&#x27;</span>,   <span class="string">&#x27;2021_0370&#x27;</span>,   <span class="string">&#x27;2021_0470&#x27;</span>,   <span class="string">&#x27;2021_0570&#x27;</span>,   <span class="string">&#x27;2021_0670&#x27;</span>,   <span class="string">&#x27;2021_0770&#x27;</span>,   <span class="string">&#x27;2021_0870&#x27;</span>,   <span class="string">&#x27;2021_0970&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0160&#x27;</span>,   <span class="string">&#x27;2020_0260&#x27;</span>,   <span class="string">&#x27;2020_0360&#x27;</span>,   <span class="string">&#x27;2020_0460&#x27;</span>,   <span class="string">&#x27;2020_0560&#x27;</span>,   <span class="string">&#x27;2020_0660&#x27;</span>,   <span class="string">&#x27;2020_0760&#x27;</span>,   <span class="string">&#x27;2020_0860&#x27;</span>,   <span class="string">&#x27;2020_0960&#x27;</span>,   <span class="string">&#x27;2020_1060&#x27;</span>,   <span class="string">&#x27;2020_1160&#x27;</span>,   <span class="string">&#x27;2020_1260&#x27;</span>,   <span class="string">&#x27;2021_0160&#x27;</span>,   <span class="string">&#x27;2021_0260&#x27;</span>,   <span class="string">&#x27;2021_0360&#x27;</span>,   <span class="string">&#x27;2021_0460&#x27;</span>,   <span class="string">&#x27;2021_0560&#x27;</span>,   <span class="string">&#x27;2021_0660&#x27;</span>,   <span class="string">&#x27;2021_0760&#x27;</span>,   <span class="string">&#x27;2021_0860&#x27;</span>,   <span class="string">&#x27;2021_0960&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0150&#x27;</span>,   <span class="string">&#x27;2020_0250&#x27;</span>,   <span class="string">&#x27;2020_0350&#x27;</span>,   <span class="string">&#x27;2020_0450&#x27;</span>,   <span class="string">&#x27;2020_0550&#x27;</span>,   <span class="string">&#x27;2020_0650&#x27;</span>,   <span class="string">&#x27;2020_0750&#x27;</span>,   <span class="string">&#x27;2020_0850&#x27;</span>,   <span class="string">&#x27;2020_0950&#x27;</span>,   <span class="string">&#x27;2020_1050&#x27;</span>,   <span class="string">&#x27;2020_1150&#x27;</span>,   <span class="string">&#x27;2020_1250&#x27;</span>,   <span class="string">&#x27;2021_0150&#x27;</span>,   <span class="string">&#x27;2021_0250&#x27;</span>,   <span class="string">&#x27;2021_0350&#x27;</span>,   <span class="string">&#x27;2021_0450&#x27;</span>,   <span class="string">&#x27;2021_0550&#x27;</span>,   <span class="string">&#x27;2021_0650&#x27;</span>,   <span class="string">&#x27;2021_0750&#x27;</span>,   <span class="string">&#x27;2021_0850&#x27;</span>,   <span class="string">&#x27;2021_0950&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0140&#x27;</span>,   <span class="string">&#x27;2020_0240&#x27;</span>,   <span class="string">&#x27;2020_0340&#x27;</span>,   <span class="string">&#x27;2020_0440&#x27;</span>,   <span class="string">&#x27;2020_0540&#x27;</span>,   <span class="string">&#x27;2020_0640&#x27;</span>,   <span class="string">&#x27;2020_0740&#x27;</span>,   <span class="string">&#x27;2020_0840&#x27;</span>,   <span class="string">&#x27;2020_0940&#x27;</span>,   <span class="string">&#x27;2020_1040&#x27;</span>,   <span class="string">&#x27;2020_1140&#x27;</span>,   <span class="string">&#x27;2020_1240&#x27;</span>,   <span class="string">&#x27;2021_0140&#x27;</span>,   <span class="string">&#x27;2021_0240&#x27;</span>,   <span class="string">&#x27;2021_0340&#x27;</span>,   <span class="string">&#x27;2021_0440&#x27;</span>,   <span class="string">&#x27;2021_0540&#x27;</span>,   <span class="string">&#x27;2021_0640&#x27;</span>,   <span class="string">&#x27;2021_0740&#x27;</span>,   <span class="string">&#x27;2021_0840&#x27;</span>,   <span class="string">&#x27;2021_0940&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0130&#x27;</span>,   <span class="string">&#x27;2020_0230&#x27;</span>,   <span class="string">&#x27;2020_0330&#x27;</span>,   <span class="string">&#x27;2020_0430&#x27;</span>,   <span class="string">&#x27;2020_0530&#x27;</span>,   <span class="string">&#x27;2020_0630&#x27;</span>,   <span class="string">&#x27;2020_0730&#x27;</span>,   <span class="string">&#x27;2020_0830&#x27;</span>,   <span class="string">&#x27;2020_0930&#x27;</span>,   <span class="string">&#x27;2020_1030&#x27;</span>,   <span class="string">&#x27;2020_1130&#x27;</span>,   <span class="string">&#x27;2020_1230&#x27;</span>,   <span class="string">&#x27;2021_0130&#x27;</span>,   <span class="string">&#x27;2021_0230&#x27;</span>,   <span class="string">&#x27;2021_0330&#x27;</span>,   <span class="string">&#x27;2021_0430&#x27;</span>,   <span class="string">&#x27;2021_0530&#x27;</span>,   <span class="string">&#x27;2021_0630&#x27;</span>,   <span class="string">&#x27;2021_0730&#x27;</span>,   <span class="string">&#x27;2021_0830&#x27;</span>,   <span class="string">&#x27;2021_0930&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0120&#x27;</span>,   <span class="string">&#x27;2020_0220&#x27;</span>,   <span class="string">&#x27;2020_0320&#x27;</span>,   <span class="string">&#x27;2020_0420&#x27;</span>,   <span class="string">&#x27;2020_0520&#x27;</span>,   <span class="string">&#x27;2020_0620&#x27;</span>,   <span class="string">&#x27;2020_0720&#x27;</span>,   <span class="string">&#x27;2020_0820&#x27;</span>,   <span class="string">&#x27;2020_0920&#x27;</span>,   <span class="string">&#x27;2020_1020&#x27;</span>,   <span class="string">&#x27;2020_1120&#x27;</span>,   <span class="string">&#x27;2020_1220&#x27;</span>,   <span class="string">&#x27;2021_0120&#x27;</span>,   <span class="string">&#x27;2021_0220&#x27;</span>,   <span class="string">&#x27;2021_0320&#x27;</span>,   <span class="string">&#x27;2021_0420&#x27;</span>,   <span class="string">&#x27;2021_0520&#x27;</span>,   <span class="string">&#x27;2021_0620&#x27;</span>,   <span class="string">&#x27;2021_0720&#x27;</span>,   <span class="string">&#x27;2021_0820&#x27;</span>,   <span class="string">&#x27;2021_0920&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_0110.&#x27;</span>,  <span class="string">&#x27;2020_0210.&#x27;</span>,  <span class="string">&#x27;2020_0310.&#x27;</span>,  <span class="string">&#x27;2020_0410.&#x27;</span>,  <span class="string">&#x27;2020_0510.&#x27;</span>,  <span class="string">&#x27;2020_0610.&#x27;</span>,  <span class="string">&#x27;2020_0710.&#x27;</span>,  <span class="string">&#x27;2020_0810.&#x27;</span>,  <span class="string">&#x27;2020_0910.&#x27;</span>,  <span class="string">&#x27;2020_1010.&#x27;</span>,  <span class="string">&#x27;2020_1110.&#x27;</span>,  <span class="string">&#x27;2020_1210.&#x27;</span>,  <span class="string">&#x27;2021_0110.&#x27;</span>,  <span class="string">&#x27;2021_0210.&#x27;</span>,  <span class="string">&#x27;2021_0310.&#x27;</span>,  <span class="string">&#x27;2021_0410.&#x27;</span>,  <span class="string">&#x27;2021_0510.&#x27;</span>,  <span class="string">&#x27;2021_0610.&#x27;</span>,  <span class="string">&#x27;2021_0710.&#x27;</span>,  <span class="string">&#x27;2021_0810.&#x27;</span>,  <span class="string">&#x27;2021_0910.&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_010&#x27;</span>,    <span class="string">&#x27;2020_020&#x27;</span>,    <span class="string">&#x27;2020_030&#x27;</span>,    <span class="string">&#x27;2020_040&#x27;</span>,    <span class="string">&#x27;2020_050&#x27;</span>,    <span class="string">&#x27;2020_060&#x27;</span>,    <span class="string">&#x27;2020_070&#x27;</span>,    <span class="string">&#x27;2020_080&#x27;</span>,    <span class="string">&#x27;2020_090&#x27;</span>,    <span class="string">&#x27;2020_100&#x27;</span>,    <span class="string">&#x27;2020_110&#x27;</span>,    <span class="string">&#x27;2020_120&#x27;</span>,    <span class="string">&#x27;2021_010&#x27;</span>,    <span class="string">&#x27;2021_020&#x27;</span>,    <span class="string">&#x27;2021_030&#x27;</span>,    <span class="string">&#x27;2021_040&#x27;</span>,    <span class="string">&#x27;2021_050&#x27;</span>,    <span class="string">&#x27;2021_060&#x27;</span>,    <span class="string">&#x27;2021_070&#x27;</span>,    <span class="string">&#x27;2021_080&#x27;</span>,    <span class="string">&#x27;2021_090&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-10.&#x27;</span>, <span class="string">&#x27;2020_02-10.&#x27;</span>, <span class="string">&#x27;2020_03-10.&#x27;</span>, <span class="string">&#x27;2020_04-10.&#x27;</span>, <span class="string">&#x27;2020_05-10.&#x27;</span>, <span class="string">&#x27;2020_06-10.&#x27;</span>, <span class="string">&#x27;2020_07-10.&#x27;</span>, <span class="string">&#x27;2020_08-10.&#x27;</span>, <span class="string">&#x27;2020_09-10.&#x27;</span>, <span class="string">&#x27;2020_10-10.&#x27;</span>, <span class="string">&#x27;2020_11-10.&#x27;</span>, <span class="string">&#x27;2020_12-10.&#x27;</span>, <span class="string">&#x27;2021_01-10.&#x27;</span>, <span class="string">&#x27;2021_02-10.&#x27;</span>, <span class="string">&#x27;2021_03-10.&#x27;</span>, <span class="string">&#x27;2021_04-10.&#x27;</span>, <span class="string">&#x27;2021_05-10.&#x27;</span>, <span class="string">&#x27;2021_06-10.&#x27;</span>, <span class="string">&#x27;2021_07-10.&#x27;</span>, <span class="string">&#x27;2021_08-10.&#x27;</span>, <span class="string">&#x27;2021_09-10.&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-20&#x27;</span>,  <span class="string">&#x27;2020_02-20&#x27;</span>,  <span class="string">&#x27;2020_03-20&#x27;</span>,  <span class="string">&#x27;2020_04-20&#x27;</span>,  <span class="string">&#x27;2020_05-20&#x27;</span>,  <span class="string">&#x27;2020_06-20&#x27;</span>,  <span class="string">&#x27;2020_07-20&#x27;</span>,  <span class="string">&#x27;2020_08-20&#x27;</span>,  <span class="string">&#x27;2020_09-20&#x27;</span>,  <span class="string">&#x27;2020_10-20&#x27;</span>,  <span class="string">&#x27;2020_11-20&#x27;</span>,  <span class="string">&#x27;2020_12-20&#x27;</span>,  <span class="string">&#x27;2021_01-20&#x27;</span>,  <span class="string">&#x27;2021_02-20&#x27;</span>,  <span class="string">&#x27;2021_03-20&#x27;</span>,  <span class="string">&#x27;2021_04-20&#x27;</span>,  <span class="string">&#x27;2021_05-20&#x27;</span>,  <span class="string">&#x27;2021_06-20&#x27;</span>,  <span class="string">&#x27;2021_07-20&#x27;</span>,  <span class="string">&#x27;2021_08-20&#x27;</span>,  <span class="string">&#x27;2021_09-20&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-30&#x27;</span>,  <span class="string">&#x27;2020_02-30&#x27;</span>,  <span class="string">&#x27;2020_03-30&#x27;</span>,  <span class="string">&#x27;2020_04-30&#x27;</span>,  <span class="string">&#x27;2020_05-30&#x27;</span>,  <span class="string">&#x27;2020_06-30&#x27;</span>,  <span class="string">&#x27;2020_07-30&#x27;</span>,  <span class="string">&#x27;2020_08-30&#x27;</span>,  <span class="string">&#x27;2020_09-30&#x27;</span>,  <span class="string">&#x27;2020_10-30&#x27;</span>,  <span class="string">&#x27;2020_11-30&#x27;</span>,  <span class="string">&#x27;2020_12-30&#x27;</span>,  <span class="string">&#x27;2021_01-30&#x27;</span>,  <span class="string">&#x27;2021_02-30&#x27;</span>,  <span class="string">&#x27;2021_03-30&#x27;</span>,  <span class="string">&#x27;2021_04-30&#x27;</span>,  <span class="string">&#x27;2021_05-30&#x27;</span>,  <span class="string">&#x27;2021_06-30&#x27;</span>,  <span class="string">&#x27;2021_07-30&#x27;</span>,  <span class="string">&#x27;2021_08-30&#x27;</span>,  <span class="string">&#x27;2021_09-30&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-40&#x27;</span>,  <span class="string">&#x27;2020_02-40&#x27;</span>,  <span class="string">&#x27;2020_03-40&#x27;</span>,  <span class="string">&#x27;2020_04-40&#x27;</span>,  <span class="string">&#x27;2020_05-40&#x27;</span>,  <span class="string">&#x27;2020_06-40&#x27;</span>,  <span class="string">&#x27;2020_07-40&#x27;</span>,  <span class="string">&#x27;2020_08-40&#x27;</span>,  <span class="string">&#x27;2020_09-40&#x27;</span>,  <span class="string">&#x27;2020_10-40&#x27;</span>,  <span class="string">&#x27;2020_11-40&#x27;</span>,  <span class="string">&#x27;2020_12-40&#x27;</span>,  <span class="string">&#x27;2021_01-40&#x27;</span>,  <span class="string">&#x27;2021_02-40&#x27;</span>,  <span class="string">&#x27;2021_03-40&#x27;</span>,  <span class="string">&#x27;2021_04-40&#x27;</span>,  <span class="string">&#x27;2021_05-40&#x27;</span>,  <span class="string">&#x27;2021_06-40&#x27;</span>,  <span class="string">&#x27;2021_07-40&#x27;</span>,  <span class="string">&#x27;2021_08-40&#x27;</span>,  <span class="string">&#x27;2021_09-40&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-50&#x27;</span>,  <span class="string">&#x27;2020_02-50&#x27;</span>,  <span class="string">&#x27;2020_03-50&#x27;</span>,  <span class="string">&#x27;2020_04-50&#x27;</span>,  <span class="string">&#x27;2020_05-50&#x27;</span>,  <span class="string">&#x27;2020_06-50&#x27;</span>,  <span class="string">&#x27;2020_07-50&#x27;</span>,  <span class="string">&#x27;2020_08-50&#x27;</span>,  <span class="string">&#x27;2020_09-50&#x27;</span>,  <span class="string">&#x27;2020_10-50&#x27;</span>,  <span class="string">&#x27;2020_11-50&#x27;</span>,  <span class="string">&#x27;2020_12-50&#x27;</span>,  <span class="string">&#x27;2021_01-50&#x27;</span>,  <span class="string">&#x27;2021_02-50&#x27;</span>,  <span class="string">&#x27;2021_03-50&#x27;</span>,  <span class="string">&#x27;2021_04-50&#x27;</span>,  <span class="string">&#x27;2021_05-50&#x27;</span>,  <span class="string">&#x27;2021_06-50&#x27;</span>,  <span class="string">&#x27;2021_07-50&#x27;</span>,  <span class="string">&#x27;2021_08-50&#x27;</span>,  <span class="string">&#x27;2021_09-50&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-60&#x27;</span>,  <span class="string">&#x27;2020_02-60&#x27;</span>,  <span class="string">&#x27;2020_03-60&#x27;</span>,  <span class="string">&#x27;2020_04-60&#x27;</span>,  <span class="string">&#x27;2020_05-60&#x27;</span>,  <span class="string">&#x27;2020_06-60&#x27;</span>,  <span class="string">&#x27;2020_07-60&#x27;</span>,  <span class="string">&#x27;2020_08-60&#x27;</span>,  <span class="string">&#x27;2020_09-60&#x27;</span>,  <span class="string">&#x27;2020_10-60&#x27;</span>,  <span class="string">&#x27;2020_11-60&#x27;</span>,  <span class="string">&#x27;2020_12-60&#x27;</span>,  <span class="string">&#x27;2021_01-60&#x27;</span>,  <span class="string">&#x27;2021_02-60&#x27;</span>,  <span class="string">&#x27;2021_03-60&#x27;</span>,  <span class="string">&#x27;2021_04-60&#x27;</span>,  <span class="string">&#x27;2021_05-60&#x27;</span>,  <span class="string">&#x27;2021_06-60&#x27;</span>,  <span class="string">&#x27;2021_07-60&#x27;</span>,  <span class="string">&#x27;2021_08-60&#x27;</span>,  <span class="string">&#x27;2021_09-60&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-70&#x27;</span>,  <span class="string">&#x27;2020_02-70&#x27;</span>,  <span class="string">&#x27;2020_03-70&#x27;</span>,  <span class="string">&#x27;2020_04-70&#x27;</span>,  <span class="string">&#x27;2020_05-70&#x27;</span>,  <span class="string">&#x27;2020_06-70&#x27;</span>,  <span class="string">&#x27;2020_07-70&#x27;</span>,  <span class="string">&#x27;2020_08-70&#x27;</span>,  <span class="string">&#x27;2020_09-70&#x27;</span>,  <span class="string">&#x27;2020_10-70&#x27;</span>,  <span class="string">&#x27;2020_11-70&#x27;</span>,  <span class="string">&#x27;2020_12-70&#x27;</span>,  <span class="string">&#x27;2021_01-70&#x27;</span>,  <span class="string">&#x27;2021_02-70&#x27;</span>,  <span class="string">&#x27;2021_03-70&#x27;</span>,  <span class="string">&#x27;2021_04-70&#x27;</span>,  <span class="string">&#x27;2021_05-70&#x27;</span>,  <span class="string">&#x27;2021_06-70&#x27;</span>,  <span class="string">&#x27;2021_07-70&#x27;</span>,  <span class="string">&#x27;2021_08-70&#x27;</span>,  <span class="string">&#x27;2021_09-70&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-80&#x27;</span>,  <span class="string">&#x27;2020_02-80&#x27;</span>,  <span class="string">&#x27;2020_03-80&#x27;</span>,  <span class="string">&#x27;2020_04-80&#x27;</span>,  <span class="string">&#x27;2020_05-80&#x27;</span>,  <span class="string">&#x27;2020_06-80&#x27;</span>,  <span class="string">&#x27;2020_07-80&#x27;</span>,  <span class="string">&#x27;2020_08-80&#x27;</span>,  <span class="string">&#x27;2020_09-80&#x27;</span>,  <span class="string">&#x27;2020_10-80&#x27;</span>,  <span class="string">&#x27;2020_11-80&#x27;</span>,  <span class="string">&#x27;2020_12-80&#x27;</span>,  <span class="string">&#x27;2021_01-80&#x27;</span>,  <span class="string">&#x27;2021_02-80&#x27;</span>,  <span class="string">&#x27;2021_03-80&#x27;</span>,  <span class="string">&#x27;2021_04-80&#x27;</span>,  <span class="string">&#x27;2021_05-80&#x27;</span>,  <span class="string">&#x27;2021_06-80&#x27;</span>,  <span class="string">&#x27;2021_07-80&#x27;</span>,  <span class="string">&#x27;2021_08-80&#x27;</span>,  <span class="string">&#x27;2021_09-80&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-90&#x27;</span>,  <span class="string">&#x27;2020_02-90&#x27;</span>,  <span class="string">&#x27;2020_03-90&#x27;</span>,  <span class="string">&#x27;2020_04-90&#x27;</span>,  <span class="string">&#x27;2020_05-90&#x27;</span>,  <span class="string">&#x27;2020_06-90&#x27;</span>,  <span class="string">&#x27;2020_07-90&#x27;</span>,  <span class="string">&#x27;2020_08-90&#x27;</span>,  <span class="string">&#x27;2020_09-90&#x27;</span>,  <span class="string">&#x27;2020_10-90&#x27;</span>,  <span class="string">&#x27;2020_11-90&#x27;</span>,  <span class="string">&#x27;2020_12-90&#x27;</span>,  <span class="string">&#x27;2021_01-90&#x27;</span>,  <span class="string">&#x27;2021_02-90&#x27;</span>,  <span class="string">&#x27;2021_03-90&#x27;</span>,  <span class="string">&#x27;2021_04-90&#x27;</span>,  <span class="string">&#x27;2021_05-90&#x27;</span>,  <span class="string">&#x27;2021_06-90&#x27;</span>,  <span class="string">&#x27;2021_07-90&#x27;</span>,  <span class="string">&#x27;2021_08-90&#x27;</span>,  <span class="string">&#x27;2021_09-90&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-100&#x27;</span>, <span class="string">&#x27;2020_02-100&#x27;</span>, <span class="string">&#x27;2020_03-100&#x27;</span>, <span class="string">&#x27;2020_04-100&#x27;</span>, <span class="string">&#x27;2020_05-100&#x27;</span>, <span class="string">&#x27;2020_06-100&#x27;</span>, <span class="string">&#x27;2020_07-100&#x27;</span>, <span class="string">&#x27;2020_08-100&#x27;</span>, <span class="string">&#x27;2020_09-100&#x27;</span>, <span class="string">&#x27;2020_10-100&#x27;</span>, <span class="string">&#x27;2020_11-100&#x27;</span>, <span class="string">&#x27;2020_12-100&#x27;</span>, <span class="string">&#x27;2021_01-100&#x27;</span>, <span class="string">&#x27;2021_02-100&#x27;</span>, <span class="string">&#x27;2021_03-100&#x27;</span>, <span class="string">&#x27;2021_04-100&#x27;</span>, <span class="string">&#x27;2021_05-100&#x27;</span>, <span class="string">&#x27;2021_06-100&#x27;</span>, <span class="string">&#x27;2021_07-100&#x27;</span>, <span class="string">&#x27;2021_08-100&#x27;</span>, <span class="string">&#x27;2021_09-100&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-110&#x27;</span>, <span class="string">&#x27;2020_02-110&#x27;</span>, <span class="string">&#x27;2020_03-110&#x27;</span>, <span class="string">&#x27;2020_04-110&#x27;</span>, <span class="string">&#x27;2020_05-110&#x27;</span>, <span class="string">&#x27;2020_06-110&#x27;</span>, <span class="string">&#x27;2020_07-110&#x27;</span>, <span class="string">&#x27;2020_08-110&#x27;</span>, <span class="string">&#x27;2020_09-110&#x27;</span>, <span class="string">&#x27;2020_10-110&#x27;</span>, <span class="string">&#x27;2020_11-110&#x27;</span>, <span class="string">&#x27;2020_12-110&#x27;</span>, <span class="string">&#x27;2021_01-110&#x27;</span>, <span class="string">&#x27;2021_02-110&#x27;</span>, <span class="string">&#x27;2021_03-110&#x27;</span>, <span class="string">&#x27;2021_04-110&#x27;</span>, <span class="string">&#x27;2021_05-110&#x27;</span>, <span class="string">&#x27;2021_06-110&#x27;</span>, <span class="string">&#x27;2021_07-110&#x27;</span>, <span class="string">&#x27;2021_08-110&#x27;</span>, <span class="string">&#x27;2021_09-110&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-120&#x27;</span>, <span class="string">&#x27;2020_02-120&#x27;</span>, <span class="string">&#x27;2020_03-120&#x27;</span>, <span class="string">&#x27;2020_04-120&#x27;</span>, <span class="string">&#x27;2020_05-120&#x27;</span>, <span class="string">&#x27;2020_06-120&#x27;</span>, <span class="string">&#x27;2020_07-120&#x27;</span>, <span class="string">&#x27;2020_08-120&#x27;</span>, <span class="string">&#x27;2020_09-120&#x27;</span>, <span class="string">&#x27;2020_10-120&#x27;</span>, <span class="string">&#x27;2020_11-120&#x27;</span>, <span class="string">&#x27;2020_12-120&#x27;</span>, <span class="string">&#x27;2021_01-120&#x27;</span>, <span class="string">&#x27;2021_02-120&#x27;</span>, <span class="string">&#x27;2021_03-120&#x27;</span>, <span class="string">&#x27;2021_04-120&#x27;</span>, <span class="string">&#x27;2021_05-120&#x27;</span>, <span class="string">&#x27;2021_06-120&#x27;</span>, <span class="string">&#x27;2021_07-120&#x27;</span>, <span class="string">&#x27;2021_08-120&#x27;</span>, <span class="string">&#x27;2021_09-120&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-130&#x27;</span>, <span class="string">&#x27;2020_02-130&#x27;</span>, <span class="string">&#x27;2020_03-130&#x27;</span>, <span class="string">&#x27;2020_04-130&#x27;</span>, <span class="string">&#x27;2020_05-130&#x27;</span>, <span class="string">&#x27;2020_06-130&#x27;</span>, <span class="string">&#x27;2020_07-130&#x27;</span>, <span class="string">&#x27;2020_08-130&#x27;</span>, <span class="string">&#x27;2020_09-130&#x27;</span>, <span class="string">&#x27;2020_10-130&#x27;</span>, <span class="string">&#x27;2020_11-130&#x27;</span>, <span class="string">&#x27;2020_12-130&#x27;</span>, <span class="string">&#x27;2021_01-130&#x27;</span>, <span class="string">&#x27;2021_02-130&#x27;</span>, <span class="string">&#x27;2021_03-130&#x27;</span>, <span class="string">&#x27;2021_04-130&#x27;</span>, <span class="string">&#x27;2021_05-130&#x27;</span>, <span class="string">&#x27;2021_06-130&#x27;</span>, <span class="string">&#x27;2021_07-130&#x27;</span>, <span class="string">&#x27;2021_08-130&#x27;</span>, <span class="string">&#x27;2021_09-130&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-140&#x27;</span>, <span class="string">&#x27;2020_02-140&#x27;</span>, <span class="string">&#x27;2020_03-140&#x27;</span>, <span class="string">&#x27;2020_04-140&#x27;</span>, <span class="string">&#x27;2020_05-140&#x27;</span>, <span class="string">&#x27;2020_06-140&#x27;</span>, <span class="string">&#x27;2020_07-140&#x27;</span>, <span class="string">&#x27;2020_08-140&#x27;</span>, <span class="string">&#x27;2020_09-140&#x27;</span>, <span class="string">&#x27;2020_10-140&#x27;</span>, <span class="string">&#x27;2020_11-140&#x27;</span>, <span class="string">&#x27;2020_12-140&#x27;</span>, <span class="string">&#x27;2021_01-140&#x27;</span>, <span class="string">&#x27;2021_02-140&#x27;</span>, <span class="string">&#x27;2021_03-140&#x27;</span>, <span class="string">&#x27;2021_04-140&#x27;</span>, <span class="string">&#x27;2021_05-140&#x27;</span>, <span class="string">&#x27;2021_06-140&#x27;</span>, <span class="string">&#x27;2021_07-140&#x27;</span>, <span class="string">&#x27;2021_08-140&#x27;</span>, <span class="string">&#x27;2021_09-140&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-150&#x27;</span>, <span class="string">&#x27;2020_02-150&#x27;</span>, <span class="string">&#x27;2020_03-150&#x27;</span>, <span class="string">&#x27;2020_04-150&#x27;</span>, <span class="string">&#x27;2020_05-150&#x27;</span>, <span class="string">&#x27;2020_06-150&#x27;</span>, <span class="string">&#x27;2020_07-150&#x27;</span>, <span class="string">&#x27;2020_08-150&#x27;</span>, <span class="string">&#x27;2020_09-150&#x27;</span>, <span class="string">&#x27;2020_10-150&#x27;</span>, <span class="string">&#x27;2020_11-150&#x27;</span>, <span class="string">&#x27;2020_12-150&#x27;</span>, <span class="string">&#x27;2021_01-150&#x27;</span>, <span class="string">&#x27;2021_02-150&#x27;</span>, <span class="string">&#x27;2021_03-150&#x27;</span>, <span class="string">&#x27;2021_04-150&#x27;</span>, <span class="string">&#x27;2021_05-150&#x27;</span>, <span class="string">&#x27;2021_06-150&#x27;</span>, <span class="string">&#x27;2021_07-150&#x27;</span>, <span class="string">&#x27;2021_08-150&#x27;</span>, <span class="string">&#x27;2021_09-150&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-160&#x27;</span>, <span class="string">&#x27;2020_02-160&#x27;</span>, <span class="string">&#x27;2020_03-160&#x27;</span>, <span class="string">&#x27;2020_04-160&#x27;</span>, <span class="string">&#x27;2020_05-160&#x27;</span>, <span class="string">&#x27;2020_06-160&#x27;</span>, <span class="string">&#x27;2020_07-160&#x27;</span>, <span class="string">&#x27;2020_08-160&#x27;</span>, <span class="string">&#x27;2020_09-160&#x27;</span>, <span class="string">&#x27;2020_10-160&#x27;</span>, <span class="string">&#x27;2020_11-160&#x27;</span>, <span class="string">&#x27;2020_12-160&#x27;</span>, <span class="string">&#x27;2021_01-160&#x27;</span>, <span class="string">&#x27;2021_02-160&#x27;</span>, <span class="string">&#x27;2021_03-160&#x27;</span>, <span class="string">&#x27;2021_04-160&#x27;</span>, <span class="string">&#x27;2021_05-160&#x27;</span>, <span class="string">&#x27;2021_06-160&#x27;</span>, <span class="string">&#x27;2021_07-160&#x27;</span>, <span class="string">&#x27;2021_08-160&#x27;</span>, <span class="string">&#x27;2021_09-160&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-170&#x27;</span>, <span class="string">&#x27;2020_02-170&#x27;</span>, <span class="string">&#x27;2020_03-170&#x27;</span>, <span class="string">&#x27;2020_04-170&#x27;</span>, <span class="string">&#x27;2020_05-170&#x27;</span>, <span class="string">&#x27;2020_06-170&#x27;</span>, <span class="string">&#x27;2020_07-170&#x27;</span>, <span class="string">&#x27;2020_08-170&#x27;</span>, <span class="string">&#x27;2020_09-170&#x27;</span>, <span class="string">&#x27;2020_10-170&#x27;</span>, <span class="string">&#x27;2020_11-170&#x27;</span>, <span class="string">&#x27;2020_12-170&#x27;</span>, <span class="string">&#x27;2021_01-170&#x27;</span>, <span class="string">&#x27;2021_02-170&#x27;</span>, <span class="string">&#x27;2021_03-170&#x27;</span>, <span class="string">&#x27;2021_04-170&#x27;</span>, <span class="string">&#x27;2021_05-170&#x27;</span>, <span class="string">&#x27;2021_06-170&#x27;</span>, <span class="string">&#x27;2021_07-170&#x27;</span>, <span class="string">&#x27;2021_08-170&#x27;</span>, <span class="string">&#x27;2021_09-170&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;2020_01-180&#x27;</span>, <span class="string">&#x27;2020_02-180&#x27;</span>, <span class="string">&#x27;2020_03-180&#x27;</span>, <span class="string">&#x27;2020_04-180&#x27;</span>, <span class="string">&#x27;2020_05-180&#x27;</span>, <span class="string">&#x27;2020_06-180&#x27;</span>, <span class="string">&#x27;2020_07-180&#x27;</span>, <span class="string">&#x27;2020_08-180&#x27;</span>, <span class="string">&#x27;2020_09-180&#x27;</span>, <span class="string">&#x27;2020_10-180&#x27;</span>, <span class="string">&#x27;2020_11-180&#x27;</span>, <span class="string">&#x27;2020_12-180&#x27;</span>, <span class="string">&#x27;2021_01-180&#x27;</span>, <span class="string">&#x27;2021_02-180&#x27;</span>, <span class="string">&#x27;2021_03-180&#x27;</span>, <span class="string">&#x27;2021_04-180&#x27;</span>, <span class="string">&#x27;2021_05-180&#x27;</span>, <span class="string">&#x27;2021_06-180&#x27;</span>, <span class="string">&#x27;2021_07-180&#x27;</span>, <span class="string">&#x27;2021_08-180&#x27;</span>, <span class="string">&#x27;2021_09-180&#x27;</span>]</span><br><span class="line">    input_directory = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest8/Results/Img2/&#x27;</span></span><br><span class="line">    output_directory = <span class="string">&#x27;/Users/leo/Desktop/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_directory):</span><br><span class="line">        os.mkdir(output_directory)</span><br><span class="line">    file_list = os.listdir(input_directory)</span><br><span class="line">    path_list = []</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> prefix:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">            <span class="keyword">if</span> i.endswith(postfix) <span class="keyword">and</span> i[<span class="number">0</span>:].startswith(k):</span><br><span class="line">                <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">sum</span>, k, i)</span><br><span class="line">                file_path = input_directory + i</span><br><span class="line">                <span class="comment"># print(file_path)</span></span><br><span class="line">                path_list.append(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(path_list)</span><br><span class="line"></span><br><span class="line">    gif_path = output_directory + postfix1</span><br><span class="line">    duration = <span class="number">0.02</span></span><br><span class="line">    create_gif(path_list, gif_path, duration)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    vfc = mp.VideoFileClip(<span class="string">&quot;/Users/leo/Desktop/Global_SSS_All1.gif&quot;</span>)</span><br><span class="line">    vfc.write_videofile(<span class="string">&quot;/Users/leo/Desktop/Global_SSS_All1.mp4&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>gif动图生成视频文件代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line">vfc = mp.VideoFileClip(<span class="string">&quot;/Users/leo/Desktop/Global_SSS_All.gif&quot;</span>)</span><br><span class="line">vfc.write_videofile(<span class="string">&quot;/Users/leo/Desktop/Global_SSS_All.mp4&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="（三）结果与总结："><a href="#（三）结果与总结：" class="headerlink" title="（三）结果与总结："></a>（三）结果与总结：</h1><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2></li></ul><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Smap_SSS/2020_03-30.jpg" alt="20203月30日全球SMAP 每月海洋表面盐度（SSS）空间分布图"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Smap_SSS/Global_SSS_All2.mp4" alt="2020年1月-2021年9月全球SMAP 每月海洋表面盐度（SSS）时空动态变化图"></p><h2 id="结论与分析"><a href="#结论与分析" class="headerlink" title="结论与分析"></a>结论与分析</h2><p>在SMAP的每月海洋表面盐度（SSS）时间空间分布图中，可以看出：</p><ul><li>从空间上分析，太平洋中南部及大西洋南北半球亚热带地区盐度较大，内陆海，地中海及死海地区普遍具有高盐度区。</li><li>从时间上分析，2020年1月-2021年9月的大洋中部表面盐度没有明显的周期性变化，但呈现动态平衡变化。在我国长江黄河入海口沿岸地区，河流流域进入雨季时，河流径流量大，注入海洋的淡水多，盐度降低，河流入海口的等盐度线向远离海岸的方向凸出；河流流域进入旱季时，河流径流量小，注入海洋的淡水少，盐度增加，河流入海口的等盐度线向靠近海岸的方向凸出。</li><li>在极地地区，夏季时间海冰温度上升，一方面逐渐溶解为海水，对海水盐度起到了稀释的作用，因此海水盐度下降，另一方面，海洋中在夏季出现“跃层”，海盐被隔绝在海底，海表面盐度下降；冬季海水冷却，一方面凝结成海冰，海水溶液中溶剂–纯水被抽走，无机盐占比增加，海水盐度增大，另一方面海水混合度较高，不易出现分层现象，海洋底部无机盐随着海水上涌，盐度增大。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python卫星数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GMI降雨率数据Hovmoller纬向显示——Python代码实现</title>
      <link href="/archives/92a27152.html"/>
      <url>/archives/92a27152.html</url>
      
        <content type="html"><![CDATA[<h1 id="GMI数据介绍："><a href="#GMI数据介绍：" class="headerlink" title="GMI数据介绍："></a>GMI数据介绍：</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>全球降水测量 (GPM) 卫星上有一个称为 GMI（GPM 微波成像仪）的微波辐射计。GPM 卫星于 2014 年 2 月 27 日发射，GMI 仪器在几天后启动。GPM 与其他带有微波辐射计的卫星之间的主要区别之一是轨道倾斜 65 度，允许大约每两周重复一次对所有当地地球时间的完整采样。GPM 平台大约每 40 天进行一次偏航机动，以补偿太阳位置的变化并防止航天器面向太阳的一侧过热。</p><h2 id="仪器说明"><a href="#仪器说明" class="headerlink" title="仪器说明"></a>仪器说明</h2><p>GMI 是一种双极化、多通道、锥形扫描、无源微波辐射计，具有频繁的重访次数。</p><p>GMI 仪器的设计具有严格的校准精度要求，其精度比以前的任何微波卫星传感器都要高，从而使该仪器能够作为微波辐射测量标准。GMI 的几个特性提供了更高的校准精度，包括防止热负载受到阳光侵入、用于双校准系统的低频通道上的噪声二极管以及反射天线涂层。这些功能使我们对我们在此提供的 GMI 数据的质量和准确性非常有信心。D. Draper 等人的论文中提供了有关 GMI 的更多信息。下面的参考部分中列出的论文。此处列出了 GMI 工具的一些详细信息：</p><ul><li>表1 GMI  卫星数据参数介绍</li></ul><table><thead><tr><th align="center">GMI</th><th align="center"></th></tr></thead><tbody><tr><td align="center">卫星平台</td><td align="center">GPM</td></tr><tr><td align="center">高度</td><td align="center">407 公里</td></tr><tr><td align="center">穿越赤道时间 （当地时区）</td><td align="center">变化的</td></tr><tr><td align="center">天线尺寸</td><td align="center">1.22米</td></tr><tr><td align="center">条带宽度</td><td align="center">931 公里</td></tr><tr><td align="center">轨道倾角</td><td align="center">65度</td></tr><tr><td align="center">离天底视角</td><td align="center">48.5 度</td></tr></tbody></table><ul><li>表2 13 个仪器通道</li></ul><table><thead><tr><th align="center">频带 [GHz]</th><th align="center">极化</th><th align="center">空间分辨率（3-dB 足迹大小)[km x km]</th></tr></thead><tbody><tr><td align="center">10.65</td><td align="center">V,H</td><td align="center">32 × 19</td></tr><tr><td align="center">18.7</td><td align="center">V,H</td><td align="center">18 × 11</td></tr><tr><td align="center">23.8</td><td align="center">V</td><td align="center">16 × 10</td></tr><tr><td align="center">36.5</td><td align="center">V,H</td><td align="center">15 × 9</td></tr><tr><td align="center">89.0</td><td align="center">V,H</td><td align="center">7 × 4</td></tr><tr><td align="center">165.5</td><td align="center">V,H</td><td align="center">6 × 4</td></tr><tr><td align="center">183.31+&#x2F;-3</td><td align="center">V</td><td align="center">6 × 4</td></tr><tr><td align="center">183.31+&#x2F;-7</td><td align="center">V</td><td align="center">6 × 4</td></tr></tbody></table><p>我们从美国宇航局戈达德地球科学数据和信息服务中心获取仪器数据，将数据反向处理为原始计数，并应用我们自己的在轨校准将计数转换为亮温。亮度温度与 RSS 辐射传递模型 (RTM) 相互校准。然后，我们生产典型的 RSS 微波辐射计海洋测量产品套件，包括：海面温度 (SST)、地表风速（低频和中频）、大气水蒸气、云中液态水和降雨率。详细信息在Meissner 等人中给出。报告. GMI 数据使用RSS Version-8.2 算法和RTM 进行处理。与 V7 RTM 相比，V8 RTM 提供了略微改进的亮度温度校准；然而，V7和V8算法的海洋产品高度一致。因此，我们认为 V8 产品可与 WindSat、AMSRE、AMSR2 以及 SSM&#x2F;I 和 SSMIS 系列的 V7 产品相媲美。  </p><h2 id="RSS-GMI-数据产品"><a href="#RSS-GMI-数据产品" class="headerlink" title="RSS GMI 数据产品"></a>RSS GMI 数据产品</h2><p>RSS 的大多数微波辐射计海洋数据产品是第 7 版，十进制值代表该仪器的处理阶段，从 .1 开始。GMI 数据是使用更新的 RTM 版本 8 生成的。GMI 的 V8 亮度温度与 V7 亮度温度略有不同；但是，V7和V8海洋产品之间基本上没有区别。GMI V8.2 数据可从 2014 年 4 月 3 日至今。我们继续在 GMI 数据到达时近乎实时地处理它们，延迟大约 3 到 6 个小时。</p><p>我们生成每日二进制数据文件和时间平均（3 天、每周和每月）数据文件。每日文件包括映射到规则 0.25 度网格的海洋测量（地球物理检索或参数），并在轨道之间存在数据间隙。每个参数存在两个映射，一个是上升轨道段，另一个是下降轨道段。每个分段地图上的数据在连续轨道交叉的地方取平均值，并在“接缝”或当天的最后一个轨道与当天的第一个轨道重叠的区域处被覆盖。每日数据文件包含时间图，其中包含每组传递（升序和降序）的 UTC 观测时间。时间平均数据文件不包含任何时间信息。</p><p>网格化数据按照观测日期进行组织。所有日期和时间都是协调世界时 (UTC)，也称为格林威治标准时间 (GMT)、祖鲁时间 (Z)、世界时间 (UT) 和世界时间。数据产品包括日均和时间平均地球物理数据如下：</p><ul><li>表3 GMI 数据产品介绍</li></ul><table><thead><tr><th align="center">每日</th><th align="center">轨道数据映射到 0.25 度网格，根据上升和下降通道分为 2 个地图，早期数据由连续轨道平均或在每日“接缝”覆盖</th></tr></thead><tbody><tr><td align="center">3天</td><td align="center">平均 3 天，包括文件日期</td></tr><tr><td align="center">每周</td><td align="center">平均 7 天，包括星期六的文件日期</td></tr><tr><td align="center">每月</td><td align="center">日历月内所有数据的平均值</td></tr></tbody></table><p>我们的 ftp 站点提供的每个二进制数据文件都包含十四个（每日）或六个（平均）0.25 x 0.25 度网格 (1440,720) 字节映射。对于日常文件，按以下顺序升序七张地图，时间（UTC），海面温度（SST），使用低频通道的 10 米风速（WSPD-LF），使用中频通道的 10 米风速（WSPD） -MF)、大气水汽 (VAPOR)、云中液态水 (CLOUD) 和降雨率 (RAIN)，依次是七个降序图。时间平均文件仅包含相同顺序的地球物理层 [SST、WSPD-LF、WSPD-MF、VAPOR、CLOUD、RAIN]。</p><ul><li>表4 GMI  参数值列表</li></ul><table><thead><tr><th align="center">参数</th><th align="center">产品名称</th><th align="center">产品描述</th><th align="center">增益</th><th align="center">偏移</th><th align="center">有效数据范围</th><th align="center">没有数据的原因</th></tr></thead><tbody><tr><td align="center">时间</td><td align="center">时间</td><td align="center">格林威治标准时间午夜后的分钟数 格林威治标准时间一天中的小数小时</td><td align="center">6.0&#x2F;0.1</td><td align="center">0.&#x2F;0.</td><td align="center">0 到 1440&#x2F;0.0 到 24.0</td><td align="center">没有数据</td></tr><tr><td align="center">海表温度</td><td align="center">海面温度</td><td align="center">水的顶层（表层）温度~1 毫米厚</td><td align="center">0.15</td><td align="center">-3.0</td><td align="center">-3 到 34.5 度</td><td align="center">强风 (&lt;20 m&#x2F;s)、阳光、雨、RFI、靠近海冰或陆地</td></tr><tr><td align="center">风速_LF</td><td align="center">10米风速</td><td align="center">使用 10.7、18.7、23.8 和 36.5 GHz 频道的风速</td><td align="center">0.2</td><td align="center">0.</td><td align="center">0. 至 50.0 m&#x2F;s</td><td align="center">阳光、雨水、RFI、靠近海冰或陆地</td></tr><tr><td align="center">风速_MF</td><td align="center">10米风速</td><td align="center">使用 18.7、23.8 和 36.5 GHz 频道的风速</td><td align="center">0.2</td><td align="center">0.</td><td align="center">0. 至 50.0 m&#x2F;s</td><td align="center">阳光闪烁、雨水 RFI、靠近海冰或陆地</td></tr><tr><td align="center">汽</td><td align="center">柱状大气水汽</td><td align="center">包含在垂直大气柱中的气态水总量</td><td align="center">0.3</td><td align="center">0.</td><td align="center">0. 至 75.0 毫米 1 克&#x2F;厘米2 &#x3D; 10 毫米</td><td align="center">大雨或靠近陆地</td></tr><tr><td align="center">云</td><td align="center">柱状云液态水</td><td align="center">包含在垂直大气柱中的云中液态水总量</td><td align="center">0.01</td><td align="center">-0.05</td><td align="center">-0.05 至 2.45 毫米</td><td align="center">近陆</td></tr><tr><td align="center">雨</td><td align="center">雨量</td><td align="center">液态水沉淀率</td><td align="center">0.1</td><td align="center">0.</td><td align="center">0. 至 25.0 毫米&#x2F;小时</td><td align="center">近陆</td></tr></tbody></table><p>需要缩放 0 到 250 之间的数据值以获得有意义的地球物理数据。要缩放数据，请乘以上表中列出的缩放因子。提供的读取例程执行缩放。</p><p>每日、3 天和每月地图存储在适当的年和月子目录中。每周数据文件存储在 &#x2F;weeks 目录中。</p><p>文件名具有以下命名约定：</p><ul><li>表5 GMI 数据文件命名规则</li></ul><table><thead><tr><th align="center">时间</th><th align="center">目录路径</th><th align="center">文档名称</th></tr></thead><tbody><tr><td align="center">每天</td><td align="center">[年]&#x2F;[月]&#x2F;</td><td align="center">ascat_yyyymmdd_v02.1.gz</td></tr><tr><td align="center">3天</td><td align="center">[年]&#x2F;[月]&#x2F;</td><td align="center">ascat_yyyymmdd_v02.1_3day.gz</td></tr><tr><td align="center">每周</td><td align="center">周&#x2F;</td><td align="center">ascat_yyyymmdd_v02.1.gz</td></tr><tr><td align="center">每月</td><td align="center">[年]&#x2F;[月]&#x2F;</td><td align="center">ascat_yyyymm_v02.1.gz</td></tr></tbody></table><ul><li>表6 ASCAT 数据文件夹路径命名规则</li></ul><table><thead><tr><th align="center">[年]</th><th align="center">年文件夹</th><th align="center">y2007, y2008 等</th></tr></thead><tbody><tr><td align="center">[月]</td><td align="center">月文件夹</td><td align="center">m01（一月）、m02（二月）等</td></tr><tr><td align="center">yyyy</td><td align="center">年</td><td align="center">2007、2008 年等</td></tr><tr><td align="center">毫米</td><td align="center">月</td><td align="center">01（一月）、02（二月）等</td></tr><tr><td align="center">日</td><td align="center">日</td><td align="center">01, 02, … 31</td></tr><tr><td align="center">v</td><td align="center">版本</td><td align="center">2.1</td></tr><tr><td align="center">文件说明符是 RSS 用于引用大量卫星传感器的内部编号代码。GMI 的文件说明符是 f35。GMI 文件名都以 f35 开头。我们的数据访问表中提供了其他 13 个 RSS 微波辐射计的文件说明符。所有辐射计数据文件的文件名都以 f## 开头，以标识该传感器。</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>1440 列和 720 行地图的第一个单元格的中心位于 0.125 E 经度和 -89.875 纬度。第二个单元格的中心是 0.375 E 经度，-89.875 纬度。数据值介于 0 和 255 之间。已保留特定值：</p><ul><li>表7 ASCA数据值设定</li></ul><table><thead><tr><th align="center">0 到 250 &#x3D;</th><th align="center">有效的地球物理数据</th></tr></thead><tbody><tr><td align="center">251 &#x3D;</td><td align="center">不用于散射仪</td></tr><tr><td align="center">252 &#x3D;</td><td align="center">不用于散射仪</td></tr><tr><td align="center">253 &#x3D;</td><td align="center">散射计观测存在，但不好</td></tr><tr><td align="center">254 &#x3D;</td><td align="center">无散射仪观测</td></tr><tr><td align="center">255 &#x3D;</td><td align="center">陆块</td></tr></tbody></table><h2 id="缺失数据"><a href="#缺失数据" class="headerlink" title="缺失数据"></a>缺失数据</h2><p>这些数据中存在差距。缺失数据通常会影响 Daily 和 3-Day 产品，但也会减少 Weekly 和 Monthly 平均值中的观察次数。</p><p>浏览图像时，导航可能会跳过没有数据的日期，或者您可能会看到一张空白地图，表明该时间没有可用数据。</p><p>不生成数据完全缺失的日期的二进制数据文件；他们将不会出现在我们的 FTP 服务器中。</p><p>数据缺口通常是由于我们处理设施上游的数据缺失，例如仪器被关闭。有时，获取和&#x2F;或处理最近记录的数据会出现延迟；几周后，丢失的数据不太可能可用。有关当前中断的信息，请务必查看网页公告。</p><p>GMI 数据完全缺失的日期包括：</p><ul><li>表8 ASCA数据值设定</li></ul><table><thead><tr><th align="center">日期范围</th><th align="center">＃ 天</th></tr></thead><tbody><tr><td align="center">2014.04.27</td><td align="center">1</td></tr><tr><td align="center">2014.10.23</td><td align="center">1</td></tr></tbody></table><h2 id="浏览图片"><a href="#浏览图片" class="headerlink" title="浏览图片"></a>浏览图片</h2><p>每个每日、3 天、每周和每月浏览图像地图显示一个地球物理参数：海面温度 (SST)、10 米风速 (WSPD-LF)、10 米风速 (WSPD-MF)、柱状水汽 (VAPOR) )、云液态水 (CLOUD) 或降雨率 (RAIN)。每日地图分别显示白天或夜间卫星通行证。显示数据的日期是收集数据时的 UTC 日期。每个浏览图像的比例位于地图旁边以供参考。尽管上面的地球物理变量表中给出了有效数据范围（最小到最大），但浏览图像中的比例尺设置为在视觉上增强数据并且可能会有所不同。</p><h2 id="阅读例程"><a href="#阅读例程" class="headerlink" title="阅读例程"></a>阅读例程</h2><p>我们的 ftp 服务器上的 gmi&#x2F;support 目录中提供了二进制文件读取例程和验证文件。例程是用 IDL、Matlab、Fortran、C++ 和 Python 编写的。</p><h2 id="相关数据"><a href="#相关数据" class="headerlink" title="相关数据"></a>相关数据</h2><p>RSS GMI 海洋数据产品没有替代来源。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Draper、DW、D. Newell、FJ Wentz、S. Krimchansky 和 GM Skofronick-Jackson，2015 年：全球降水测量 (GPM) 微波成像仪 (GMI)：仪器概述和早期在轨性能。IEEE 应用地球观测和遥感选定主题杂志。doi:10.1109&#x2F;JSTARS.2015.2403303。</li><li>Meissner, T.、FJ Wentz 和 D. Draper，2012 年：GMI 校准算法和分析理论基础文件，遥感系统，加利福尼亚州圣罗莎，报告编号 041912，124 页。</li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>GMI 数据由遥感系统生成，并由 NASA 物理海洋学项目赞助。</p><h2 id="如何引用这些数据"><a href="#如何引用这些数据" class="headerlink" title="如何引用这些数据"></a>如何引用这些数据</h2><p>继续制作该数据集需要 NASA 的支持。我们需要您在出版物中使用这些数据时确保引用这些数据，以便我们可以向科学界证明该数据集的价值。请在论文的致谢部分包含以下声明：<br>“GMI 数据由遥感系统生成，并由 NASA 地球科学基金赞助。数据可在 <a href="http://www.remss.com/">www.remss.com</a> 上获得。”<br>下面给出了用于出版物的官方数据引用。在括号中插入适当的信息。<br>Wentz, FJ, T. Meissner, J. Scott, KA Hilburn, 2015: Remote Sensing Systems GPM GMI [表明您使用的是 Daily、3-Day、Weekly 还是 Monthly] Environmental Suite on 0.25 deg grid, Version 8.2, [表明如果使用子集]。遥感系统，加利福尼亚州圣罗莎。可在 <a href="http://www.remss.com/missions/gmi">www.remss.com/missions/gmi</a> 在线获取。[访问 dd mmm yyyy]。</p><p>本文所用数据以及上述资料来源于<a href="https://www.remss.com/">remss</a>官网,本文所用数据储存于百度网盘中，可自行下载：</p><blockquote><p><a href="https://pan.baidu.com/s/1mjpw5nmsFBF9UgZ_4w2wcg">GMI Data</a> 提取码: gjxb</p></blockquote><h1 id="Python代码与注释详解"><a href="#Python代码与注释详解" class="headerlink" title="Python代码与注释详解"></a>Python代码与注释详解</h1><p>处理数据用Hovmöller显示纬向平均数据随时间变化, 下载2015-2020六年间GMI weekly data沿纬向分别平均以下两个区域rain rate数据(每0.25o平均)。</p><ul><li>30°W - 30°E， 50°S to 50°N</li><li>150°E - 180°E， 50°S to 50°N</li></ul><p>观察rain rate在不同区域随时间、纬度变化保存图片代码展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Download monthly average GMI data from January 2020 to August 2021</span></span><br><span class="line"><span class="string">Display and save the monthly parameter images,</span></span><br><span class="line"><span class="string">which shall be marked with longitude and latitude and color table value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Time:11/20/2021</span></span><br><span class="line"><span class="string">Author:Guo Jiaxiang</span></span><br><span class="line"><span class="string">Email：guojiaxiang0820@gmail.com</span></span><br><span class="line"><span class="string">GitHubBlog:https://github.com/guojx0820</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gzip, os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> FuncFormatter</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=np.inf)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">switch_case</span>(<span class="params">value</span>):</span><br><span class="line">    date_list = [<span class="string">&quot;2015-Jan.&quot;</span>, <span class="string">&quot;2015-Jun.&quot;</span>, <span class="string">&quot;2015-Dec.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;2016-Jun.&quot;</span>, <span class="string">&quot;2016-Dec.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;2017-Jun.&quot;</span>, <span class="string">&quot;2017-Dec.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;2018-Jun.&quot;</span>, <span class="string">&quot;2018-Dec.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;2019-Jun.&quot;</span>, <span class="string">&quot;2019-Dec.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;2020-Jun.&quot;</span>, <span class="string">&quot;2020-Dec.&quot;</span>]</span><br><span class="line">    switcher = &#123;</span><br><span class="line">        <span class="number">0</span>: date_list[<span class="number">1</span>],</span><br><span class="line">        <span class="number">1</span>: date_list[<span class="number">2</span>],</span><br><span class="line">        <span class="number">2</span>: date_list[<span class="number">3</span>],</span><br><span class="line">        <span class="number">3</span>: date_list[<span class="number">4</span>],</span><br><span class="line">        <span class="number">4</span>: date_list[<span class="number">5</span>],</span><br><span class="line">        <span class="number">5</span>: date_list[<span class="number">6</span>],</span><br><span class="line">        <span class="number">6</span>: date_list[<span class="number">7</span>],</span><br><span class="line">        <span class="number">7</span>: date_list[<span class="number">8</span>],</span><br><span class="line">        <span class="number">8</span>: date_list[<span class="number">9</span>],</span><br><span class="line">        <span class="number">9</span>: date_list[<span class="number">10</span>],</span><br><span class="line">        <span class="number">10</span>: date_list[<span class="number">11</span>],</span><br><span class="line">        <span class="number">11</span>: date_list[<span class="number">12</span>],</span><br><span class="line">        <span class="number">12</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> switcher.get(value, date_list[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setX</span>(<span class="params">temp, position</span>):</span><br><span class="line">    n = <span class="built_in">int</span>(temp / <span class="number">26</span>)</span><br><span class="line">    x = switch_case(n)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setY</span>(<span class="params">temp, position</span>):</span><br><span class="line">    y = <span class="built_in">int</span>(-(temp / <span class="number">4</span> - <span class="number">50</span>))</span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        y = <span class="string">&#x27;N&#x27;</span> + <span class="built_in">str</span>(y) + <span class="string">&#x27;$^&#123;\circ&#125;$&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> y == <span class="number">0</span>:</span><br><span class="line">        y = <span class="built_in">str</span>(y) + <span class="string">&#x27;$^&#123;\circ&#125;$&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="string">&#x27;S&#x27;</span> + <span class="built_in">str</span>(-y) + <span class="string">&#x27;$^&#123;\circ&#125;$&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a title fun.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cli</span>():</span><br><span class="line">    cliPar = [<span class="string">&#x27;Average of Week Ending: 2015-2020 GMI Hovmoller Diagram&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> cliPar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a function of 6 units.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_units</span>():</span><br><span class="line">    units = [<span class="string">&#x27;Rain Rate (10$^&#123;-2&#125;$ mm/hr)&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> units</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the colorabar &quot;jet&quot; to get the color you want</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_spectral</span>():</span><br><span class="line">    <span class="comment"># Create a new array to store color values</span></span><br><span class="line">    colormap_float = np.zeros((<span class="number">256</span>, <span class="number">3</span>), np.float64)</span><br><span class="line">    <span class="comment"># Some color values are customized, and the author can set them as needed</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">1</span>):</span><br><span class="line">        colormap_float[i, <span class="number">0</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap_float[i, <span class="number">1</span>] = cm.jet(i)[<span class="number">1</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap_float[i, <span class="number">2</span>] = cm.jet(i)[<span class="number">2</span>] * <span class="number">255.0</span></span><br><span class="line">        <span class="comment"># Assign the original &quot;jet&quot; color to the colormap_ In float</span></span><br><span class="line">        <span class="comment"># Some color values are customized, and the author can set them as needed</span></span><br><span class="line">        <span class="comment"># colormap_float[250:256, :] = [0, 0, 0]</span></span><br><span class="line">    <span class="keyword">return</span> colormap_float</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a function of read *.gz files</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_gz_file</span>(<span class="params">path</span>):</span><br><span class="line">    contents = []</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">with</span> gzip.<span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            contents = fp.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;File does not exist!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> contents</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rain_rate_nomal</span>(<span class="params">rain_rate</span>):</span><br><span class="line">    valid_value = np.where(rain_rate &lt;= <span class="number">250</span>)</span><br><span class="line">    min_value = np.<span class="built_in">round</span>(np.<span class="built_in">min</span>(rain_rate[valid_value]) * scale)</span><br><span class="line">    max_value = np.<span class="built_in">round</span>(np.<span class="built_in">max</span>(rain_rate[valid_value]) * scale)</span><br><span class="line">    mean_value = np.<span class="built_in">round</span>(np.mean(rain_rate[valid_value]) * scale)</span><br><span class="line">    rain_rate[valid_value] = rain_rate[valid_value] * scale</span><br><span class="line">    <span class="keyword">return</span> min_value, mean_value, max_value, rain_rate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mean_line</span>(<span class="params">file</span>):</span><br><span class="line">    data = read_gz_file(file)</span><br><span class="line">    data = np.array(<span class="built_in">bytearray</span>(data)).reshape(<span class="number">6</span>, <span class="number">720</span>, <span class="number">1440</span>)</span><br><span class="line">    <span class="comment"># Draw 6 images of every month using for loop.</span></span><br><span class="line">    rain_rate = data[<span class="number">5</span>, :, :]</span><br><span class="line">    rain_rate_flip = np.flip(rain_rate, <span class="number">0</span>)</span><br><span class="line">    rain_rate_min, rain_rate_mean, rain_rate_max, rain_rate = rain_rate_nomal(rain_rate_flip)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data_region1 = np.array(rain_rate[159:559, 119:1319])</span></span><br><span class="line">    data_region2 = np.array(rain_rate[<span class="number">159</span>:<span class="number">559</span>, <span class="number">599</span>:<span class="number">719</span>])</span><br><span class="line">    valid_value = np.where(data_region2 &lt;= <span class="number">250</span>)</span><br><span class="line">    mean_line = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data_region2:</span><br><span class="line">        tmean = stats.tmean(i, (<span class="number">0</span>, <span class="number">250</span>))</span><br><span class="line">        mean_line.append(tmean)</span><br><span class="line">    <span class="keyword">return</span> mean_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a image drawding function.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_fig</span>(<span class="params">data, output_path</span>):</span><br><span class="line">    <span class="comment"># Call the custom function to get large color, colormap_ Float is the array we want</span></span><br><span class="line">    colormap_float = get_spectral()</span><br><span class="line">    <span class="comment"># Set color table and convert the obtained RGB value into the format of hash table, which I named &#x27;sst cmap&#x27;</span></span><br><span class="line">    rgb_table = LinearSegmentedColormap.from_list(<span class="string">&#x27;hovmoller cmap&#x27;</span>, colormap_float / <span class="number">255.0</span>)</span><br><span class="line">    <span class="comment"># Show Image and set display box properties</span></span><br><span class="line">    plt.figure(<span class="string">&quot;Show Image&quot;</span>)</span><br><span class="line">    sc = set_cli()</span><br><span class="line">    su = set_units()</span><br><span class="line">    plt.tight_layout(rect=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.9</span>))</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Time&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Latitude&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.title(sc[<span class="number">0</span>], fontsize=<span class="number">12</span>, y=<span class="number">1.02</span>)</span><br><span class="line">    plt.text(<span class="number">400</span>, <span class="number">300</span>, su[<span class="number">0</span>], size=<span class="number">12</span>, rotation=<span class="number">270</span>)</span><br><span class="line">    lon_x = np.linspace(<span class="number">0</span>, <span class="number">313</span>, <span class="number">313</span>)</span><br><span class="line">    lat_y = np.linspace(<span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">    lx, ly = np.meshgrid(lon_x, lat_y)</span><br><span class="line"></span><br><span class="line">    min_value = np.<span class="built_in">round</span>(np.<span class="built_in">min</span>(data))</span><br><span class="line">    mean_value = np.<span class="built_in">round</span>(np.mean(data))</span><br><span class="line">    max_value = np.<span class="built_in">round</span>(np.<span class="built_in">max</span>(data))</span><br><span class="line">    <span class="built_in">print</span>(min_value, mean_value, max_value)</span><br><span class="line">    <span class="comment"># data[np.where(data &lt;= 0.3)] = 255 * (data[np.where(data &lt;= 0.3)] - min_value) / (max_value - min_value)</span></span><br><span class="line">    <span class="comment"># data[np.where(data &gt; 0.3)] = 255</span></span><br><span class="line">    data_img = data * <span class="number">100</span> + <span class="number">20</span></span><br><span class="line">    <span class="comment"># Set a color bar.</span></span><br><span class="line">    min_data_img = <span class="number">0.</span></span><br><span class="line">    max_data_img = <span class="number">100.</span></span><br><span class="line">    <span class="comment"># cf = plt.contour(lx, ly, data_img, range(int(min_data_img), int(max_data_img), 1), colors=&#x27;black&#x27;, linewidth=0.5)</span></span><br><span class="line">    cd = plt.contourf(lx, ly, data_img, <span class="built_in">range</span>(<span class="built_in">int</span>(min_data_img), <span class="built_in">int</span>(max_data_img), <span class="number">1</span>), cmap=rgb_table)</span><br><span class="line">    <span class="comment"># Set x,y axis.</span></span><br><span class="line">    tick_spacing = <span class="number">26</span></span><br><span class="line">    plt.gca().xaxis.set_major_formatter(FuncFormatter(setX))</span><br><span class="line">    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))</span><br><span class="line">    plt.xticks(rotation=<span class="number">45</span>, fontsize=<span class="number">8</span>)</span><br><span class="line">    plt.gca().yaxis.set_major_formatter(FuncFormatter(setY))</span><br><span class="line">    plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    <span class="comment"># Show images and colorbar.</span></span><br><span class="line">    plt.imshow(data_img, cmap=rgb_table)</span><br><span class="line">    plt.colorbar(cd, orientation=<span class="string">&#x27;vertical&#x27;</span>, spacing=<span class="string">&#x27;proportional&#x27;</span>)</span><br><span class="line">    plt.grid(linestyle=<span class="string">&#x27;-.&#x27;</span>, color=<span class="string">&#x27;darkgray&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>)</span><br><span class="line">    <span class="comment"># Save and show.</span></span><br><span class="line">    plt.savefig(output_path + <span class="string">&#x27;150°E-180°E 50°S-50°N&#x27;</span> + <span class="string">&#x27;.jpg&#x27;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>, dpi=<span class="number">1200</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a main function to call other function</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Set the number of row and col.</span></span><br><span class="line">    row = <span class="built_in">int</span>(<span class="number">300</span> / <span class="number">0.25</span>)</span><br><span class="line">    col = <span class="built_in">int</span>(<span class="number">100</span> / <span class="number">0.25</span>)</span><br><span class="line">    <span class="comment"># Set scale.</span></span><br><span class="line">    scale = <span class="number">0.1</span></span><br><span class="line">    postfix = <span class="string">&#x27;.gz&#x27;</span></span><br><span class="line">    date_list = [<span class="string">&#x27;20150103&#x27;</span>, <span class="string">&#x27;20150110&#x27;</span>, <span class="string">&#x27;20150117&#x27;</span>, <span class="string">&#x27;20150124&#x27;</span>, <span class="string">&#x27;20150131&#x27;</span>, <span class="string">&#x27;20150207&#x27;</span>, <span class="string">&#x27;20150214&#x27;</span>, <span class="string">&#x27;20150221&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20150228&#x27;</span>, <span class="string">&#x27;20150307&#x27;</span>, <span class="string">&#x27;20150314&#x27;</span>, <span class="string">&#x27;20150321&#x27;</span>, <span class="string">&#x27;20150328&#x27;</span>, <span class="string">&#x27;20150404&#x27;</span>, <span class="string">&#x27;20150411&#x27;</span>, <span class="string">&#x27;20150418&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20150425&#x27;</span>, <span class="string">&#x27;20150502&#x27;</span>, <span class="string">&#x27;20150509&#x27;</span>, <span class="string">&#x27;20150516&#x27;</span>, <span class="string">&#x27;20150523&#x27;</span>, <span class="string">&#x27;20150530&#x27;</span>, <span class="string">&#x27;20150606&#x27;</span>, <span class="string">&#x27;20150613&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20150620&#x27;</span>, <span class="string">&#x27;20150627&#x27;</span>, <span class="string">&#x27;20150704&#x27;</span>, <span class="string">&#x27;20150711&#x27;</span>, <span class="string">&#x27;20150718&#x27;</span>, <span class="string">&#x27;20150725&#x27;</span>, <span class="string">&#x27;20150801&#x27;</span>, <span class="string">&#x27;20150808&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20150815&#x27;</span>, <span class="string">&#x27;20150822&#x27;</span>, <span class="string">&#x27;20150829&#x27;</span>, <span class="string">&#x27;20150905&#x27;</span>, <span class="string">&#x27;20150912&#x27;</span>, <span class="string">&#x27;20150919&#x27;</span>, <span class="string">&#x27;20150926&#x27;</span>, <span class="string">&#x27;20151003&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20151010&#x27;</span>, <span class="string">&#x27;20151017&#x27;</span>, <span class="string">&#x27;20151024&#x27;</span>, <span class="string">&#x27;20151031&#x27;</span>, <span class="string">&#x27;20151107&#x27;</span>, <span class="string">&#x27;20151114&#x27;</span>, <span class="string">&#x27;20151121&#x27;</span>, <span class="string">&#x27;20151128&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20151205&#x27;</span>, <span class="string">&#x27;20151212&#x27;</span>, <span class="string">&#x27;20151219&#x27;</span>, <span class="string">&#x27;20151226&#x27;</span>, <span class="string">&#x27;20160102&#x27;</span>, <span class="string">&#x27;20160109&#x27;</span>, <span class="string">&#x27;20160116&#x27;</span>, <span class="string">&#x27;20160123&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20160130&#x27;</span>, <span class="string">&#x27;20160206&#x27;</span>, <span class="string">&#x27;20160213&#x27;</span>, <span class="string">&#x27;20160220&#x27;</span>, <span class="string">&#x27;20160227&#x27;</span>, <span class="string">&#x27;20160305&#x27;</span>, <span class="string">&#x27;20160312&#x27;</span>, <span class="string">&#x27;20160319&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20160326&#x27;</span>, <span class="string">&#x27;20160402&#x27;</span>, <span class="string">&#x27;20160409&#x27;</span>, <span class="string">&#x27;20160416&#x27;</span>, <span class="string">&#x27;20160423&#x27;</span>, <span class="string">&#x27;20160430&#x27;</span>, <span class="string">&#x27;20160507&#x27;</span>, <span class="string">&#x27;20160514&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20160521&#x27;</span>, <span class="string">&#x27;20160528&#x27;</span>, <span class="string">&#x27;20160604&#x27;</span>, <span class="string">&#x27;20160611&#x27;</span>, <span class="string">&#x27;20160618&#x27;</span>, <span class="string">&#x27;20160625&#x27;</span>, <span class="string">&#x27;20160702&#x27;</span>, <span class="string">&#x27;20160709&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20160716&#x27;</span>, <span class="string">&#x27;20160723&#x27;</span>, <span class="string">&#x27;20160730&#x27;</span>, <span class="string">&#x27;20160806&#x27;</span>, <span class="string">&#x27;20160813&#x27;</span>, <span class="string">&#x27;20160820&#x27;</span>, <span class="string">&#x27;20160827&#x27;</span>, <span class="string">&#x27;20160903&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20160910&#x27;</span>, <span class="string">&#x27;20160917&#x27;</span>, <span class="string">&#x27;20160924&#x27;</span>, <span class="string">&#x27;20161001&#x27;</span>, <span class="string">&#x27;20161008&#x27;</span>, <span class="string">&#x27;20161015&#x27;</span>, <span class="string">&#x27;20161022&#x27;</span>, <span class="string">&#x27;20161029&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20161105&#x27;</span>, <span class="string">&#x27;20161112&#x27;</span>, <span class="string">&#x27;20161119&#x27;</span>, <span class="string">&#x27;20161126&#x27;</span>, <span class="string">&#x27;20161203&#x27;</span>, <span class="string">&#x27;20161210&#x27;</span>, <span class="string">&#x27;20161217&#x27;</span>, <span class="string">&#x27;20161224&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20161231&#x27;</span>, <span class="string">&#x27;20170107&#x27;</span>, <span class="string">&#x27;20170114&#x27;</span>, <span class="string">&#x27;20170121&#x27;</span>, <span class="string">&#x27;20170128&#x27;</span>, <span class="string">&#x27;20170204&#x27;</span>, <span class="string">&#x27;20170211&#x27;</span>, <span class="string">&#x27;20170218&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20170225&#x27;</span>, <span class="string">&#x27;20170304&#x27;</span>, <span class="string">&#x27;20170311&#x27;</span>, <span class="string">&#x27;20170318&#x27;</span>, <span class="string">&#x27;20170325&#x27;</span>, <span class="string">&#x27;20170401&#x27;</span>, <span class="string">&#x27;20170408&#x27;</span>, <span class="string">&#x27;20170415&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20170422&#x27;</span>, <span class="string">&#x27;20170429&#x27;</span>, <span class="string">&#x27;20170506&#x27;</span>, <span class="string">&#x27;20170513&#x27;</span>, <span class="string">&#x27;20170520&#x27;</span>, <span class="string">&#x27;20170527&#x27;</span>, <span class="string">&#x27;20170603&#x27;</span>, <span class="string">&#x27;20170610&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20170617&#x27;</span>, <span class="string">&#x27;20170624&#x27;</span>, <span class="string">&#x27;20170701&#x27;</span>, <span class="string">&#x27;20170708&#x27;</span>, <span class="string">&#x27;20170715&#x27;</span>, <span class="string">&#x27;20170722&#x27;</span>, <span class="string">&#x27;20170729&#x27;</span>, <span class="string">&#x27;20170805&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20170812&#x27;</span>, <span class="string">&#x27;20170819&#x27;</span>, <span class="string">&#x27;20170826&#x27;</span>, <span class="string">&#x27;20170902&#x27;</span>, <span class="string">&#x27;20170909&#x27;</span>, <span class="string">&#x27;20170916&#x27;</span>, <span class="string">&#x27;20170923&#x27;</span>, <span class="string">&#x27;20170930&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20171007&#x27;</span>, <span class="string">&#x27;20171014&#x27;</span>, <span class="string">&#x27;20171021&#x27;</span>, <span class="string">&#x27;20171028&#x27;</span>, <span class="string">&#x27;20171104&#x27;</span>, <span class="string">&#x27;20171111&#x27;</span>, <span class="string">&#x27;20171118&#x27;</span>, <span class="string">&#x27;20171125&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20171202&#x27;</span>, <span class="string">&#x27;20171209&#x27;</span>, <span class="string">&#x27;20171216&#x27;</span>, <span class="string">&#x27;20171223&#x27;</span>, <span class="string">&#x27;20171230&#x27;</span>, <span class="string">&#x27;20180106&#x27;</span>, <span class="string">&#x27;20180113&#x27;</span>, <span class="string">&#x27;20180120&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20180127&#x27;</span>, <span class="string">&#x27;20180203&#x27;</span>, <span class="string">&#x27;20180210&#x27;</span>, <span class="string">&#x27;20180217&#x27;</span>, <span class="string">&#x27;20180224&#x27;</span>, <span class="string">&#x27;20180303&#x27;</span>, <span class="string">&#x27;20180310&#x27;</span>, <span class="string">&#x27;20180317&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20180324&#x27;</span>, <span class="string">&#x27;20180331&#x27;</span>, <span class="string">&#x27;20180407&#x27;</span>, <span class="string">&#x27;20180414&#x27;</span>, <span class="string">&#x27;20180421&#x27;</span>, <span class="string">&#x27;20180428&#x27;</span>, <span class="string">&#x27;20180505&#x27;</span>, <span class="string">&#x27;20180512&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20180519&#x27;</span>, <span class="string">&#x27;20180526&#x27;</span>, <span class="string">&#x27;20180602&#x27;</span>, <span class="string">&#x27;20180609&#x27;</span>, <span class="string">&#x27;20180616&#x27;</span>, <span class="string">&#x27;20180623&#x27;</span>, <span class="string">&#x27;20180630&#x27;</span>, <span class="string">&#x27;20180707&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20180714&#x27;</span>, <span class="string">&#x27;20180721&#x27;</span>, <span class="string">&#x27;20180728&#x27;</span>, <span class="string">&#x27;20180804&#x27;</span>, <span class="string">&#x27;20180811&#x27;</span>, <span class="string">&#x27;20180818&#x27;</span>, <span class="string">&#x27;20180825&#x27;</span>, <span class="string">&#x27;20180901&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20180908&#x27;</span>, <span class="string">&#x27;20180915&#x27;</span>, <span class="string">&#x27;20180922&#x27;</span>, <span class="string">&#x27;20180929&#x27;</span>, <span class="string">&#x27;20181006&#x27;</span>, <span class="string">&#x27;20181013&#x27;</span>, <span class="string">&#x27;20181020&#x27;</span>, <span class="string">&#x27;20181027&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20181103&#x27;</span>, <span class="string">&#x27;20181110&#x27;</span>, <span class="string">&#x27;20181117&#x27;</span>, <span class="string">&#x27;20181124&#x27;</span>, <span class="string">&#x27;20181201&#x27;</span>, <span class="string">&#x27;20181208&#x27;</span>, <span class="string">&#x27;20181215&#x27;</span>, <span class="string">&#x27;20181222&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20181229&#x27;</span>, <span class="string">&#x27;20190105&#x27;</span>, <span class="string">&#x27;20190112&#x27;</span>, <span class="string">&#x27;20190119&#x27;</span>, <span class="string">&#x27;20190126&#x27;</span>, <span class="string">&#x27;20190202&#x27;</span>, <span class="string">&#x27;20190209&#x27;</span>, <span class="string">&#x27;20190216&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20190223&#x27;</span>, <span class="string">&#x27;20190302&#x27;</span>, <span class="string">&#x27;20190309&#x27;</span>, <span class="string">&#x27;20190316&#x27;</span>, <span class="string">&#x27;20190323&#x27;</span>, <span class="string">&#x27;20190330&#x27;</span>, <span class="string">&#x27;20190406&#x27;</span>, <span class="string">&#x27;20190413&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20190420&#x27;</span>, <span class="string">&#x27;20190427&#x27;</span>, <span class="string">&#x27;20190504&#x27;</span>, <span class="string">&#x27;20190511&#x27;</span>, <span class="string">&#x27;20190518&#x27;</span>, <span class="string">&#x27;20190525&#x27;</span>, <span class="string">&#x27;20190601&#x27;</span>, <span class="string">&#x27;20190608&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20190615&#x27;</span>, <span class="string">&#x27;20190622&#x27;</span>, <span class="string">&#x27;20190629&#x27;</span>, <span class="string">&#x27;20190706&#x27;</span>, <span class="string">&#x27;20190713&#x27;</span>, <span class="string">&#x27;20190720&#x27;</span>, <span class="string">&#x27;20190727&#x27;</span>, <span class="string">&#x27;20190803&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20190810&#x27;</span>, <span class="string">&#x27;20190817&#x27;</span>, <span class="string">&#x27;20190824&#x27;</span>, <span class="string">&#x27;20190831&#x27;</span>, <span class="string">&#x27;20190907&#x27;</span>, <span class="string">&#x27;20190914&#x27;</span>, <span class="string">&#x27;20190921&#x27;</span>, <span class="string">&#x27;20190928&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20191005&#x27;</span>, <span class="string">&#x27;20191012&#x27;</span>, <span class="string">&#x27;20191019&#x27;</span>, <span class="string">&#x27;20191026&#x27;</span>, <span class="string">&#x27;20191102&#x27;</span>, <span class="string">&#x27;20191109&#x27;</span>, <span class="string">&#x27;20191116&#x27;</span>, <span class="string">&#x27;20191123&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20191130&#x27;</span>, <span class="string">&#x27;20191207&#x27;</span>, <span class="string">&#x27;20191214&#x27;</span>, <span class="string">&#x27;20191221&#x27;</span>, <span class="string">&#x27;20191228&#x27;</span>, <span class="string">&#x27;20200104&#x27;</span>, <span class="string">&#x27;20200111&#x27;</span>, <span class="string">&#x27;20200118&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20200125&#x27;</span>, <span class="string">&#x27;20200201&#x27;</span>, <span class="string">&#x27;20200208&#x27;</span>, <span class="string">&#x27;20200215&#x27;</span>, <span class="string">&#x27;20200222&#x27;</span>, <span class="string">&#x27;20200229&#x27;</span>, <span class="string">&#x27;20200307&#x27;</span>, <span class="string">&#x27;20200314&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20200321&#x27;</span>, <span class="string">&#x27;20200328&#x27;</span>, <span class="string">&#x27;20200404&#x27;</span>, <span class="string">&#x27;20200411&#x27;</span>, <span class="string">&#x27;20200418&#x27;</span>, <span class="string">&#x27;20200425&#x27;</span>, <span class="string">&#x27;20200502&#x27;</span>, <span class="string">&#x27;20200509&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20200516&#x27;</span>, <span class="string">&#x27;20200523&#x27;</span>, <span class="string">&#x27;20200530&#x27;</span>, <span class="string">&#x27;20200606&#x27;</span>, <span class="string">&#x27;20200613&#x27;</span>, <span class="string">&#x27;20200620&#x27;</span>, <span class="string">&#x27;20200627&#x27;</span>, <span class="string">&#x27;20200704&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20200711&#x27;</span>, <span class="string">&#x27;20200718&#x27;</span>, <span class="string">&#x27;20200725&#x27;</span>, <span class="string">&#x27;20200801&#x27;</span>, <span class="string">&#x27;20200808&#x27;</span>, <span class="string">&#x27;20200815&#x27;</span>, <span class="string">&#x27;20200822&#x27;</span>, <span class="string">&#x27;20200829&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20200905&#x27;</span>, <span class="string">&#x27;20200912&#x27;</span>, <span class="string">&#x27;20200919&#x27;</span>, <span class="string">&#x27;20200926&#x27;</span>, <span class="string">&#x27;20201003&#x27;</span>, <span class="string">&#x27;20201010&#x27;</span>, <span class="string">&#x27;20201017&#x27;</span>, <span class="string">&#x27;20201024&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20201031&#x27;</span>, <span class="string">&#x27;20201107&#x27;</span>, <span class="string">&#x27;20201114&#x27;</span>, <span class="string">&#x27;20201121&#x27;</span>, <span class="string">&#x27;20201128&#x27;</span>, <span class="string">&#x27;20201205&#x27;</span>, <span class="string">&#x27;20201212&#x27;</span>, <span class="string">&#x27;20201219&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;20201226&#x27;</span>]</span><br><span class="line">    input_path = <span class="string">r&#x27;/Users/leo/Desktop/MarineTechTest7/Data/&#x27;</span></span><br><span class="line">    output_path = <span class="string">r&#x27;/Users/leo/Desktop/MarineTechTest7/Results/Img/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">        os.mkdir(output_path)</span><br><span class="line">    file_list = os.listdir(input_path)</span><br><span class="line">    mean_line_list = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> date_list:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">            <span class="keyword">if</span> i.endswith(postfix) <span class="keyword">and</span> i[<span class="number">4</span>:].startswith(k):</span><br><span class="line">                file = input_path + i</span><br><span class="line">                mean_line_single = mean_line(file)</span><br><span class="line">                mean_line_list.append(mean_line_single)</span><br><span class="line">    <span class="built_in">print</span>(mean_line_list, <span class="built_in">len</span>(mean_line_list), sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    mean_line_stack = np.vstack(mean_line_list).T</span><br><span class="line">    <span class="built_in">print</span>(mean_line_stack, mean_line_stack.shape)</span><br><span class="line">    data = mean_line_stack</span><br><span class="line">    im = Image.fromarray(data)</span><br><span class="line">    im.save(<span class="string">&#x27;/Users/leo/Desktop/test.tiff&#x27;</span>)</span><br><span class="line">    <span class="comment"># Call the draw_fig() function to draw the images.</span></span><br><span class="line">    draw_fig(mean_line_stack, output_path)</span><br></pre></td></tr></table></figure><h1 id="结果与总结："><a href="#结果与总结：" class="headerlink" title="结果与总结："></a>结果与总结：</h1><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/GMI_RainRate/30%C2%B0W-30%C2%B0E50%C2%B0S-50%C2%B0N.jpg" alt="2015-2020年30°W - 30°E ， 50°S to 50°N区域GMI 周平均降雨率数据Hovmoller分布图"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/GMI_RainRate/150%C2%B0E-180%C2%B0E50%C2%B0S-50%C2%B0N.jpg" alt="2015-2020年150°E - 180°E， 50°S to 50°N区域GMI 周平均降雨率数据Hovmoller分布图"></p><h2 id="结论与分析"><a href="#结论与分析" class="headerlink" title="结论与分析"></a>结论与分析</h2><p>在GMI的周平均降雨率数据的Hovmoller分布图中，可以看出：</p><ul><li>太平洋中部地区在纬度范围的垂向分布，表明在赤道的热带附近的平均降雨率达到最大值，南北纬23.5o-40o附近的亚热带地区平均降雨率次之，其他地区的平均降雨率较少。</li><li>从时间上分析，2015-2020年的平均降雨率呈现季节性周期变化，在6月-8月的北半球夏季，南半球冬季，平均降雨率峰值部分向北半球移动；而在12月-2月的北半球冬季，南半球夏季，平均降雨率峰值向南半球移动。</li><li>而不同经度范围的两幅图对比表明，选择的经度范围越大，平均降雨率的季节性周期变化越明显。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python卫星数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jason-3SSHA数据处理与可视化——Python代码实现</title>
      <link href="/archives/59a3b95f.html"/>
      <url>/archives/59a3b95f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jason-3数据介绍"><a href="#Jason-3数据介绍" class="headerlink" title="Jason-3数据介绍"></a>Jason-3数据介绍</h1><p>OSTM&#x2F;Jason-3是jason-2的后续任务。这个卫星的名字是以希腊神话中的一位英雄的名字命名的，该英雄出自于阿尔戈英雄，指的是希腊传说中同伊阿宋（jason）一道乘快船“阿尔戈号”去科尔基斯（Colchis）的阿瑞斯圣林取金羊毛的50位英雄，Jason是首领。OSTM&#x2F;Jason-3接管并延续Jason-2的任务。为的是促进测高任务的全面发展，能够满足运行程序对数据的时效性和可靠性的需求。</p><p>Jason-3卫星高度计于2016年1月17日成功发射，2016年2月12日进入预定轨道，与Jason-2高度计同轨进入编队飞行阶段，并落后Jason-2高度计约1分20秒，两者相距约560 km。2016年9月1日，Jason-2高度计变换轨道，编队飞行阶段结束，两高度计进入平行轨道，以增加卫星高度计对地观测的空间覆盖。</p><p>本研究主要开展了Jason-3高度计的数据质量的评估与检验，包括Jason-3高度计数据可用性和有效性的验证，以及Jason-3高度计和校正辐射计各参数的数据质量监测。重点开展了Jason-2与Jason-3高度计各项参数的综合比较，利用Jason-2与Jason-3高度计编队飞行阶段的数据精确评估了两高度计参数的一致性，并从全球数据角度分析了Jason-3高度计获取各参数的能力以及稳定性；通过与Jason-2互交叉点比较分析评估Jason-3高度计海面高度数据质量情况，验证Jason-3高度计数据精度。</p><p>结果表明，Jason-3高度计的数据质量满足高度计测高的要求，具有与Jason-1、Jason-2、T&#x2F;P等高度计相同或更高的测高精度以监测全球海平面变化，此外，Jason-3有效波高参数数据质量明显优于Jason-2高度计。</p><ul><li>表1 Jason系列数据介绍：</li></ul><table><thead><tr><th align="center">辅助数据</th><th align="center">影响参数</th><th align="center">OGDR</th><th align="center">IGDR</th><th align="center">GDR</th></tr></thead><tbody><tr><td align="center">轨道</td><td align="center">卫星高度，多普勒校正…</td><td align="center">ORIS导航器</td><td align="center">初步的（MOE用DORIS数据）</td><td align="center">精确的（POE使用DORIS&#x2F;激光&#x2F;GPS数据）</td></tr><tr><td align="center">气压计字段</td><td align="center">干&#x2F;湿对流层改正，U&#x2F;V风矢量，地面气压，逆气压改正</td><td align="center">预测的</td><td align="center">恢复的</td><td align="center"></td></tr><tr><td align="center">极点位置</td><td align="center">极潮高度</td><td align="center">预测的</td><td align="center">恢复的</td><td align="center"></td></tr><tr><td align="center">Mog2D</td><td align="center">HF ocean dealiasing correction</td><td align="center">无法使用</td><td align="center">初步的</td><td align="center">精确的</td></tr><tr><td align="center">GIM</td><td align="center">电离层校正</td><td align="center">无法使用</td><td align="center">可用</td><td align="center"></td></tr><tr><td align="center">辐射计天线温度的多项式系数</td><td align="center">湿对流层改正，Sigma0降雨衰减，…</td><td align="center">初步的</td><td align="center">精确的（辐射计定标）</td><td align="center"></td></tr></tbody></table><p>本实验采用的是OGDR中的Cycle210，2021&#x2F;10&#x2F;20-10&#x2F;30数据，其数据储存与Jason-2有所差异，经纬度存在了二级目录的variables数据集中，而SSHA数据则存在了三级目录中的variables数据集中，读取时需注意。</p><h1 id="Python代码与注释详解"><a href="#Python代码与注释详解" class="headerlink" title="Python代码与注释详解"></a>Python代码与注释详解</h1><h2 id="逐日数据画在地图（每日一张，标注经纬度、数值colorbar、日期title等），保存图片代码"><a href="#逐日数据画在地图（每日一张，标注经纬度、数值colorbar、日期title等），保存图片代码" class="headerlink" title="逐日数据画在地图（每日一张，标注经纬度、数值colorbar、日期title等），保存图片代码"></a>逐日数据画在地图（每日一张，标注经纬度、数值colorbar、日期title等），保存图片代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap <span class="keyword">as</span> lsc</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=np.inf)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_colormap</span>():</span><br><span class="line">    colormap = np.zeros((<span class="number">256</span>, <span class="number">3</span>), np.float64)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">1</span>):</span><br><span class="line">        colormap[i, <span class="number">0</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap[i, <span class="number">1</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap[i, <span class="number">2</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        <span class="comment"># colormap[0, :] = [255., 255., 255.]</span></span><br><span class="line">    <span class="keyword">return</span> colormap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">max</span>(data_matrix[i]))</span><br><span class="line">    <span class="comment"># print(&quot;数组最大值为：&quot;, max(new_data))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(new_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">min</span>(data_matrix[i]))</span><br><span class="line">    <span class="comment"># print(&#x27;数组最小值为：&#x27;, min(new_data))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(new_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variables_extact</span>(<span class="params">file</span>):</span><br><span class="line">    lon_list = []</span><br><span class="line">    lat_list = []</span><br><span class="line">    ssha_list = []</span><br><span class="line">    ssha_w_list = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> file:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第一重数据集--*.nc Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        dataset_nc = nc.Dataset(f)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第二重数据集--groups Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        data_01 = dataset_nc.groups[<span class="string">&#x27;data_01&#x27;</span>]</span><br><span class="line">        lon = (data_01.variables[<span class="string">&#x27;longitude&#x27;</span>][:])</span><br><span class="line">        lat = (data_01.variables[<span class="string">&#x27;latitude&#x27;</span>][:])</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第三重数据集--ku Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        ku = data_01.groups[<span class="string">&#x27;ku&#x27;</span>]</span><br><span class="line">        ssha = (ku.variables[<span class="string">&#x27;ssha&#x27;</span>][:])</span><br><span class="line">        data_lon = np.array(lon)</span><br><span class="line">        data_lat = np.array(lat)</span><br><span class="line">        data_ssha_all = np.array(ssha)</span><br><span class="line">        data_ssha = np.where(data_ssha_all != <span class="number">32767</span>, data_ssha_all * <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">        min_lon = find_min([data_lon])</span><br><span class="line">        max_lon = find_max([data_lon])</span><br><span class="line">        min_lat = find_min([data_lat])</span><br><span class="line">        max_lat = find_max([data_lat])</span><br><span class="line">        min_ssha = find_min([data_ssha])</span><br><span class="line">        max_ssha = find_max([data_ssha])</span><br><span class="line">        <span class="comment"># print(min_lon, max_lon, min_lat, max_lat, min_ssha, max_ssha)</span></span><br><span class="line">        <span class="comment"># data_ssha[np.where(data_ssha != 0)] = 100 * (data_ssha[np.where(data_ssha != 0)] - min_ssha) / (</span></span><br><span class="line">        <span class="comment">#         max_ssha - min_ssha)</span></span><br><span class="line">        data_ssha_w = data_ssha * <span class="number">100</span></span><br><span class="line">        <span class="comment"># print(len(data_lon), len(data_lat), len(time), len(data_ssha))</span></span><br><span class="line">        <span class="comment"># print(data_lon, data_lat, data_time, data_ssha)</span></span><br><span class="line">        lon_list.append(data_lon)</span><br><span class="line">        lat_list.append(data_lat)</span><br><span class="line">        ssha_list.append(data_ssha)</span><br><span class="line">        ssha_w_list.append(data_ssha_w)</span><br><span class="line">    <span class="built_in">print</span>(lon_list)</span><br><span class="line">    <span class="built_in">print</span>(lat_list)</span><br><span class="line">    <span class="built_in">print</span>(ssha_list)</span><br><span class="line">    <span class="built_in">print</span>(ssha_w_list)</span><br><span class="line">    <span class="keyword">return</span> lon_list, lat_list, ssha_list, ssha_w_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_data</span>(<span class="params">file</span>):</span><br><span class="line">    lon_list, lat_list, ssha_list, ssha_w_list = variables_extact(file)</span><br><span class="line">    <span class="built_in">map</span> = Basemap(projection=<span class="string">&#x27;cyl&#x27;</span>, llcrnrlat=-<span class="number">90.</span>, urcrnrlat=<span class="number">90.</span>, llcrnrlon=<span class="number">0.</span>, urcrnrlon=<span class="number">361.</span>, resolution=<span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">                  lat_0=<span class="number">0</span>, lon_0=<span class="number">180</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmapboundary(fill_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.fillcontinents(color=<span class="string">&#x27;gray&#x27;</span>, lake_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawstates()</span><br><span class="line">    <span class="built_in">map</span>.drawcoastlines()</span><br><span class="line">    <span class="comment"># lons, lats = map.makegrid(1, 6598)</span></span><br><span class="line">    <span class="comment"># lats = lats[::-1]</span></span><br><span class="line">    <span class="comment"># x, y = map(lons, lats)</span></span><br><span class="line">    <span class="built_in">map</span>.drawparallels(np.arange(-<span class="number">90.</span>, <span class="number">91.</span>, <span class="number">30.</span>), labels=[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmeridians(np.arange(-<span class="number">180.</span>, <span class="number">181.</span>, <span class="number">60.</span>), labels=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x, y = np.meshgrid(data_lon, data_lat)</span></span><br><span class="line">    <span class="comment"># curve = map.contour(x, y, data_ssha)</span></span><br><span class="line">    cmap_color = plt.cm.get_cmap(<span class="string">&quot;Accent_r&quot;</span>)</span><br><span class="line">    <span class="comment"># shade = map.contourf(x, y, data_ssha, cmap=cmap_color)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># colormap = set_colormap()</span></span><br><span class="line">    <span class="comment"># color_table = lsc.from_list(&#x27;ssha map&#x27;, colormap / 255.0)</span></span><br><span class="line">    <span class="comment"># print(len(lat_list))</span></span><br><span class="line">    <span class="comment"># print(lon_list, lat_list, ssha_list, ssha_w_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ssha_list)):</span><br><span class="line">        line_ssha = <span class="built_in">map</span>.scatter(lon_list[i], lat_list[i], c=ssha_w_list[i], s=<span class="number">1</span>, vmin=-<span class="number">500</span>, vmax=<span class="number">500</span>)</span><br><span class="line">    cbar = <span class="built_in">map</span>.colorbar(line_ssha)</span><br><span class="line">    cbar.ax.tick_params(labelsize=<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># for j in prefix_list:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    postfix = <span class="string">&#x27;.nc&#x27;</span></span><br><span class="line">    prefix_list = [<span class="string">&#x27;20211020&#x27;</span>, <span class="string">&#x27;20211021&#x27;</span>, <span class="string">&#x27;20211022&#x27;</span>, <span class="string">&#x27;20211023&#x27;</span>, <span class="string">&#x27;20211024&#x27;</span>, <span class="string">&#x27;20211025&#x27;</span>, <span class="string">&#x27;20211026&#x27;</span>, <span class="string">&#x27;20211027&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;20211028&#x27;</span>, <span class="string">&#x27;20211029&#x27;</span>, <span class="string">&#x27;20211030&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(prefix_list)</span><br><span class="line">    input_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Data_Jason3/&#x27;</span></span><br><span class="line">    output_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Results/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">        os.mkdir(output_path)</span><br><span class="line">    file_list = os.listdir(input_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> prefix_list:</span><br><span class="line">        day_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">            <span class="keyword">if</span> i.endswith(postfix) <span class="keyword">and</span> i[<span class="number">20</span>:].startswith(k):</span><br><span class="line">                file = input_path + i</span><br><span class="line">                <span class="comment"># print(file)</span></span><br><span class="line">                day_list.append(file)</span><br><span class="line">        <span class="built_in">print</span>(day_list)</span><br><span class="line"></span><br><span class="line">        lon, lat, ssha, ssha_w = variables_extact(day_list)</span><br><span class="line">        <span class="comment"># ssha_w_list.append(ssha_w)</span></span><br><span class="line">        <span class="comment"># print(ssha_w_list)</span></span><br><span class="line">        show_data(day_list)</span><br><span class="line">        plt.title(k + <span class="string">&#x27; Spatial Distribution Map of Jason-3 SSHA(cm)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">        plt.savefig(output_path + k + <span class="string">&#x27;.png&#x27;</span>, dpi=<span class="number">600</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><h2 id="Cycle210，2021-x2F-10-x2F-20-10-x2F-30数据画在一张地图上（一共一张，标注经纬度、数值colorbar、日期title等）-），保存图片代码"><a href="#Cycle210，2021-x2F-10-x2F-20-10-x2F-30数据画在一张地图上（一共一张，标注经纬度、数值colorbar、日期title等）-），保存图片代码" class="headerlink" title="Cycle210，2021&#x2F;10&#x2F;20-10&#x2F;30数据画在一张地图上（一共一张，标注经纬度、数值colorbar、日期title等） ），保存图片代码"></a>Cycle210，2021&#x2F;10&#x2F;20-10&#x2F;30数据画在一张地图上（一共一张，标注经纬度、数值colorbar、日期title等） ），保存图片代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap <span class="keyword">as</span> lsc</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=np.inf)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_colormap</span>():</span><br><span class="line">    colormap = np.zeros((<span class="number">256</span>, <span class="number">3</span>), np.float64)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">1</span>):</span><br><span class="line">        colormap[i, <span class="number">0</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap[i, <span class="number">1</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        colormap[i, <span class="number">2</span>] = cm.jet(i)[<span class="number">0</span>] * <span class="number">255.0</span></span><br><span class="line">        <span class="comment"># colormap[0, :] = [255., 255., 255.]</span></span><br><span class="line">    <span class="keyword">return</span> colormap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">max</span>(data_matrix[i]))</span><br><span class="line">    <span class="comment"># print(&quot;数组最大值为：&quot;, max(new_data))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(new_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">min</span>(data_matrix[i]))</span><br><span class="line">    <span class="comment"># print(&#x27;数组最小值为：&#x27;, min(new_data))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(new_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variables_extact</span>(<span class="params">file</span>):</span><br><span class="line">    lon_list = []</span><br><span class="line">    lat_list = []</span><br><span class="line">    ssha_list = []</span><br><span class="line">    ssha_w_list = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> file:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第一重数据集--*.nc Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        dataset_nc = nc.Dataset(f)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第二重数据集--groups Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        data_01 = dataset_nc.groups[<span class="string">&#x27;data_01&#x27;</span>]</span><br><span class="line">        lon = (data_01.variables[<span class="string">&#x27;longitude&#x27;</span>][:])</span><br><span class="line">        lat = (data_01.variables[<span class="string">&#x27;latitude&#x27;</span>][:])</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第三重数据集--ku Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        ku = data_01.groups[<span class="string">&#x27;ku&#x27;</span>]</span><br><span class="line">        ssha = (ku.variables[<span class="string">&#x27;ssha&#x27;</span>][:])</span><br><span class="line">        data_lon = np.array(lon)</span><br><span class="line">        data_lat = np.array(lat)</span><br><span class="line">        data_ssha_all = np.array(ssha)</span><br><span class="line">        data_ssha = np.where(data_ssha_all != <span class="number">32767</span>, data_ssha_all * <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">        min_lon = find_min([data_lon])</span><br><span class="line">        max_lon = find_max([data_lon])</span><br><span class="line">        min_lat = find_min([data_lat])</span><br><span class="line">        max_lat = find_max([data_lat])</span><br><span class="line">        min_ssha = find_min([data_ssha])</span><br><span class="line">        max_ssha = find_max([data_ssha])</span><br><span class="line">        <span class="comment"># print(min_lon, max_lon, min_lat, max_lat, min_ssha, max_ssha)</span></span><br><span class="line">        <span class="comment"># data_ssha[np.where(data_ssha != 0)] = 100 * (data_ssha[np.where(data_ssha != 0)] - min_ssha) / (</span></span><br><span class="line">        <span class="comment">#         max_ssha - min_ssha)</span></span><br><span class="line">        data_ssha_w = data_ssha * <span class="number">100</span></span><br><span class="line">        <span class="comment"># print(len(data_lon), len(data_lat), len(time), len(data_ssha))</span></span><br><span class="line">        <span class="comment"># print(data_lon, data_lat, data_time, data_ssha)</span></span><br><span class="line">        lon_list.append(data_lon)</span><br><span class="line">        lat_list.append(data_lat)</span><br><span class="line">        ssha_list.append(data_ssha)</span><br><span class="line">        ssha_w_list.append(data_ssha_w)</span><br><span class="line">    <span class="comment"># print(lon_list)</span></span><br><span class="line">    <span class="comment"># print(lat_list)</span></span><br><span class="line">    <span class="comment"># print(ssha_list)</span></span><br><span class="line">    <span class="comment"># print(ssha_w_list)</span></span><br><span class="line">    <span class="keyword">return</span> lon_list, lat_list, ssha_list, ssha_w_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_data</span>(<span class="params">file</span>):</span><br><span class="line">    lon_list, lat_list, ssha_list, ssha_w_list = variables_extact(file)</span><br><span class="line">    <span class="built_in">map</span> = Basemap(projection=<span class="string">&#x27;cyl&#x27;</span>, llcrnrlat=-<span class="number">90.</span>, urcrnrlat=<span class="number">90.</span>, llcrnrlon=<span class="number">0.</span>, urcrnrlon=<span class="number">361.</span>, resolution=<span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">                  lat_0=<span class="number">0</span>, lon_0=<span class="number">180</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmapboundary(fill_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.fillcontinents(color=<span class="string">&#x27;gray&#x27;</span>, lake_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawstates()</span><br><span class="line">    <span class="built_in">map</span>.drawcoastlines()</span><br><span class="line">    <span class="comment"># lons, lats = map.makegrid(1, 6598)</span></span><br><span class="line">    <span class="comment"># lats = lats[::-1]</span></span><br><span class="line">    <span class="comment"># x, y = map(lons, lats)</span></span><br><span class="line">    <span class="built_in">map</span>.drawparallels(np.arange(-<span class="number">90.</span>, <span class="number">91.</span>, <span class="number">30.</span>), labels=[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmeridians(np.arange(-<span class="number">180.</span>, <span class="number">181.</span>, <span class="number">60.</span>), labels=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># ax = plt.axes(projection=&#x27;3d&#x27;)</span></span><br><span class="line">    <span class="comment"># x, y = np.meshgrid(data_lon, data_lat)</span></span><br><span class="line">    <span class="comment"># curve = map.contour(x, y, data_ssha)</span></span><br><span class="line">    cmap_color = plt.cm.get_cmap(<span class="string">&quot;Accent_r&quot;</span>)</span><br><span class="line">    <span class="comment"># shade = map.contourf(x, y, data_ssha, cmap=cmap_color)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># colormap = set_colormap()</span></span><br><span class="line">    <span class="comment"># color_table = lsc.from_list(&#x27;ssha map&#x27;, colormap / 255.0)</span></span><br><span class="line">    <span class="comment"># print(len(lat_list))</span></span><br><span class="line">    <span class="comment"># print(lon_list, lat_list, ssha_list, ssha_w_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ssha_list)):</span><br><span class="line">        <span class="comment"># Z = np.expand_dims(ssha_w_list[i], axis=1)</span></span><br><span class="line">        line_ssha = <span class="built_in">map</span>.scatter(lon_list[i], lat_list[i], c=ssha_w_list[i], s=<span class="number">1</span>, vmin=-<span class="number">500</span>, vmax=<span class="number">500</span>)</span><br><span class="line">        <span class="comment"># surface_ssha = ax.plot_surface(lon_list, lat_list, Z, cmap=&#x27;rainbow&#x27;)</span></span><br><span class="line">    cbar = <span class="built_in">map</span>.colorbar(line_ssha)</span><br><span class="line">    cbar.ax.tick_params(labelsize=<span class="number">12</span>)</span><br><span class="line">    <span class="comment"># for j in prefix_list:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    postfix = <span class="string">&#x27;.nc&#x27;</span></span><br><span class="line">    <span class="comment"># prefix_list = [&#x27;20211020&#x27;, &#x27;20211021&#x27;, &#x27;20211022&#x27;, &#x27;20211023&#x27;, &#x27;20211024&#x27;, &#x27;20211025&#x27;, &#x27;20211026&#x27;, &#x27;20211027&#x27;,</span></span><br><span class="line">    <span class="comment">#                &#x27;20211028&#x27;, &#x27;20211029&#x27;, &#x27;20211030&#x27;]</span></span><br><span class="line">    <span class="comment"># print(prefix_list)</span></span><br><span class="line">    input_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Data_Jason3/&#x27;</span></span><br><span class="line">    output_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Results/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">        os.mkdir(output_path)</span><br><span class="line">    file_list = os.listdir(input_path)</span><br><span class="line">    day_list = []</span><br><span class="line">    <span class="comment"># for k in prefix_list:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">if</span> i.endswith(postfix):</span><br><span class="line">            file = input_path + i</span><br><span class="line">            <span class="comment"># print(file)</span></span><br><span class="line">            day_list.append(file)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(day_list)</span><br><span class="line"></span><br><span class="line">    lon, lat, ssha, ssha_w = variables_extact(day_list)</span><br><span class="line">    <span class="comment"># ssha_w_list.append(ssha_w)</span></span><br><span class="line">    <span class="comment"># print(ssha_w_list)</span></span><br><span class="line">    show_data(day_list)</span><br><span class="line">    plt.title(<span class="string">&#x27;20211020-30 Spatial Distribution Map of Jason-3 SSHA(cm)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.savefig(output_path + <span class="string">&#x27;20211020-30.png&#x27;</span>, dpi=<span class="number">600</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="2021-x2F-10-x2F-20-10-x2F-30数据画等值线图，保存图片代码"><a href="#2021-x2F-10-x2F-20-10-x2F-30数据画等值线图，保存图片代码" class="headerlink" title="2021&#x2F;10&#x2F;20-10&#x2F;30数据画等值线图，保存图片代码"></a>2021&#x2F;10&#x2F;20-10&#x2F;30数据画等值线图，保存图片代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> os, math</span><br><span class="line"><span class="keyword">import</span> show_ssha_map <span class="keyword">as</span> ssm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from mpl_toolkits.basemap import Basemap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map = Basemap()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.set_printoptions(threshold=np.inf)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">max</span>(data_matrix[i]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_matrix最大值为&quot;</span>, <span class="built_in">max</span>(new_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min</span>(<span class="params">data_matrix</span>):</span><br><span class="line">    new_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_matrix)):</span><br><span class="line">        new_data.append(<span class="built_in">min</span>(data_matrix[i]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">min</span>(new_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variables_extact</span>(<span class="params">file</span>):</span><br><span class="line">    lon_list = []</span><br><span class="line">    lat_list = []</span><br><span class="line">    ssha_list = []</span><br><span class="line">    ssha_w_list = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> file:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第一重数据集--*.nc Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        dataset_nc = nc.Dataset(f)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第二重数据集--groups Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        data_01 = dataset_nc.groups[<span class="string">&#x27;data_01&#x27;</span>]</span><br><span class="line">        lon = (data_01.variables[<span class="string">&#x27;longitude&#x27;</span>][:])</span><br><span class="line">        lat = (data_01.variables[<span class="string">&#x27;latitude&#x27;</span>][:])</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;第三重数据集--ku Dataset&#x27;&#x27;&#x27;</span></span><br><span class="line">        ku = data_01.groups[<span class="string">&#x27;ku&#x27;</span>]</span><br><span class="line">        ssha = (ku.variables[<span class="string">&#x27;ssha&#x27;</span>][:])</span><br><span class="line">        data_lon = np.array(lon)</span><br><span class="line">        data_lat = np.array(lat)</span><br><span class="line">        data_ssha_all = np.array(ssha)</span><br><span class="line">        data_ssha = np.where(data_ssha_all != <span class="number">32767</span>, data_ssha_all * <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># min_lon = find_min([data_lon])</span></span><br><span class="line">        <span class="comment"># max_lon = find_max([data_lon])</span></span><br><span class="line">        <span class="comment"># min_lat = find_min([data_lat])</span></span><br><span class="line">        <span class="comment"># max_lat = find_max([data_lat])</span></span><br><span class="line">        <span class="comment"># min_ssha = find_min([data_ssha])</span></span><br><span class="line">        <span class="comment"># max_ssha = find_max([data_ssha])</span></span><br><span class="line">        <span class="comment"># print(min_lon, max_lon, min_lat, max_lat, min_ssha, max_ssha)</span></span><br><span class="line">        <span class="comment"># data_ssha[np.where(data_ssha != 0)] = 100 * (data_ssha[np.where(data_ssha != 0)] - min_ssha) / (</span></span><br><span class="line">        <span class="comment">#         max_ssha - min_ssha)</span></span><br><span class="line">        data_ssha_w = data_ssha * <span class="number">100</span></span><br><span class="line">        <span class="comment"># print(len(data_lon), len(data_lat), len(time), len(data_ssha))</span></span><br><span class="line">        <span class="comment"># print(data_lon, data_lat, data_time, data_ssha)</span></span><br><span class="line">        lon_list.extend(data_lon)</span><br><span class="line">        lat_list.extend(data_lat)</span><br><span class="line">        ssha_list.extend(data_ssha)</span><br><span class="line">        ssha_w_list.extend(data_ssha_w)</span><br><span class="line">    <span class="comment"># lon_all = lon_list.reshape((1, len(data_lon) * len(lon_list)), order=&#x27;A&#x27;)</span></span><br><span class="line">    <span class="comment"># print(lon_all)</span></span><br><span class="line">    lon_all = np.array(lon_list)</span><br><span class="line">    lat_all = np.array(lat_list)</span><br><span class="line">    ssha_all = np.array(ssha_list)</span><br><span class="line">    ssha_w_all = np.array(ssha_w_list)</span><br><span class="line">    <span class="built_in">print</span>(lon_all, lon_all.shape)</span><br><span class="line">    <span class="built_in">print</span>(lat_all, lat_all.shape)</span><br><span class="line">    <span class="built_in">print</span>(ssha_all, ssha_all.shape)</span><br><span class="line">    <span class="comment"># print(lon_list)</span></span><br><span class="line">    <span class="comment"># print(lat_list)</span></span><br><span class="line">    <span class="comment"># print(ssha_list)</span></span><br><span class="line">    <span class="comment"># print(ssha_w_list)</span></span><br><span class="line">    <span class="keyword">return</span> lon_all, lat_all, ssha_all, ssha_w_all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_ssha_3d</span>(<span class="params">lon, lat, ssha, ssha_w</span>):</span><br><span class="line">    lon_lat_ssha = np.vstack((lon, lat, ssha_w)).T</span><br><span class="line">    <span class="built_in">print</span>(lon.shape, lat.shape, ssha_w.shape)</span><br><span class="line">    <span class="comment"># lon_arr = np.array(lon)</span></span><br><span class="line">    <span class="comment"># lon_lat_ssha.extend(lon)</span></span><br><span class="line">    <span class="built_in">print</span>(lon_lat_ssha[:, <span class="number">2</span>], lon_lat_ssha.shape)</span><br><span class="line">    ssha_mean_list = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">180</span>):</span><br><span class="line">            <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">            k_list = []</span><br><span class="line">            <span class="keyword">for</span> i, j, k <span class="keyword">in</span> lon_lat_ssha:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>((<span class="built_in">abs</span>(i) &gt; a, <span class="built_in">abs</span>(i) &lt;= a + <span class="number">1</span>, <span class="built_in">abs</span>(j) &gt; b, <span class="built_in">abs</span>(j) &lt;= b + <span class="number">1</span>)):</span><br><span class="line">                    <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">                    k_list.extend([k])</span><br><span class="line">                    mean_ssha = math.fsum(k_list) / <span class="built_in">sum</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">sum</span>, k_list, mean_ssha)</span><br><span class="line">            ssha_mean_list.extend([mean_ssha])</span><br><span class="line">    <span class="built_in">print</span>(ssha_mean_list)</span><br><span class="line">    <span class="comment"># lon_reshape = np.array(lon.reshape(len(lon), 1))</span></span><br><span class="line">    <span class="comment"># lat_reshape = np.array(lat.reshape(len(lat), 1))</span></span><br><span class="line">    <span class="comment"># ssha_reshape = np.array(ssha.reshape(len(ssha), 1))</span></span><br><span class="line">    <span class="comment"># print(lon_reshape, lat_reshape, ssha_reshape)</span></span><br><span class="line">    <span class="comment"># lon_lat = lon_reshape.extend(lat_reshape)</span></span><br><span class="line">    <span class="comment"># print(lon_lat)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span> = Basemap(projection=<span class="string">&#x27;cyl&#x27;</span>, llcrnrlat=-<span class="number">90.</span>, urcrnrlat=<span class="number">90.</span>, llcrnrlon=<span class="number">0.</span>, urcrnrlon=<span class="number">361.</span>, resolution=<span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">                  lat_0=<span class="number">0</span>, lon_0=<span class="number">180</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmapboundary()</span><br><span class="line">    <span class="built_in">map</span>.fillcontinents(color=<span class="string">&#x27;gray&#x27;</span>, lake_color=<span class="string">&#x27;aqua&#x27;</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawstates()</span><br><span class="line">    <span class="built_in">map</span>.drawcoastlines()</span><br><span class="line">    lons, lats = <span class="built_in">map</span>.makegrid(<span class="number">1</span>, <span class="number">6598</span>)</span><br><span class="line">    lats = lats[::-<span class="number">1</span>]</span><br><span class="line">    x, y = <span class="built_in">map</span>(lon, lat)</span><br><span class="line">    <span class="built_in">map</span>.drawparallels(np.arange(-<span class="number">90.</span>, <span class="number">91.</span>, <span class="number">30.</span>), labels=[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">map</span>.drawmeridians(np.arange(-<span class="number">180.</span>, <span class="number">181.</span>, <span class="number">60.</span>), labels=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], fontsize=<span class="number">12</span>)</span><br><span class="line">    contour_map = <span class="built_in">map</span>.contour(x, y, ssha_mean_list, <span class="number">15</span>, linewidths=<span class="number">1.5</span>)</span><br><span class="line">    <span class="comment"># line_ssha = map.scatter(lon_lat_ssha[:, 0], lon_lat_ssha[:, 1], c=lon_lat_ssha[:, 2], s=1, vmin=-500, vmax=500)</span></span><br><span class="line">    plt.savefig(output_path + <span class="string">&#x27;interpolote.png&#x27;</span>)</span><br><span class="line">    plt.show(contour_map)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    fig = plt.figure()</span></span><br><span class="line"><span class="string">    # ax = Axes3D(fig)</span></span><br><span class="line"><span class="string">    ax2 = plt.axes(projection=&#x27;3d&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    X = lon</span></span><br><span class="line"><span class="string">    Y = lat</span></span><br><span class="line"><span class="string">    X, Y = np.meshgrid(X, Y)</span></span><br><span class="line"><span class="string">    print(len(X), len(Y), len(ssha))</span></span><br><span class="line"><span class="string">    Z = np.expand_dims(ssha, axis=1)</span></span><br><span class="line"><span class="string">    ax2.plot_surface(X, Y, Z, alpha=0.3, cmap=&#x27;rainbow&#x27;)</span></span><br><span class="line"><span class="string">    # ax2.contour(X, Y, Z, zdir=&#x27;z&#x27;, offset=-3, cmap=&quot;rainbow&quot;)</span></span><br><span class="line"><span class="string">    # ax2.contourf(X, Y, Z, zdir=&#x27;z&#x27;, offset=-3, cmap=&quot;rainbow&quot;)</span></span><br><span class="line"><span class="string">    plt.savefig(output_path + &#x27;_3d.png&#x27;)</span></span><br><span class="line"><span class="string">    plt.show()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    postfix = <span class="string">&#x27;.nc&#x27;</span></span><br><span class="line">    <span class="comment"># prefix = &#x27;20211030&#x27;</span></span><br><span class="line">    <span class="comment"># prefix_list = [&#x27;20211020&#x27;, &#x27;20211021&#x27;, &#x27;20211022&#x27;, &#x27;20211023&#x27;, &#x27;20211024&#x27;, &#x27;20211025&#x27;, &#x27;20211026&#x27;, &#x27;20211027&#x27;,</span></span><br><span class="line">    <span class="comment">#                &#x27;20211028&#x27;, &#x27;20211029&#x27;, &#x27;20211030&#x27;]</span></span><br><span class="line">    <span class="comment"># print(prefix_list)</span></span><br><span class="line">    input_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Data_Jason3/&#x27;</span></span><br><span class="line">    output_path = <span class="string">&#x27;/Users/leo/Desktop/MarineTechTest5/Results/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_path):</span><br><span class="line">        os.mkdir(output_path)</span><br><span class="line">    file_list = os.listdir(input_path)</span><br><span class="line">    day_list = []</span><br><span class="line">    <span class="comment"># for k in prefix_list:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">if</span> i.endswith(postfix):</span><br><span class="line">            file_nc = input_path + i</span><br><span class="line">            <span class="comment"># print(file_nc)</span></span><br><span class="line">            day_list.append(file_nc)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">print</span>(day_list)</span><br><span class="line">    <span class="comment">#     continue</span></span><br><span class="line">    lon, lat, ssha, ssha_w = variables_extact(day_list)</span><br><span class="line">    <span class="comment"># print(lon, lat, ssha)</span></span><br><span class="line">    show_ssha_3d(lon, lat, ssha, ssha_w)</span><br></pre></td></tr></table></figure><h1 id="结果与总结："><a href="#结果与总结：" class="headerlink" title="结果与总结："></a>结果与总结：</h1><h2 id="Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30逐日数据全球分布图"><a href="#Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30逐日数据全球分布图" class="headerlink" title="Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30逐日数据全球分布图"></a>Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30逐日数据全球分布图</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211020.png" alt="2021/10/20"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211021.png" alt="2021/10/21"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211022.png" alt="2021/10/22"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211023.png" alt="2021/10/23"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211024.png" alt="2021/10/24"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211025.png" alt="2021/10/25"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211026.png" alt="2021/10/26"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211027.png" alt="2021/10/27"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211028.png" alt="2021/10/28"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211029.png" alt="2021/10/29"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211030.png" alt="2021/10/30"></p><h2 id="Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30所有数据全球分布图"><a href="#Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30所有数据全球分布图" class="headerlink" title="Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30所有数据全球分布图"></a>Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30所有数据全球分布图</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211020_30.png" alt="2021/10/20-30"></p><h2 id="Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30所有数据全球分布图-等值线插值结果"><a href="#Jason-3-SSHA-2021-x2F-10-x2F-20—2021-x2F-10-x2F-30所有数据全球分布图-等值线插值结果" class="headerlink" title="Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30所有数据全球分布图(等值线插值结果)"></a>Jason-3 SSHA 2021&#x2F;10&#x2F;20—2021&#x2F;10&#x2F;30所有数据全球分布图(等值线插值结果)</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Jason-3SSHA/20211020_30lines.png" alt="2021/10/20-30等值线插值"><br>在读取Jason数据中，由于它是以点与经纬度储存的数据，所以可视化的时候应注意到，其处理方式需要将其转化为数组，在做相应的计算与拉伸，才能达到理想的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python卫星数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MODIS L1B数据辐射定标几何校正云掩膜波段合成Python批处理代码实现</title>
      <link href="/archives/58b02e48.html"/>
      <url>/archives/58b02e48.html</url>
      
        <content type="html"><![CDATA[<ul><li>本程序主要是对MODIS L1B数据进行辐射定标，几何校正、云掩膜以及波段合成等处理过程；</li><li>本程序利用Python面向对象编程实现；</li><li>输入路径中需要将MOD02&#x2F;MYD02一级产品数据和MOD35&#x2F;MYD35云掩膜产品数据对应时间位置放入同一路经中。</li><li>完整代码已上传至GitHub上：<br><a href="https://github.com/guojx0820/MODIS_Radiometric_Geometric_Correction_CloudMask">MODIS_Radiometric_Geometric_Correction_CloudMask</a><h1 id="MODIS-L1B数据波段介绍"><a href="#MODIS-L1B数据波段介绍" class="headerlink" title="MODIS L1B数据波段介绍"></a>MODIS L1B数据波段介绍</h1></li></ul><p>以下为MODIS数据36个波段介绍：</p><ul><li>MODIS波段介绍</li></ul><table><thead><tr><th align="center">波段号</th><th align="center">主要应用</th><th align="center">分辨率(m)</th><th align="center">波段范围(μm)</th><th align="center">中心波长</th><th align="center">信噪比</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">植被叶绿素吸收</td><td align="center">250</td><td align="center">0.620-0.670</td><td align="center">0.645</td><td align="center">128</td></tr><tr><td align="center">2</td><td align="center">云和植被覆盖变换</td><td align="center">250</td><td align="center">0.841-0.876</td><td align="center">0.865</td><td align="center">201</td></tr><tr><td align="center">3</td><td align="center">土壤植被差异</td><td align="center">500</td><td align="center">0.459-0.479</td><td align="center">0.466</td><td align="center">243</td></tr><tr><td align="center">4</td><td align="center">绿色植被</td><td align="center">500</td><td align="center">0.545-0.565</td><td align="center">0.554</td><td align="center">228</td></tr><tr><td align="center">5</td><td align="center">叶面&#x2F;树冠差异</td><td align="center">500</td><td align="center">1.230-0-1.250</td><td align="center">1.242</td><td align="center">74</td></tr><tr><td align="center">6</td><td align="center">雪&#x2F;云差异</td><td align="center">500</td><td align="center">1.628-1.652</td><td align="center">1.629</td><td align="center">275</td></tr><tr><td align="center">7</td><td align="center">陆地和云的性质</td><td align="center">500</td><td align="center">2.105-2.155</td><td align="center">2.114</td><td align="center">110</td></tr><tr><td align="center">8</td><td align="center">叶绿素</td><td align="center">1000</td><td align="center">0.405-0.420</td><td align="center">0.412</td><td align="center">880</td></tr><tr><td align="center">9</td><td align="center">叶绿素</td><td align="center">1000</td><td align="center">0.438-0.448</td><td align="center">0.442</td><td align="center">838</td></tr><tr><td align="center">10</td><td align="center">叶绿素</td><td align="center">1000</td><td align="center">0.483-0.493</td><td align="center">0.487</td><td align="center">802</td></tr><tr><td align="center">11</td><td align="center">叶绿素</td><td align="center">1000</td><td align="center">0.526-0.536</td><td align="center">0.530</td><td align="center">754</td></tr><tr><td align="center">12</td><td align="center">沉淀物</td><td align="center">1000</td><td align="center">0.546-0.556</td><td align="center">0.547</td><td align="center">750</td></tr><tr><td align="center">13</td><td align="center">沉淀物，大气层</td><td align="center">1000</td><td align="center">0.662-0.672</td><td align="center">0.666</td><td align="center">910</td></tr><tr><td align="center">14</td><td align="center">叶绿素荧光</td><td align="center">1000</td><td align="center">0.673-0.683</td><td align="center">0.677</td><td align="center">1087</td></tr><tr><td align="center">15</td><td align="center">气溶胶性质</td><td align="center">1000</td><td align="center">0.743-0.753</td><td align="center">0.747</td><td align="center">586</td></tr><tr><td align="center">16</td><td align="center">气溶胶&#x2F;大气层性质</td><td align="center">1000</td><td align="center">0.862-0.877</td><td align="center">0.866</td><td align="center">516</td></tr><tr><td align="center">17</td><td align="center">云&#x2F;大气层性质</td><td align="center">1000</td><td align="center">0.890-0.920</td><td align="center">0.904</td><td align="center">167</td></tr><tr><td align="center">18</td><td align="center">云&#x2F;大气层性质</td><td align="center">1000</td><td align="center">0.931-0.941</td><td align="center">0.936</td><td align="center">57</td></tr><tr><td align="center">19</td><td align="center">云&#x2F;大气层性质</td><td align="center">1000</td><td align="center">0.915-0.965</td><td align="center">0.935</td><td align="center">250</td></tr><tr><td align="center">20</td><td align="center">洋面温度</td><td align="center">1000</td><td align="center">3.660-3.840</td><td align="center">3.785</td><td align="center">0.05</td></tr><tr><td align="center">21</td><td align="center">森林火灾&#x2F;火山</td><td align="center">1000</td><td align="center">3.929-3.989</td><td align="center">3.992</td><td align="center">2</td></tr><tr><td align="center">22</td><td align="center">云&#x2F;地表温度</td><td align="center">1000</td><td align="center">3.929-3.989</td><td align="center">3.971</td><td align="center">0.07</td></tr><tr><td align="center">23</td><td align="center">云&#x2F;地表温度</td><td align="center">1000</td><td align="center">4.020-4.080</td><td align="center">4.056</td><td align="center">0.07</td></tr><tr><td align="center">24</td><td align="center">对流层温度&#x2F;云片</td><td align="center">1000</td><td align="center">4.433-4.498</td><td align="center">4.473</td><td align="center">0.25</td></tr><tr><td align="center">25</td><td align="center">对流层温度&#x2F;云片</td><td align="center">1000</td><td align="center">4.482-4.549</td><td align="center">4.545</td><td align="center">0.25</td></tr><tr><td align="center">26</td><td align="center">红外云探测</td><td align="center">1000</td><td align="center">1.360-1.390</td><td align="center">1.382</td><td align="center">150</td></tr><tr><td align="center">27</td><td align="center">对流层中层湿度</td><td align="center">1000</td><td align="center">6.535-6.895</td><td align="center">6.766</td><td align="center">0.25</td></tr><tr><td align="center">28</td><td align="center">对流层中层湿度</td><td align="center">1000</td><td align="center">7.175-7.475</td><td align="center">7.338</td><td align="center">0.25</td></tr><tr><td align="center">29</td><td align="center">表面温度</td><td align="center">1000</td><td align="center">8.400-8.700</td><td align="center">8.523</td><td align="center">0.05</td></tr><tr><td align="center">30</td><td align="center">臭氧总量</td><td align="center">1000</td><td align="center">9.580-9.880</td><td align="center">9.730</td><td align="center">0.25</td></tr><tr><td align="center">31</td><td align="center">云&#x2F;表面温度</td><td align="center">1000</td><td align="center">10.780-11.280</td><td align="center">11.010</td><td align="center">0.05</td></tr><tr><td align="center">32</td><td align="center">云高和表面温度</td><td align="center">1000</td><td align="center">11.770-12.270</td><td align="center">12.026</td><td align="center">0.05</td></tr><tr><td align="center">33</td><td align="center">云高和云片</td><td align="center">1000</td><td align="center">13.185-13.485</td><td align="center">13.363</td><td align="center">0.25</td></tr><tr><td align="center">34</td><td align="center">云高和云片</td><td align="center">1000</td><td align="center">13.485-13.785</td><td align="center">13.681</td><td align="center">0.25</td></tr><tr><td align="center">35</td><td align="center">云高和云片</td><td align="center">1000</td><td align="center">13.785-14.085</td><td align="center">13.910</td><td align="center">0.25</td></tr><tr><td align="center">36</td><td align="center">云高和云片</td><td align="center">1000</td><td align="center">14.085-14.385</td><td align="center">14.193</td><td align="center">0.35</td></tr></tbody></table><h1 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h1><p>Python面向对象编程与C++类似，主要以类class内方法的实现与互相调用，参数全局化以及实例化对象等内容。以下为类的初始化参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MODIS_Radiometric_Geometric_Correction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l1b_file, cloud_file, out_name</span>):</span><br><span class="line">        self.l1b_file = l1b_file</span><br><span class="line">        self.cloud_file = cloud_file</span><br><span class="line">        self.out_name = out_name</span><br><span class="line">        self.geo_resolution = <span class="number">0.01</span></span><br></pre></td></tr></table></figure><h1 id="MODIS-HDF4数据读取"><a href="#MODIS-HDF4数据读取" class="headerlink" title="MODIS HDF4数据读取"></a>MODIS HDF4数据读取</h1><p>以下是MODIS L1B HDF4数据读取，从底层实现的类中方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_read_modis_data_</span>(<span class="params">self</span>):</span><br><span class="line">        modis_l1b = SD(self.l1b_file)</span><br><span class="line">        modis_cloud = SD(self.cloud_file)</span><br><span class="line">        qkm_rad = self._radical_calibration_(modis_l1b, <span class="string">&#x27;EV_250_Aggr1km_RefSB&#x27;</span>, <span class="string">&#x27;radiance_scales&#x27;</span>,</span><br><span class="line">                                             <span class="string">&#x27;radiance_offsets&#x27;</span>)</span><br><span class="line">        hkm_rad = self._radical_calibration_(modis_l1b, <span class="string">&#x27;EV_500_Aggr1km_RefSB&#x27;</span>, <span class="string">&#x27;radiance_scales&#x27;</span>,</span><br><span class="line">                                             <span class="string">&#x27;radiance_offsets&#x27;</span>)</span><br><span class="line">        cloud_data = modis_cloud.select(<span class="string">&#x27;Cloud_Mask&#x27;</span>).get()</span><br><span class="line">        lon = modis_l1b.select(<span class="string">&#x27;Longitude&#x27;</span>).get()</span><br><span class="line">        lat = modis_l1b.select(<span class="string">&#x27;Latitude&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">return</span> qkm_rad, hkm_rad, cloud_data, lon, lat</span><br></pre></td></tr></table></figure><h1 id="辐射定标"><a href="#辐射定标" class="headerlink" title="辐射定标"></a>辐射定标</h1><p>读取HDF4数据集中的对象参数，这里的辐射定标是将DN值转化为辐射亮度，也可以转为反射率，只是偏移（offsets）和增益（scales）值不一样，可以在HDF4数据集中找到属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_radical_calibration_</span>(<span class="params">self, modis_l1b, dataset_name, scales, offsets</span>):</span><br><span class="line">        <span class="built_in">object</span> = modis_l1b.select(dataset_name)</span><br><span class="line">        data = <span class="built_in">object</span>.get()</span><br><span class="line">        scales = <span class="built_in">object</span>.attributes()[scales]</span><br><span class="line">        offsets = <span class="built_in">object</span>.attributes()[offsets]</span><br><span class="line">        data_rad = np.zeros((data.shape[<span class="number">0</span>], data.shape[<span class="number">1</span>], data.shape[<span class="number">2</span>]), dtype=np.float64)</span><br><span class="line">        <span class="keyword">for</span> i_layer <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):</span><br><span class="line">            data_rad[i_layer, :, :] = scales[i_layer] * (data[i_layer, :, :] - offsets[i_layer])</span><br><span class="line">        <span class="keyword">return</span> data_rad</span><br></pre></td></tr></table></figure><h1 id="云掩膜"><a href="#云掩膜" class="headerlink" title="云掩膜"></a>云掩膜</h1><p>云掩膜主要是利用MODIS的云掩膜产品MOD35进行处理，将二进制值转化为0，1的二值对L1B图像进行掩膜。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_cloud_mask_</span>(<span class="params">self, cloud_data</span>):</span><br><span class="line">        cloud_0 = cloud_data[<span class="number">0</span>, :, :]</span><br><span class="line">        cloud_0 = (np.int64(cloud_0 &lt; <span class="number">0</span>) * (<span class="number">256</span> + cloud_0)) + (np.int64(cloud_0 &gt;= <span class="number">0</span>) * cloud_0)</span><br><span class="line">        cloud_binary = np.zeros((cloud_0.shape[<span class="number">0</span>], cloud_0.shape[<span class="number">1</span>], <span class="number">8</span>), dtype=np.int64)</span><br><span class="line">        <span class="keyword">for</span> i_cloud <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            cloud_binary[:, :, i_cloud] = cloud_0 % <span class="number">2</span></span><br><span class="line">            cloud_0 //= <span class="number">2</span></span><br><span class="line">        clear_result = np.int64(cloud_binary[:, :, <span class="number">0</span>] == <span class="number">1</span>) &amp; np.int64(cloud_binary[:, :, <span class="number">1</span>] == <span class="number">1</span>) \</span><br><span class="line">                       &amp; np.int64(cloud_binary[:, :, <span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">        ocean_result = np.int64(cloud_binary[:, :, <span class="number">6</span>] == <span class="number">0</span>) &amp; np.int64(cloud_binary[:, :, <span class="number">7</span>] == <span class="number">0</span>)</span><br><span class="line">        cloud_result = np.int64(clear_result == <span class="number">0</span>) | np.int64(ocean_result == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> clear_result</span><br></pre></td></tr></table></figure><h1 id="几何校正"><a href="#几何校正" class="headerlink" title="几何校正"></a>几何校正</h1><p>几何校正主要利用读取的经纬度信息，将像元归位，放到其原有的地理位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_georeference_</span>(<span class="params">self, lon, lat, data</span>):</span><br><span class="line">        lon_interp = cv.resize(lon, (data.shape[<span class="number">1</span>], data.shape[<span class="number">0</span>]), interpolation=cv.INTER_LINEAR)</span><br><span class="line">        lat_interp = cv.resize(lat, (data.shape[<span class="number">1</span>], data.shape[<span class="number">0</span>]), interpolation=cv.INTER_LINEAR)</span><br><span class="line">        lon_min = np.<span class="built_in">min</span>(lon_interp)</span><br><span class="line">        lon_max = np.<span class="built_in">max</span>(lon_interp)</span><br><span class="line">        lat_min = np.<span class="built_in">min</span>(lat_interp)</span><br><span class="line">        lat_max = np.<span class="built_in">max</span>(lat_interp)</span><br><span class="line"></span><br><span class="line">        geo_box_col = np.int64(np.ceil((lon_max - lon_min) / self.geo_resolution))</span><br><span class="line">        geo_box_row = np.int64(np.ceil((lat_max - lat_min) / self.geo_resolution))</span><br><span class="line">        geo_box = np.zeros((geo_box_row, geo_box_col), dtype=np.float64)</span><br><span class="line">        geo_box_col_pos = np.int64(np.floor((lon_interp - lon_min) / self.geo_resolution))</span><br><span class="line">        geo_box_row_pos = np.int64(np.floor((lat_max - lat_interp) / self.geo_resolution))</span><br><span class="line">        geo_box[geo_box_row_pos, geo_box_col_pos] = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> geo_box, lon_min, lat_max</span><br></pre></td></tr></table></figure><h1 id="均值平滑像元填补"><a href="#均值平滑像元填补" class="headerlink" title="均值平滑像元填补"></a>均值平滑像元填补</h1><p>由于几何纠正之后影像上会有大量像元值空缺，所以利用窗口均值平滑的方法尽可能进行填补，以确保图像部分连续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_average_filtering_</span>(<span class="params">self, geo_box</span>):</span><br><span class="line">        geo_box_plus = np.zeros((geo_box.shape[<span class="number">0</span>] + <span class="number">2</span>, geo_box.shape[<span class="number">1</span>] + <span class="number">2</span>), dtype=np.float64) - <span class="number">9999.0</span></span><br><span class="line">        geo_box_plus[<span class="number">1</span>:geo_box.shape[<span class="number">0</span>] + <span class="number">1</span>, <span class="number">1</span>:geo_box.shape[<span class="number">1</span>] + <span class="number">1</span>] = geo_box</span><br><span class="line">        geo_box_out = np.zeros((geo_box.shape[<span class="number">0</span>], geo_box.shape[<span class="number">1</span>]), dtype=np.float64)</span><br><span class="line">        <span class="keyword">for</span> i_geo_box_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, geo_box.shape[<span class="number">0</span>] + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i_geo_box_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, geo_box.shape[<span class="number">1</span>] + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> geo_box_plus[i_geo_box_row, i_geo_box_col] == <span class="number">0.0</span>:</span><br><span class="line">                    temp_window = geo_box_plus[i_geo_box_row - <span class="number">1</span>:i_geo_box_row + <span class="number">2</span>,</span><br><span class="line">                                  i_geo_box_col - <span class="number">1</span>:i_geo_box_col + <span class="number">2</span>]</span><br><span class="line">                    temp_window = temp_window[temp_window &gt; <span class="number">0</span>]</span><br><span class="line">                    temp_window_sum = np.<span class="built_in">sum</span>(temp_window)</span><br><span class="line">                    temp_window_num = np.<span class="built_in">sum</span>(np.int64(temp_window &gt; <span class="number">0.0</span>))</span><br><span class="line">                    <span class="keyword">if</span> temp_window_num &gt; <span class="number">3</span>:</span><br><span class="line">                        geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = temp_window_sum / temp_window_num</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = geo_box_plus[</span><br><span class="line">                        i_geo_box_row, i_geo_box_col]</span><br><span class="line">        <span class="keyword">return</span> geo_box_out</span><br></pre></td></tr></table></figure><h1 id="B、G、R和NIR波段提取"><a href="#B、G、R和NIR波段提取" class="headerlink" title="B、G、R和NIR波段提取"></a>B、G、R和NIR波段提取</h1><p>分别将MODIS上述波段1，2，3，4分别对应红（R），近红外（NIR），蓝（B），绿（G）四个波段提取出来并按照B、G、R、NIR的顺序排列，并储存在一个数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_band_extract_</span>(<span class="params">self, lon, lat, qkm_rad, hkm_rad, clear_result</span>):</span><br><span class="line">        blue_band = hkm_rad[<span class="number">0</span>] * clear_result</span><br><span class="line">        green_band = hkm_rad[<span class="number">1</span>] * clear_result</span><br><span class="line">        red_band = qkm_rad[<span class="number">0</span>] * clear_result</span><br><span class="line">        nir_band = qkm_rad[<span class="number">1</span>] * clear_result</span><br><span class="line">        com_bands = np.array([blue_band, green_band, red_band, nir_band])</span><br><span class="line">        band_list = []</span><br><span class="line">        <span class="keyword">for</span> i_band <span class="keyword">in</span> com_bands:</span><br><span class="line">            geo_band, lon_min, lat_max = self._georeference_(lon, lat, i_band)</span><br><span class="line">            filter_band = self._average_filtering_(geo_band)</span><br><span class="line">            band_list.append(filter_band)</span><br><span class="line">        band_arr = np.array(band_list)</span><br><span class="line">        <span class="keyword">return</span> band_arr, lon_min, lat_max</span><br></pre></td></tr></table></figure><h1 id="GDAL波段合成与输出"><a href="#GDAL波段合成与输出" class="headerlink" title="GDAL波段合成与输出"></a>GDAL波段合成与输出</h1><p>利用GDAL写入图像的投影信息，仿射变换信息，以及对上述四个波段按顺序合成并保存到硬盘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_write_tiff_</span>(<span class="params">self, data, lon_min, lat_max</span>):</span><br><span class="line">        cols = data.shape[<span class="number">2</span>]</span><br><span class="line">        rows = data.shape[<span class="number">1</span>]</span><br><span class="line">        band_count = data.shape[<span class="number">0</span>]</span><br><span class="line">        driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">        out_raster = driver.Create(self.out_name, cols, rows, band_count, gdal.GDT_Float64)</span><br><span class="line"></span><br><span class="line">        out_raster.SetGeoTransform((lon_min, self.geo_resolution, <span class="number">0</span>, lat_max, <span class="number">0</span>, self.geo_resolution))</span><br><span class="line">        out_raster_SRS = osr.SpatialReference()</span><br><span class="line">        <span class="comment"># 代码4326表示WGS84坐标</span></span><br><span class="line">        out_raster_SRS.ImportFromEPSG(<span class="number">4326</span>)</span><br><span class="line">        out_raster.SetProjection(out_raster_SRS.ExportToWkt())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取数据集第一个波段，是从1开始，不是从0开始</span></span><br><span class="line">        <span class="keyword">for</span> i_band_count <span class="keyword">in</span> <span class="built_in">range</span>(band_count):</span><br><span class="line">            out_raster.GetRasterBand(i_band_count + <span class="number">1</span>).WriteArray(data[i_band_count])</span><br><span class="line">        out_raster.FlushCache()</span><br><span class="line">        out_raster = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h1 id="Python批量读取与数据匹配"><a href="#Python批量读取与数据匹配" class="headerlink" title="Python批量读取与数据匹配"></a>Python批量读取与数据匹配</h1><p>这里是主程序，主要功能是搜索文件路径，并读取匹配MOD02 L1B数据和MOD35 CloudMask数据，并定义初始化输入输出文件路径，批处理数据，实例化对象，函数调用以及计算处理时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    input_directory = <span class="string">&#x27;/mnt/e/Experiments/AOD_Retrieval/DATA/MOD021KM_MOD35Cloud_202205/&#x27;</span></span><br><span class="line">    output_directory = <span class="string">&#x27;/mnt/e/Experiments/AOD_Retrieval/DATA/Results/Results_MOD021KM_Rad_Geo_Cal/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(output_directory) == <span class="literal">False</span>:</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(input_directory):</span><br><span class="line">        l1b_file_list = [input_directory + i_hdf <span class="keyword">for</span> i_hdf <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                         i_hdf.endswith(<span class="string">&#x27;.hdf&#x27;</span>) <span class="keyword">and</span> i_hdf.startswith(<span class="string">&#x27;MOD02&#x27;</span>)]</span><br><span class="line">        cloud_file_list = [input_directory + i_hdf <span class="keyword">for</span> i_hdf <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                           i_hdf.endswith(<span class="string">&#x27;.hdf&#x27;</span>) <span class="keyword">and</span> i_hdf.startswith(<span class="string">&#x27;MOD35&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> i_l1b <span class="keyword">in</span> l1b_file_list:</span><br><span class="line">        <span class="keyword">for</span> i_cloud <span class="keyword">in</span> cloud_file_list:</span><br><span class="line">            <span class="keyword">if</span> os.path.basename(i_l1b)[<span class="number">10</span>:<span class="number">22</span>] == os.path.basename(i_cloud)[<span class="number">10</span>:<span class="number">22</span>]:</span><br><span class="line">                start_time_each = time.time()</span><br><span class="line">                out_name = output_directory + os.path.basename(i_l1b[:-<span class="number">4</span>]) + <span class="string">&#x27;_Rad_Geo_Cor.tiff&#x27;</span></span><br><span class="line">                modis_rad_geo_cor = MODIS_Radiometric_Geometric_Correction(i_l1b, i_cloud, out_name)</span><br><span class="line">                qkm_rad, hkm_rad, cloud_data, lon, lat = modis_rad_geo_cor._read_modis_data_()</span><br><span class="line">                clear_result = modis_rad_geo_cor._cloud_mask_(cloud_data)</span><br><span class="line">                com_band, lon_min, lat_max = modis_rad_geo_cor._band_extract_(lon, lat, qkm_rad, hkm_rad, clear_result)</span><br><span class="line">                modis_rad_geo_cor._write_tiff_(com_band, lon_min, lat_max)</span><br><span class="line"></span><br><span class="line">                end_time_each = time.time()</span><br><span class="line">                run_time_each = <span class="built_in">round</span>(end_time_each - start_time_each, <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;The image of &#x27;</span> + os.path.basename(i_l1b)[<span class="number">10</span>:<span class="number">22</span>] + <span class="string">&#x27; is saved! The time consuming is &#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                    run_time_each) + <span class="string">&#x27; s.&#x27;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    run_time = <span class="built_in">round</span>(end_time - start_time, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The total time consuming is &#x27;</span> + <span class="built_in">str</span>(run_time) + <span class="string">&#x27; s.&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>以下是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal, osr</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyhdf.SD <span class="keyword">import</span> SD</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MODIS_Radiometric_Geometric_Correction</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, l1b_file, cloud_file, out_name</span>):</span><br><span class="line">        self.l1b_file = l1b_file</span><br><span class="line">        self.cloud_file = cloud_file</span><br><span class="line">        self.out_name = out_name</span><br><span class="line">        self.geo_resolution = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_read_modis_data_</span>(<span class="params">self</span>):</span><br><span class="line">        modis_l1b = SD(self.l1b_file)</span><br><span class="line">        modis_cloud = SD(self.cloud_file)</span><br><span class="line">        qkm_rad = self._radical_calibration_(modis_l1b, <span class="string">&#x27;EV_250_Aggr1km_RefSB&#x27;</span>, <span class="string">&#x27;radiance_scales&#x27;</span>,</span><br><span class="line">                                             <span class="string">&#x27;radiance_offsets&#x27;</span>)</span><br><span class="line">        hkm_rad = self._radical_calibration_(modis_l1b, <span class="string">&#x27;EV_500_Aggr1km_RefSB&#x27;</span>, <span class="string">&#x27;radiance_scales&#x27;</span>,</span><br><span class="line">                                             <span class="string">&#x27;radiance_offsets&#x27;</span>)</span><br><span class="line">        cloud_data = modis_cloud.select(<span class="string">&#x27;Cloud_Mask&#x27;</span>).get()</span><br><span class="line">        lon = modis_l1b.select(<span class="string">&#x27;Longitude&#x27;</span>).get()</span><br><span class="line">        lat = modis_l1b.select(<span class="string">&#x27;Latitude&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">return</span> qkm_rad, hkm_rad, cloud_data, lon, lat</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_radical_calibration_</span>(<span class="params">self, modis_l1b, dataset_name, scales, offsets</span>):</span><br><span class="line">        <span class="built_in">object</span> = modis_l1b.select(dataset_name)</span><br><span class="line">        data = <span class="built_in">object</span>.get()</span><br><span class="line">        scales = <span class="built_in">object</span>.attributes()[scales]</span><br><span class="line">        offsets = <span class="built_in">object</span>.attributes()[offsets]</span><br><span class="line">        data_rad = np.zeros((data.shape[<span class="number">0</span>], data.shape[<span class="number">1</span>], data.shape[<span class="number">2</span>]), dtype=np.float64)</span><br><span class="line">        <span class="keyword">for</span> i_layer <span class="keyword">in</span> <span class="built_in">range</span>(data.shape[<span class="number">0</span>]):</span><br><span class="line">            data_rad[i_layer, :, :] = scales[i_layer] * (data[i_layer, :, :] - offsets[i_layer])</span><br><span class="line">        <span class="keyword">return</span> data_rad</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cloud_mask_</span>(<span class="params">self, cloud_data</span>):</span><br><span class="line">        cloud_0 = cloud_data[<span class="number">0</span>, :, :]</span><br><span class="line">        cloud_0 = (np.int64(cloud_0 &lt; <span class="number">0</span>) * (<span class="number">256</span> + cloud_0)) + (np.int64(cloud_0 &gt;= <span class="number">0</span>) * cloud_0)</span><br><span class="line">        cloud_binary = np.zeros((cloud_0.shape[<span class="number">0</span>], cloud_0.shape[<span class="number">1</span>], <span class="number">8</span>), dtype=np.int64)</span><br><span class="line">        <span class="keyword">for</span> i_cloud <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            cloud_binary[:, :, i_cloud] = cloud_0 % <span class="number">2</span></span><br><span class="line">            cloud_0 //= <span class="number">2</span></span><br><span class="line">        clear_result = np.int64(cloud_binary[:, :, <span class="number">0</span>] == <span class="number">1</span>) &amp; np.int64(cloud_binary[:, :, <span class="number">1</span>] == <span class="number">1</span>) \</span><br><span class="line">                       &amp; np.int64(cloud_binary[:, :, <span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">        ocean_result = np.int64(cloud_binary[:, :, <span class="number">6</span>] == <span class="number">0</span>) &amp; np.int64(cloud_binary[:, :, <span class="number">7</span>] == <span class="number">0</span>)</span><br><span class="line">        cloud_result = np.int64(clear_result == <span class="number">0</span>) | np.int64(ocean_result == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> clear_result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_band_extract_</span>(<span class="params">self, lon, lat, qkm_rad, hkm_rad, clear_result</span>):</span><br><span class="line">        blue_band = hkm_rad[<span class="number">0</span>] * clear_result</span><br><span class="line">        green_band = hkm_rad[<span class="number">1</span>] * clear_result</span><br><span class="line">        red_band = qkm_rad[<span class="number">0</span>] * clear_result</span><br><span class="line">        nir_band = qkm_rad[<span class="number">1</span>] * clear_result</span><br><span class="line">        com_bands = np.array([blue_band, green_band, red_band, nir_band])</span><br><span class="line">        band_list = []</span><br><span class="line">        <span class="keyword">for</span> i_band <span class="keyword">in</span> com_bands:</span><br><span class="line">            geo_band, lon_min, lat_max = self._georeference_(lon, lat, i_band)</span><br><span class="line">            filter_band = self._average_filtering_(geo_band)</span><br><span class="line">            band_list.append(filter_band)</span><br><span class="line">        band_arr = np.array(band_list)</span><br><span class="line">        <span class="keyword">return</span> band_arr, lon_min, lat_max</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_georeference_</span>(<span class="params">self, lon, lat, data</span>):</span><br><span class="line">        lon_interp = cv.resize(lon, (data.shape[<span class="number">1</span>], data.shape[<span class="number">0</span>]), interpolation=cv.INTER_LINEAR)</span><br><span class="line">        lat_interp = cv.resize(lat, (data.shape[<span class="number">1</span>], data.shape[<span class="number">0</span>]), interpolation=cv.INTER_LINEAR)</span><br><span class="line">        lon_min = np.<span class="built_in">min</span>(lon_interp)</span><br><span class="line">        lon_max = np.<span class="built_in">max</span>(lon_interp)</span><br><span class="line">        lat_min = np.<span class="built_in">min</span>(lat_interp)</span><br><span class="line">        lat_max = np.<span class="built_in">max</span>(lat_interp)</span><br><span class="line"></span><br><span class="line">        geo_box_col = np.int64(np.ceil((lon_max - lon_min) / self.geo_resolution))</span><br><span class="line">        geo_box_row = np.int64(np.ceil((lat_max - lat_min) / self.geo_resolution))</span><br><span class="line">        geo_box = np.zeros((geo_box_row, geo_box_col), dtype=np.float64)</span><br><span class="line">        geo_box_col_pos = np.int64(np.floor((lon_interp - lon_min) / self.geo_resolution))</span><br><span class="line">        geo_box_row_pos = np.int64(np.floor((lat_max - lat_interp) / self.geo_resolution))</span><br><span class="line">        geo_box[geo_box_row_pos, geo_box_col_pos] = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> geo_box, lon_min, lat_max</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_average_filtering_</span>(<span class="params">self, geo_box</span>):</span><br><span class="line">        geo_box_plus = np.zeros((geo_box.shape[<span class="number">0</span>] + <span class="number">2</span>, geo_box.shape[<span class="number">1</span>] + <span class="number">2</span>), dtype=np.float64) - <span class="number">9999.0</span></span><br><span class="line">        geo_box_plus[<span class="number">1</span>:geo_box.shape[<span class="number">0</span>] + <span class="number">1</span>, <span class="number">1</span>:geo_box.shape[<span class="number">1</span>] + <span class="number">1</span>] = geo_box</span><br><span class="line">        geo_box_out = np.zeros((geo_box.shape[<span class="number">0</span>], geo_box.shape[<span class="number">1</span>]), dtype=np.float64)</span><br><span class="line">        <span class="keyword">for</span> i_geo_box_row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, geo_box.shape[<span class="number">0</span>] + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i_geo_box_col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, geo_box.shape[<span class="number">1</span>] + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> geo_box_plus[i_geo_box_row, i_geo_box_col] == <span class="number">0.0</span>:</span><br><span class="line">                    temp_window = geo_box_plus[i_geo_box_row - <span class="number">1</span>:i_geo_box_row + <span class="number">2</span>,</span><br><span class="line">                                  i_geo_box_col - <span class="number">1</span>:i_geo_box_col + <span class="number">2</span>]</span><br><span class="line">                    temp_window = temp_window[temp_window &gt; <span class="number">0</span>]</span><br><span class="line">                    temp_window_sum = np.<span class="built_in">sum</span>(temp_window)</span><br><span class="line">                    temp_window_num = np.<span class="built_in">sum</span>(np.int64(temp_window &gt; <span class="number">0.0</span>))</span><br><span class="line">                    <span class="keyword">if</span> temp_window_num &gt; <span class="number">3</span>:</span><br><span class="line">                        geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = temp_window_sum / temp_window_num</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = <span class="number">0.0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    geo_box_out[i_geo_box_row - <span class="number">1</span>, i_geo_box_col - <span class="number">1</span>] = geo_box_plus[</span><br><span class="line">                        i_geo_box_row, i_geo_box_col]</span><br><span class="line">        <span class="keyword">return</span> geo_box_out</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_write_tiff_</span>(<span class="params">self, data, lon_min, lat_max</span>):</span><br><span class="line">        cols = data.shape[<span class="number">2</span>]</span><br><span class="line">        rows = data.shape[<span class="number">1</span>]</span><br><span class="line">        band_count = data.shape[<span class="number">0</span>]</span><br><span class="line">        driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">        out_raster = driver.Create(self.out_name, cols, rows, band_count, gdal.GDT_Float64)</span><br><span class="line"></span><br><span class="line">        out_raster.SetGeoTransform((lon_min, self.geo_resolution, <span class="number">0</span>, lat_max, <span class="number">0</span>, self.geo_resolution))</span><br><span class="line">        out_raster_SRS = osr.SpatialReference()</span><br><span class="line">        <span class="comment"># 代码4326表示WGS84坐标</span></span><br><span class="line">        out_raster_SRS.ImportFromEPSG(<span class="number">4326</span>)</span><br><span class="line">        out_raster.SetProjection(out_raster_SRS.ExportToWkt())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取数据集第一个波段，是从1开始，不是从0开始</span></span><br><span class="line">        <span class="keyword">for</span> i_band_count <span class="keyword">in</span> <span class="built_in">range</span>(band_count):</span><br><span class="line">            out_raster.GetRasterBand(i_band_count + <span class="number">1</span>).WriteArray(data[i_band_count])</span><br><span class="line">        out_raster.FlushCache()</span><br><span class="line">        out_raster = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    input_directory = <span class="string">&#x27;/mnt/e/Experiments/AOD_Retrieval/DATA/MOD021KM_MOD35Cloud_202205/&#x27;</span></span><br><span class="line">    output_directory = <span class="string">&#x27;/mnt/e/Experiments/AOD_Retrieval/DATA/Results/Results_MOD021KM_Rad_Geo_Cal/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(output_directory) == <span class="literal">False</span>:</span><br><span class="line">        os.makedirs(output_directory)</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(input_directory):</span><br><span class="line">        l1b_file_list = [input_directory + i_hdf <span class="keyword">for</span> i_hdf <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                         i_hdf.endswith(<span class="string">&#x27;.hdf&#x27;</span>) <span class="keyword">and</span> i_hdf.startswith(<span class="string">&#x27;MOD02&#x27;</span>)]</span><br><span class="line">        cloud_file_list = [input_directory + i_hdf <span class="keyword">for</span> i_hdf <span class="keyword">in</span> files <span class="keyword">if</span></span><br><span class="line">                           i_hdf.endswith(<span class="string">&#x27;.hdf&#x27;</span>) <span class="keyword">and</span> i_hdf.startswith(<span class="string">&#x27;MOD35&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> i_l1b <span class="keyword">in</span> l1b_file_list:</span><br><span class="line">        <span class="keyword">for</span> i_cloud <span class="keyword">in</span> cloud_file_list:</span><br><span class="line">            <span class="keyword">if</span> os.path.basename(i_l1b)[<span class="number">10</span>:<span class="number">22</span>] == os.path.basename(i_cloud)[<span class="number">10</span>:<span class="number">22</span>]:</span><br><span class="line">                start_time_each = time.time()</span><br><span class="line">                out_name = output_directory + os.path.basename(i_l1b[:-<span class="number">4</span>]) + <span class="string">&#x27;_Rad_Geo_Cor.tiff&#x27;</span></span><br><span class="line">                modis_rad_geo_cor = MODIS_Radiometric_Geometric_Correction(i_l1b, i_cloud, out_name)</span><br><span class="line">                qkm_rad, hkm_rad, cloud_data, lon, lat = modis_rad_geo_cor._read_modis_data_()</span><br><span class="line">                clear_result = modis_rad_geo_cor._cloud_mask_(cloud_data)</span><br><span class="line">                com_band, lon_min, lat_max = modis_rad_geo_cor._band_extract_(lon, lat, qkm_rad, hkm_rad, clear_result)</span><br><span class="line">                modis_rad_geo_cor._write_tiff_(com_band, lon_min, lat_max)</span><br><span class="line"></span><br><span class="line">                end_time_each = time.time()</span><br><span class="line">                run_time_each = <span class="built_in">round</span>(end_time_each - start_time_each, <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;The image of &#x27;</span> + os.path.basename(i_l1b)[<span class="number">10</span>:<span class="number">22</span>] + <span class="string">&#x27; is saved! The time consuming is &#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                    run_time_each) + <span class="string">&#x27; s.&#x27;</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    run_time = <span class="built_in">round</span>(end_time - start_time, <span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The total time consuming is &#x27;</span> + <span class="built_in">str</span>(run_time) + <span class="string">&#x27; s.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>下图分别为MODIS合成的真彩色和彩红外影像。</p><p>真彩色合成是对MODIS合成数据B（1）、G（2）、R（3）、NIR（4）四个波段按照R（3）、G（2）、B（1）分别赋红、绿、蓝三种颜色显示出与真实色彩一致的影像合成方法。</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/modis_radiometric_geometric_correction/modis_rgb.jpg" alt="MODIS 真彩色合成影像"></p><p>彩红外又叫标准假彩色合成，是对MODIS合成数据B（1）、G（2）、R（3）、NIR（4）四个波段按照NIR（4）、R（3）、G（2）分别赋红、绿、蓝三种颜色显示出与真实色彩不一致但能突出影像上的水体植被特征的一种遥感影像合成方法（植被显红色，水体显黑色）。</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/modis_radiometric_geometric_correction/modis_colorIr.jpg" alt="MODIS 彩红外合成影像"></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python卫星数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>气溶胶遥感分类方法</title>
      <link href="/archives/b7563557.html"/>
      <url>/archives/b7563557.html</url>
      
        <content type="html"><![CDATA[<h1 id="气溶胶光学特性"><a href="#气溶胶光学特性" class="headerlink" title="气溶胶光学特性"></a>气溶胶光学特性</h1><p>气溶胶类型在遥感影像上极为难以识别，可以说肉眼不可区分。具体属于哪一种类别，需要运用到表征气溶胶粒子特性的光学特性加以区分。<br>主要有以下几种光学特性：</p><blockquote><p>（1）AOD&#x2F;T（Aerosol Optical Depth&#x2F;Thickness）气溶胶光学厚度，表征气溶胶消光能力的一种光学物理量，值越大表明气溶胶消光越严重；</p><p>（2）AE（Ångström Exponent）波长指数，是衡量气溶胶粒子大小的指标，取决于气溶胶粒子大小空间分布和折射率，AE的低值对应于灰尘等大颗粒，而高值对应于烟雾颗粒等小颗粒；</p><p>（3）SSA（Single Scattering albedo）单次散射反照率，定义为散射截面与消光截面之比，指大气粒子在消光之时的散射的部分相对于总消光（散射+吸收）的占比，<br>如果完全避免粒子吸收波段，则对于粒子单次散射来说SSA&#x3D;1，如果粒子对光完全吸收，没有散射，则SSA&#x3D;0； 而气溶胶的吸收特性较为复杂，不仅与其组成成分有关，而且往往与其吸湿特性有关。</p><p>（4）FMF（Fine Mode Fraction）气溶胶细粒子比，表征大气气溶胶中的细粒子所占比例，通常用于区分颗粒物大小或者PM2.5反演。</p><p>（5）AI（Aerosol Index）气溶胶指数，是后向散射的波长依赖程度的度量，表征气溶胶的吸收性强弱，值越大吸收性越强。</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AerosolClassification/FMF.png" alt="细粒子比计算公式"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AerosolClassification/AI.png" alt="气溶胶指数计算公式"></p><h1 id="气溶胶分类方法简述"><a href="#气溶胶分类方法简述" class="headerlink" title="气溶胶分类方法简述"></a>气溶胶分类方法简述</h1><p>查阅大量文献显示，一般气溶胶的遥感分类方法主要是利用遥感数据反演的大气溶溶胶特性参数（上述参数等）进行分类，但这种饭利用反演值而非测量值进行分类的方法势必会引入反演误差，<br>由于反演算法或者模型不准确所导致的误差无法避免。</p><p>主要方法特征有吸收性强弱和粒径大小，分别由AI和AE指数表征，可大致分为如下四类：</p><table><thead><tr><th align="center"></th><th align="center">吸收性</th><th align="center">非吸收性</th></tr></thead><tbody><tr><td align="center">粗粒子</td><td align="center">沙尘</td><td align="center">海盐</td></tr><tr><td align="center">细粒子</td><td align="center">碳质</td><td align="center">硫酸盐</td></tr></tbody></table><p>通过对AI、AE以及AOD设置阈值进行分类，可以区分气溶胶类型，这种方法精度依赖于各参数的反演精度，所以并不能直接有效。</p><p>之后的研究中需要直接对原始影像（定标后的辐射亮度）直接进行分类，跳过反演部分，即可避免反演误差，提高分类精度。需要利用到辐射传输模型模拟数值来筛选卫星影像像元类别。<br>研究中可以利用R-Pstar3辐射传输模型作为辅助，模拟出每个气溶胶类型的辐射光谱，进而利用光谱匹配算法将MODIS数据的光谱和气溶胶进行匹配从而分类出气溶胶类型。</p><blockquote><p>参考文献<br>[1] <a href="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AerosolClassification/Journal%20of%20Geophysical%20Research%20%20Atmospheres%20-%202007%20-%20Kim%20-%20Consistency%20of%20the%20aerosol%20type%20classification%20from%20satellite.pdf">Consistency of the aerosol type classification from satellite remote sensing during the Atmospheric Brown Cloud–East Asia Regional Experiment campaign</a></p><p>[2] <a href="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/AerosolClassification/A%20global%20aerosol%20classification%20algorithm%20incorporating%20multiple%20satellite%20data%20sets%20of%20aerosol%20and%20trace%20gas%20abundances.pdf">A global aerosol classification algorithm incorporating multiple satellite data sets of aerosol and trace gas abundances</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感与大气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级快乐</title>
      <link href="/archives/1033b493.html"/>
      <url>/archives/1033b493.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>越是能体现人性尊严的快乐，越是一种高级的快乐，因为他跟人的尊严有关。</p><p>——罗翔</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不明觉厉的遥感</title>
      <link href="/archives/3a816938.html"/>
      <url>/archives/3a816938.html</url>
      
        <content type="html"><![CDATA[<p>1608年，汉斯·李波尔塞发明并制造了世界上第一架望远镜，这是人类利用遥感技术对未知的第一次探索，也是遥感技术发展的萌芽阶段。但是这种只能观望却不能记录的方式直至两百多年后的十九世纪中期，摄影技术的出现为遥感进步奠定了坚实的基础。你没有听错，就是摄影技术。</p><p>可能很多人都没有听过遥感这个晦涩难懂的词语究竟是什么，但你可能不知道，遥感在学科领域还有一个简单易懂而又不失优雅的名字——摄影测量与遥感，也许你会觉得遥感可能就是修修遥控器，但是摄影测量你一定明白——通过摄影来测量。你又明白了，遥感就是广义上的摄影测量，只是测量的参数不仅仅是长，宽，高，面积之类的远处物体的几何属性，还包含了判断其特征帮助人类更好地认识远处物体的物理特征。简言之就是从远处看你到底是个什么玩意儿。</p><p>有了传感器，“感”是可以实现了，但是“遥”呢？这就来了嘛！</p><p>1858年，G.F.陶纳乔用系留气球拍摄了法国巴黎的“鸟瞰”相片，所谓系留气球就是系上绳子可以上天的氢气球，上面搭载相机，就可以从高处看地球了。紧接着人类为了让传感器上天各显神通，热气球，飞鸽，风筝相继成为摄像头上天的工具，直至莱特兄弟发明飞机不仅改写了人类航天史，也彻底改写了遥感史。</p><p>紧接着一战，二战爆发，航空遥感被应用于军事侦察，军事制图，发展迅速，逐步取代传统测量手段，成为人类观测地球，外太空，获取信息的重要手段。</p><p>再回到最初那个问题，什么是遥感？顾名思义，遥远的感知，其源于英文Remote Sensing的翻译，最早是美国海军研究局艾弗林·普鲁伊特于1960年提出的，殊不知这时，遥感已有350多年的历史。</p><p>广义的遥感泛指一切无接触的远距离探测，那么多远才算远呢？很远很远，很远很远很远，要这么远。这就需要人造卫星了，前面介绍的都是地面航空遥感，还不够远，航天遥感一般是把传感器搭载在人造卫星上，这很远吗？不，还有航宇遥感，星际飞船上的眼睛了解一下，不过通常情况下是以卫星遥感为主来观测与我们息息相关的地球。而通常意义上的遥感就是指是应用探测仪器，不与探测目标相接触，从远处把目标的电磁波特性记录下来，通过分析，揭示出物体的特征性质及其变化的综合性探测技术。遥感有三个要素，我们前面已经讲了两种：“遥”对应着平台，“感”对应着传感器，我们姑且理解为相机，那么第三个要素是什么呢，如何将观测目标的特征传输到传感器并被接受呢？对没错，你猜的很对，就是电磁波。电磁波按照其波长可以分为紫外线，可见光，红外，微波等等。这些电磁波都可以携带目标信息从而被传感器接收到。最常见的应该是可见光了吧，人眼可见的光，而传感器比人眼优秀之处在于传感器可以接受人眼看不到的波长范围的电磁波，即紫外，红外和微波。</p>]]></content>
      
      
      <categories>
          
          <category> 遥感与大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号的虚幻</title>
      <link href="/archives/61521166.html"/>
      <url>/archives/61521166.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>人应该在什么时候意识到自己的渺小</li><li>在神和智慧</li><li>美和自然面前</li><li>而不是在人们面前</li><li>在人们面前</li><li>他应该意识到自己的尊严</li></ul><p>——《契诃夫书信集》</p></blockquote><p>契诃夫这句话道出了人不论处于何种境地，即使对待渺小的事物都应该保持敬畏与谦卑，对待别人的吹捧也能时刻保持沉着而清醒的头脑，不卑不亢。<br>这其实也是我可以夸人而不捧人的原因所在。<br>有时候社会标签会把人压死，但究其本质始终是虚幻，人除去了虚幻的符号，也不过是一个个真实的人。摘下这些所谓的标签，才能更真实地活着。<br>穿透社会所赋予的虚幻的符号，人才会不断逼近生命的本质，才会收获平静与安宁。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初心与迷失</title>
      <link href="/archives/91104203.html"/>
      <url>/archives/91104203.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>我们兴致勃勃地探索着这个世界，在算法构造的海洋中流连，</li><li>很多人已经不再关心真实的生活是什么样子了。</li><li>当看多了互联网上喧哗的舆论场，</li><li>在潮流与玩梗充斥的信息茧房中，</li><li>世界的参差逐渐模糊，系统将无可避免地走向热寂。</li></ul><p>​       ——图灵的猫</p></blockquote><p>人应该清醒于世，清醒当前自己的状况，世界环境更迭的走向，以及当深陷泥潭时思索意义，当凝望深渊时追求光明，所谓”于极迷处识迷，则处处醒“。只有这样才能洒脱于世，活得通透。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自信的源泉</title>
      <link href="/archives/57eb0d7a.html"/>
      <url>/archives/57eb0d7a.html</url>
      
        <content type="html"><![CDATA[<p>我原以为自信来自别人对自己的肯定，至今我才知道自信是一种发自内心的，深入骨髓的气质。<br>我能持久保持自信的原因是不管别人怎么否定自己，你都能永远相信自己，记得自己的珍贵。<br>还记得《无问西东》中有一句话：</p><blockquote><p>愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心，无问西东。</p><p>——《无问西东》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我愿保持清醒的自知直到永远</title>
      <link href="/archives/1def5f0d.html"/>
      <url>/archives/1def5f0d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>于极迷处识迷，则处处醒</p><p>将难放怀一放，则万境宽</p><p>——《小窗幽记·集醒篇》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书与生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四阶Runge-Kutta公式与Adams预测校正公式求解常微分方程初值问题</title>
      <link href="/archives/330ac4a4.html"/>
      <url>/archives/330ac4a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>取步长h&#x3D;0.1，用经典四阶Runge-Kutta 公式与Adams预测校正公式求解初值问题<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/Topic_DifferEqua.png" style="zoom:72%;"><br>的数值解，并通过列表与画图将计算结果与精确解<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/Topic_True.png" style="zoom:72%;"><br>进行比较。</p><h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><h2 id="经典四阶Runge-Kutta公式"><a href="#经典四阶Runge-Kutta公式" class="headerlink" title="经典四阶Runge-Kutta公式"></a>经典四阶Runge-Kutta公式</h2><p>一阶常微分方程初值问题</p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/formula1.png" style="zoom:80%;"><p>的数值解法是近似计算中很重要的部分。<br>常微分方程初值问题的数值解法是求方程(8.1)的解在点列xn&#x3D;xn-1+hn(n&#x3D;0,1,…)上的近似值yn， 这里hn是xn-1到xn的步长，一般略去下标记为h。<br>常微分方程初值问题的数值解法一般分为两大类：<br>(1)单步法：这类方法在计算yn时，只用到xn+1、xn和yn,即前一步的值。因此,在有了初值以后就可以逐步往下计算。典型方法如龙格——库塔(Runge-Kutta)方法。<br>(2)多步法：这类方法在计算yn+1时，除用到xn+1、xn和yn以外，还要用<br>Yn-p(p&#x3D;1,2,…,k;k &gt; 0)，即前面k步的值。典型方法如Adams方法。<br>Runge-Kutta方法的优点是：单步法、精度高，计算过程便于改变步长，缺点是计算量较大，每前进一步需要计算四次函数值f。<br>经典的Runge-Kutta方法是一个四阶的方法，它的计算公式是:</p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/formula2.png" style="zoom:80%;"><h2 id="Adams预测校正公式"><a href="#Adams预测校正公式" class="headerlink" title="Adams预测校正公式"></a>Adams预测校正公式</h2><p>仿照改进的欧拉格式的构造方法，将显式和隐式两种亚当姆斯格式相匹配，构成下列亚当姆斯预测-校正公式:<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/formula3.png"><br>亚当姆斯预测-校正方法在计算yn+1时，除用到xn+1、xn和yn以外，还要用Yn-p(p&#x3D;1,2,…,k;k &gt; 0)，即前面k步的值。在实际计算时，可借助于某种单步法，如四阶龙格-库塔格式为预测——校正公式提供开始值y1,y2,y3 。<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/formula4.png" style="zoom:80%;"><br>之后利用亚当姆斯预测——校正公式求解之后的节点的值。由于亚当姆斯预测——校正公式中预报公式与校正公式具有同等精度，因此可以基于其截断误差估计及误差补偿的思想，可以提供一种提高精度的有效方法。</p><h1 id="程序框图"><a href="#程序框图" class="headerlink" title="程序框图"></a>程序框图</h1><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/runge_kutta.png" alt="图1 四阶经典龙格——库塔公式算法流程图" style="zoom:60%;"><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/adams.png" alt="图2 亚当姆斯预测校正公式算法流程图" style="zoom:72%;"><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p>本次程序采用Python的面向对象方法进行编写，其中对算法的理解以及计算微分方程数值方法公式的推导是本程序的难点所在。</p><p>利用所编程序，确定并计算题目中所给微分方程的数值解:</p><p>以下将用Python进行编程实验，分别利用四阶经典龙格——库塔公式与亚当姆斯预测校正公式对题目中所要求的微分方程初值问题进行求解，最后进行结果分析与讨论。</p><p>Python代码详解及运行结果如下：</p><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><blockquote><p><strong>Runge_Kutta_Adams.py:</strong> **龙格-**<strong>库塔与亚达姆斯公式求解微分方程文件。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/29 9:16 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: Runge_Kutta_Adams.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RungeKutta_AdamsSolvingOrdinaryDifferentialEquations</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用龙格库塔与亚当姆斯方法求解常微分方程，并做对比分析</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, equs_fxy, sol_interval, y0, h_step</span>):</span><br><span class="line">        self.equs_fxy = equs_fxy  <span class="comment"># 需要求解的微分方程，y&#x27;=f(x,y),f的格式：</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        def f(x,y):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">            return dy</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sol_interval) == <span class="number">2</span>:</span><br><span class="line">            self.a, self.b = sol_interval[<span class="number">0</span>], sol_interval[<span class="number">1</span>]  <span class="comment"># 求解区间，a，b分别为起始值和终止值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;求解区间参数设置不规范，应为[a, b].&quot;</span>)</span><br><span class="line">        self.y0 = y0  <span class="comment"># 初值,起始条件，y0=y(0)</span></span><br><span class="line">        self.h = h_step  <span class="comment"># 求解步长（区间[a,b]n等分）</span></span><br><span class="line">        self.n = <span class="built_in">round</span>(<span class="built_in">abs</span>(self.b - self.a) / self.h)  <span class="comment"># 节点</span></span><br><span class="line">        self.true_value = <span class="literal">None</span>  <span class="comment"># 方程的真值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_Ord4Runge_Kutta</span>(<span class="params">self</span>):  <span class="comment"># 四阶古典Ｒｕｎｇｅ—Ｋｕｔｔａ公式</span></span><br><span class="line">        y = np.zeros((self.n, <span class="number">1</span>))</span><br><span class="line">        x = np.zeros((self.n, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        y[<span class="number">0</span>] = self.y0</span><br><span class="line">        x[<span class="number">0</span>] = self.a</span><br><span class="line">        K1, K2, K3, K4 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 初始化K</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%4s %9s %8s %10s&quot;</span>%(<span class="string">&quot;x_n&quot;</span>, <span class="string">&quot;4阶龙格-库塔&quot;</span>, <span class="string">&quot;精确解&quot;</span>, <span class="string">&quot;误差&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.n, <span class="number">1</span>):</span><br><span class="line">            x[i] = self.a + i * self.h</span><br><span class="line">            K1 = self.equs_fxy(x[i - <span class="number">1</span>], y[i - <span class="number">1</span>])</span><br><span class="line">            K2 = self.equs_fxy(x[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">2</span> * self.h, y[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">2</span> * self.h * K1)</span><br><span class="line">            K3 = self.equs_fxy(x[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">2</span> * self.h, y[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">2</span> * self.h * K2)</span><br><span class="line">            K4 = self.equs_fxy(x[i - <span class="number">1</span>] + self.h, y[i - <span class="number">1</span>] + self.h * K3)</span><br><span class="line">            y[i] = y[i - <span class="number">1</span>] + self.h / <span class="number">6</span> * (K1 + <span class="number">2</span> * K2 + <span class="number">2</span> * K3 + K4)</span><br><span class="line">            y_t = x[i] * (<span class="number">3</span> + x[i] ** <span class="number">2</span>) / (<span class="number">3</span> * (<span class="number">1</span> + x[i] ** <span class="number">2</span>))</span><br><span class="line">            <span class="built_in">print</span>(x[i], y[i], y_t, <span class="built_in">abs</span>(y[i] - y_t))</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_Ord4Kutta</span>(<span class="params">self</span>):  <span class="comment"># 四阶Ｋｕｔｔａ公式</span></span><br><span class="line">        y = np.zeros((<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">        x = np.zeros((<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        y[<span class="number">0</span>] = self.y0</span><br><span class="line">        x[<span class="number">0</span>] = self.a</span><br><span class="line">        K1, K2, K3, K4 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>):</span><br><span class="line">            x[i] = self.a + i * self.h * <span class="number">4</span></span><br><span class="line">            K1 = self.equs_fxy(x[i - <span class="number">1</span>], y[i - <span class="number">1</span>])</span><br><span class="line">            K2 = self.equs_fxy(x[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * self.h * <span class="number">4</span>, y[i - <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * self.h * <span class="number">4</span> * K1)</span><br><span class="line">            K3 = self.equs_fxy(x[i - <span class="number">1</span>] + <span class="number">2</span> / <span class="number">3</span> * self.h * <span class="number">4</span>, y[i - <span class="number">1</span>] - <span class="number">1</span> / <span class="number">3</span> * self.h * <span class="number">4</span> * K1 + self.h * <span class="number">4</span> * K2)</span><br><span class="line">            K4 = self.equs_fxy(x[i - <span class="number">1</span>] + self.h * <span class="number">4</span>, y[i - <span class="number">1</span>] + self.h * <span class="number">4</span> * K1 - self.h * <span class="number">4</span> * K2 + self.h * <span class="number">4</span> * K3)</span><br><span class="line">            y[i] = y[i - <span class="number">1</span>] + self.h * <span class="number">4</span> / <span class="number">8</span> * (K1 + <span class="number">3</span> * K2 + <span class="number">3</span> * K3 + K4)</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_Ord4ModifiedAdams</span>(<span class="params">self</span>):  <span class="comment"># 预测-校正法：四阶Adams预测-校正法</span></span><br><span class="line">        y = np.zeros((self.n, <span class="number">1</span>))</span><br><span class="line">        x = np.zeros((self.n, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        y[<span class="number">0</span>] = self.y0</span><br><span class="line">        x[<span class="number">0</span>] = self.a</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.n &gt; <span class="number">4</span>:</span><br><span class="line">            x1, y1 = self._Ord4Kutta()</span><br><span class="line">            y[<span class="number">0</span>:<span class="number">4</span>] = y1</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%4s %6s %6s %10s&quot;</span>%(<span class="string">&quot;x_n&quot;</span>, <span class="string">&quot;亚当姆斯预测校正&quot;</span>, <span class="string">&quot;精确解&quot;</span>, <span class="string">&quot;误差&quot;</span>))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, self.n, <span class="number">1</span>):</span><br><span class="line">                x[i] = self.a + i * self.h</span><br><span class="line">                temp = y[i] + self.h / <span class="number">24</span> * (<span class="number">55</span> * self.equs_fxy(x[i - <span class="number">1</span>], y[i - <span class="number">1</span>]) - <span class="number">59</span> * self.equs_fxy(x[i - <span class="number">2</span>], y[</span><br><span class="line">                    i - <span class="number">2</span>]) + <span class="number">37</span> * self.equs_fxy(x[i - <span class="number">3</span>], y[i - <span class="number">3</span>]) - <span class="number">9</span> * self.equs_fxy(x[i - <span class="number">4</span>], y[i - <span class="number">4</span>]))</span><br><span class="line">                y[i] = y[i - <span class="number">1</span>] + self.h / <span class="number">24</span> * (</span><br><span class="line">                        <span class="number">9</span> * temp + <span class="number">19</span> * self.equs_fxy(x[i - <span class="number">1</span>], y[i - <span class="number">1</span>]) - <span class="number">5</span> * self.equs_fxy(x[i - <span class="number">2</span>], y[</span><br><span class="line">                    i - <span class="number">2</span>]) + self.equs_fxy(x[i - <span class="number">3</span>], y[i - <span class="number">3</span>]))</span><br><span class="line">                y_t = x[i] * (<span class="number">3</span> + x[i] ** <span class="number">2</span>) / (<span class="number">3</span> * (<span class="number">1</span> + x[i] ** <span class="number">2</span>))</span><br><span class="line">                <span class="built_in">print</span>(x[i], y[i], y_t, <span class="built_in">abs</span>(y[i] - y_t))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;四阶Adams预测-校正法节点数n必须大于4！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>test_runge_kutta_adams.py:</strong> **龙格-**<strong>库塔与亚达姆斯公式测试文件。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/29 11:02 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: test_runge_kutta_adams.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> SolvingOrdinaryDifferentialEquations.Runge_Kutta_Adams <span class="keyword">import</span> RungeKutta_AdamsSolvingOrdinaryDifferentialEquations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equs_fxy</span>(<span class="params">x, y</span>):  <span class="comment"># 预测值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * x * y / (<span class="number">1</span> + x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    h = <span class="number">0.1</span></span><br><span class="line">    y0 = <span class="number">0</span></span><br><span class="line">    sol_interval = [<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">    runge_kutta_adams = RungeKutta_AdamsSolvingOrdinaryDifferentialEquations(equs_fxy, sol_interval, y0, h)</span><br><span class="line">    x, y = runge_kutta_adams._Ord4Runge_Kutta()</span><br><span class="line">    t, u = runge_kutta_adams._Ord4ModifiedAdams()</span><br><span class="line">    y_t = x * (<span class="number">3</span> + x ** <span class="number">2</span>) / (<span class="number">3</span> * (<span class="number">1</span> + x ** <span class="number">2</span>))</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    plt.scatter(x, y, label=<span class="string">&#x27;Runge_Kutta_Solution-&#x27;</span> + <span class="built_in">str</span>(h), color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    plt.scatter(t, u, label=<span class="string">&#x27;Adams_Solution-&#x27;</span> + <span class="built_in">str</span>(h), color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    plt.plot(x, y_t, label=<span class="string">&#x27;True_Solution-&#x27;</span> + <span class="built_in">str</span>(h), color=<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Runge-Kutta &amp; Adams Formula Solving Differential Equations&quot;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.savefig(<span class="string">&quot;/Users/leo/Desktop/runge_kutta_adams_01.png&quot;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    plt.plot(x, <span class="built_in">abs</span>(y - y_t), label=<span class="string">&#x27;Runge_Kutta_Error-&#x27;</span> + <span class="built_in">str</span>(h), color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">    plt.plot(x, <span class="built_in">abs</span>(u - y_t), label=<span class="string">&#x27;Adams_Error-&#x27;</span> + <span class="built_in">str</span>(h), color=<span class="string">&quot;g&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;Error Curve of Runge-Kutta &amp; Adams Formula Solving Differential Equations &quot;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.savefig(<span class="string">&quot;/Users/leo/Desktop/error_runge_kutta_adams_01.png&quot;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/RK_Res.png" alt="图3 四阶经典龙格——库塔公式" style="zoom:100%;"><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/Adm_Res.png" alt="图4 亚当姆斯预测校正公式"></p><p><strong>表1 4阶经典龙格-库塔公式预测值与精确值误差</strong></p><table><thead><tr><th align="center">xn</th><th align="center">4阶龙格-库塔公式</th><th align="center">精确值</th><th align="center">误差</th></tr></thead><tbody><tr><td align="center">0.1</td><td align="center">[0.09933993]</td><td align="center">[0.09933993]</td><td align="center">[2.05243127e-09]</td></tr><tr><td align="center">0.2</td><td align="center">[0.19487176]</td><td align="center">[0.19487179]</td><td align="center">[3.00356696e-08]</td></tr><tr><td align="center">0.3</td><td align="center">[0.28348614]</td><td align="center">[0.28348624]</td><td align="center">[9.79501109e-08]</td></tr><tr><td align="center">0.4</td><td align="center">[0.36321819]</td><td align="center">[0.36321839]</td><td align="center">[1.97433548e-07]</td></tr><tr><td align="center">0.5</td><td align="center">[0.43333303]</td><td align="center">[0.43333333]</td><td align="center">[3.06461535e-07]</td></tr><tr><td align="center">0.6</td><td align="center">[0.49411724]</td><td align="center">[0.49411765]</td><td align="center">[4.02982711e-07]</td></tr><tr><td align="center">0.7</td><td align="center">[0.54653196]</td><td align="center">[0.54653244]</td><td align="center">[4.73503049e-07]</td></tr><tr><td align="center">0.8</td><td align="center">[0.5918694]</td><td align="center">[0.59186992]</td><td align="center">[5.1434548e-07]</td></tr><tr><td align="center">0.9</td><td align="center">[0.63149118]</td><td align="center">[0.63149171]</td><td align="center">[5.28644923e-07]</td></tr><tr><td align="center">1.0</td><td align="center">[0.66666614]</td><td align="center">[0.66666667]</td><td align="center">[5.22604124e-07]</td></tr><tr><td align="center">1.1</td><td align="center">[0.6984912]</td><td align="center">[0.6984917]</td><td align="center">[5.02800333e-07]</td></tr><tr><td align="center">1.2</td><td align="center">[0.72786838]</td><td align="center">[0.72786885]</td><td align="center">[4.74818476e-07]</td></tr><tr><td align="center">1.3</td><td align="center">[0.75551381]</td><td align="center">[0.75551425]</td><td align="center">[4.42834343e-07]</td></tr><tr><td align="center">1.4</td><td align="center">[0.78198157]</td><td align="center">[0.78198198]</td><td align="center">[4.09698586e-07]</td></tr><tr><td align="center">1.5</td><td align="center">[0.80769193]</td><td align="center">[0.80769231]</td><td align="center">[3.77208521e-07]</td></tr><tr><td align="center">1.6</td><td align="center">[0.83295846]</td><td align="center">[0.8329588]</td><td align="center">[3.46401639e-07]</td></tr><tr><td align="center">1.7</td><td align="center">[0.85801168]</td><td align="center">[0.858012]</td><td align="center">[3.17803044e-07]</td></tr><tr><td align="center">1.8</td><td align="center">[0.88301858]</td><td align="center">[0.88301887]</td><td align="center">[2.91610862e-07]</td></tr><tr><td align="center">1.9</td><td align="center">[0.90809807]</td><td align="center">[0.90809834]</td><td align="center">[2.6782566e-07]</td></tr></tbody></table><p><strong>表2 亚当姆斯预测校正公式预测值与精确值误差</strong></p><table><thead><tr><th align="center">xn</th><th align="center">亚达姆斯预测校正公式</th><th align="center">精确值</th><th align="center">误差</th></tr></thead><tbody><tr><td align="center">0.4</td><td align="center">[0.79408276]</td><td align="center">[0.36321839]</td><td align="center">[0.43086437]</td></tr><tr><td align="center">0.5</td><td align="center">[0.81227136]</td><td align="center">[0.43333333]</td><td align="center">[0.37893802]</td></tr><tr><td align="center">0.6</td><td align="center">[0.83795096]</td><td align="center">[0.49411765]</td><td align="center">[0.34383331]</td></tr><tr><td align="center">0.7</td><td align="center">[0.85339412]</td><td align="center">[0.54653244]</td><td align="center">[0.30686168]</td></tr><tr><td align="center">0.8</td><td align="center">[0.86579907]</td><td align="center">[0.59186992]</td><td align="center">[0.27392915]</td></tr><tr><td align="center">0.9</td><td align="center">[0.87557522]</td><td align="center">[0.63149171]</td><td align="center">[0.24408351]</td></tr><tr><td align="center">1.0</td><td align="center">[0.8838564]</td><td align="center">[0.66666667]</td><td align="center">[0.21718973]</td></tr><tr><td align="center">1.1</td><td align="center">[0.89143105]</td><td align="center">[0.6984917]</td><td align="center">[0.19293934]</td></tr><tr><td align="center">1.2</td><td align="center">[0.89889021]</td><td align="center">[0.72786885]</td><td align="center">[0.17102136]</td></tr><tr><td align="center">1.3</td><td align="center">[0.90664655]</td><td align="center">[0.75551425]</td><td align="center">[0.1511323]</td></tr><tr><td align="center">1.4</td><td align="center">[0.91497683]</td><td align="center">[0.78198198]</td><td align="center">[0.13299485]</td></tr><tr><td align="center">1.5</td><td align="center">[0.92405599]</td><td align="center">[0.80769231]</td><td align="center">[0.11636368]</td></tr><tr><td align="center">1.6</td><td align="center">[0.93398506]</td><td align="center">[0.8329588]</td><td align="center">[0.10102626]</td></tr><tr><td align="center">1.7</td><td align="center">[0.94481281]</td><td align="center">[0.858012]</td><td align="center">[0.08680081]</td></tr><tr><td align="center">1.8</td><td align="center">[0.95655187]</td><td align="center">[0.88301887]</td><td align="center">[0.07353301]</td></tr><tr><td align="center">1.9</td><td align="center">[0.96919066]</td><td align="center">[0.90809834]</td><td align="center">[0.06109232]</td></tr></tbody></table><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/runge_kutta_adams_01.png" alt="图5 两种算法数值解和精确解曲线（h=0.1）"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/error_runge_kutta_adams_01.png" alt="图6 两种算法误差曲线（h=0.1）"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/runge_kutta_adams_001.png" alt="图7 两种算法数值解和精确解曲线（h=0.01）"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/error_runge_kutta_adams_001.png" alt="图8 两种算法误差曲线（h=0.01）"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/runge_kutta_adams_100.png" alt="图9 两种算法数值解和精确解曲线（[a, b]=[0, 10]"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9B%9B%E9%98%B6Runge-Kutta%E5%85%AC%E5%BC%8F%E4%B8%8EAdams%E9%A2%84%E6%B5%8B%E6%A0%A1%E6%AD%A3%E5%85%AC%E5%BC%8F%E6%B1%82%E8%A7%A3%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E5%88%9D%E5%80%BC%E9%97%AE%E9%A2%98/error_runge_kutta_adams_100.png" alt="图10 两种算法误差曲线（[a, b]=[0, 10]"></p><h1 id="结果分析与讨论"><a href="#结果分析与讨论" class="headerlink" title="结果分析与讨论"></a>结果分析与讨论</h1><ul><li><p>从图4、5中可以看出，四阶经典龙格——库塔公式的单步法求解常微分方程的初值相对于亚当姆斯预测校正公式的双步法精度更高，收敛性更好， 程序设计简单，计算过程稳定，但对函数f(x,y)的光滑性要求较高，且计算量大，耗费机时较多。对于四阶经典龙格——库塔公式的误差一直很小，从表1、2可看出可以稳定在10-7以内。从图6可以看出，选取不同的步长与计算区间，其误差也会有所不同。误差会随着步长的减小而降低，但对题目中所给函数求解范围大于2.3左右Adams预测校正公式的误差会持续增长，直至发散，这一点的误差也会降到最低。Adams预测校正公式步长为0.01时，在0.25附近误差大到最低。</p></li><li><p>如果问题本身不适宜采用高阶方法，比如函数f(x,y)的光滑性能不太好，或者问题本身不需要太高精度的数值结果，那么采用低阶的方法并辅以适当的步长较为合适，采用更低阶的公式或Euler预测校正公式。如果函数f(x,y)的光滑性能较好，那么采用高阶Runge-Kutta公式可以得到更为准确的计算结果。</p></li><li><p>如果问题适宜采用高阶方法求解，也希望得到高精度的数值结果，则经常采用四级四阶Runge-Kutta公式。一般采用四级四阶Runge-Kutta公式提供初始值，并应用高阶线性多步公式，如四阶Adams预测校正公式求解比较理想。对于所有高阶方法来说，通过减小步长来提高精度比较合理， 因此通常不追求使用更高阶(更高精度)的数值方法。一般而言，利用显式公式计算预测值、再利用隐式公式计算校正值无论对于高阶方法还是低阶方法，总能获得比较好的稳定性。因此实际中往往采用预测校正公式进行求解。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <strong>《数值分析》欧阳洁等。</strong></p><p>[2] <a href="http://hwiechern.blog.163.com/blog/static/1067966220085502745478/">http://hwiechern.blog.163.com/blog/static/1067966220085502745478/</a></p><p>[3] <a href="https://wenku.baidu.com/view/c0483326753231126edb6f1aff00bed5b9f373e5.html">https://wenku.baidu.com/view/c0483326753231126edb6f1aff00bed5b9f373e5.html</a></p><p>[4] <a href="https://wenku.baidu.com/view/0cceafda561810a6f524ccbff121dd36a32dc4a0.html">https://wenku.baidu.com/view/0cceafda561810a6f524ccbff121dd36a32dc4a0.html</a></p><p>[5] <a href="https://wenku.baidu.com/view/72027a10346baf1ffc4ffe4733687e21af45ffa6.html">https://wenku.baidu.com/view/72027a10346baf1ffc4ffe4733687e21af45ffa6.html</a></p><p>[6] <a href="https://www.icode9.com/content-1-1282114.html">https://www.icode9.com/content-1-1282114.html</a></p><p>[7] <a href="https://www.csdn.net/tags/MtTaEg3sOTA3MDM5LWJsb2cO0O0O.html">https://www.csdn.net/tags/MtTaEg3sOTA3MDM5LWJsb2cO0O0O.html</a></p><p>[8] <a href="https://zhuanlan.zhihu.com/p/435769998">https://zhuanlan.zhihu.com/p/435769998</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>审判与自我审判</title>
      <link href="/archives/e84af901.html"/>
      <url>/archives/e84af901.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>生而为人，我很抱歉。</p><p>——寺内寿太郎《遗书》</p></blockquote><p>人生来是孤独的，每个人的人生中都会遇到很多人，绝大部分人都有一个共同的名字——过客。<br>所谓过客的过客，就是在你的记忆中这些过客连名字都不曾有过。<br>寒假期间，元宵节前夕，爷爷突发脑梗，已是旧疾。就立刻送爷爷去医院。这种并也不是什么大病，但也不小，需要平时注意调理。年老的人发病率较高，属于老年病的一种。爷爷住院，我去看望爷爷一走进急诊病房就看到一位大婶儿迎面走来，旁边病床住着一位年纪比爷爷小的大伯，陪护人是这位大婶儿，应该是夫妻两个人。我上下打量了一番，大婶儿应该比大伯年纪要小，满头白发，穿着一身花红色的旧棉袄，个子很矮，矮到我一进门差点因为没注意到而撞到她。她看到我走到隔壁病床，就问爷爷：“这是你孙子吗？”</p><p>爷爷回答道：“对，这是亲孙子，在外地上学暑假回来过年。”爷爷讲话有点不清晰，将寒假说成了暑假。</p><p>这位大婶儿又说道：“长得真好看！”</p><p>后面我姑姑，表妹跟着进了病房，我爷爷接着介绍：“这是我女儿和我女儿的女子。”</p><p>大神热情上前，用手指着我们说到：“你好看，你也好看，你们一家都长的真好看！”</p><p>我能看得出她是真心的夸奖，绝对不像油嘴滑舌之徒那般奉承，因为她真诚老实的目光与我交汇，我看得出她眼里的真挚与善良。</p><p>过了几个小时，护士喊我们去领报告单。由于医院报告单需要手机扫码确认，我看到那个大婶儿的手机是老年机，就主动过去问是否需要帮忙，她连忙跟我说，麻烦你帮我一起扫一下码吧。</p><p>由于过年医院住院紧张，病床数量有限，所以我们只能先住急诊病房，但是急诊病房不能报销，所有费用只能自己承担。</p><p>父亲希望爷爷能安心养病，所以就找我大伯的熟人联系住院部的加床，最后联系到一位医生，是大伯关系要好的熟人，所以就“想了办法”在住院部住下了。我在办理住院手续的时候，哪位大婶儿就一直问我是不是有床位了，可以住院了，我只是回复我爷爷已经可以住上了。我不敢告诉她我们找了熟人，走了后门住进了住院部，内心一直进行自我审判，深深的歉意与愧疚之意涌上心头。我找熟人医生签字的时候，那个大婶儿也进去找医生问他们是否可以住院，医生说没有床位，他不负责他们住院的事情，让她继续等等。他们已经住了好多天了，医药费很贵却没办法报销，我能看出来大婶儿很是心急。这样让我无比自责，这位大夫也只能找到一张床，他能破例给我们加上一张床我已经很感激了，再也不敢奢望能帮帮哪位大婶儿。但是内心却是自责，自责自己没有能力帮助他们。</p><p>在这个世界上，有很多弱小者因为没有所谓“熟人”这一层关系只能花更多的钱，受到更多的排挤与冷漠，而一些相对的强者靠关系可以让自己变得更方便。社会公平正义就难以维护，曾几何时我也会知道哪条路走向公平与正义却不能迈步，自己成为破坏社会公平的刽子手却无所适从。</p><p>有人告诉我这就是成长，人生路又时候就是残酷的，看着残酷长大心才能够成熟，看到这些就自责悔恨的人是心还不够强大。如果心强大了，恻隐与善良却无处可放，心还可以称为心吗？</p>]]></content>
      
      
      <categories>
          
          <category> 读书与生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敢于重新开始</title>
      <link href="/archives/c144f20a.html"/>
      <url>/archives/c144f20a.html</url>
      
        <content type="html"><![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>2021，发生太多难以言喻之事，在此记录，仅作怀念。<br>3月迎来考研失败，打击时常都有，但以往每次，我都可以记得自己的珍贵，努力保持自信与对生活的热爱。<br>然而这次的失败，让我开始怀疑自己，怀疑自己的智商，怀疑自己的能力，怀疑自己的一切。这使得我深陷无尽的自卑的深渊之中。<br>就像是从落差感极强的峰顶跌落谷底，摔得粉身碎骨，内心曾以为自己一无是处，消极悲观注入体内，无人可以倾诉。<br>四月份开始调剂，历经坎坷，感恩海大收我，如今倍感珍惜学习机会。<br>暑假家人陪伴，稍有好转，八月来校，我已是海大一份子，青岛四年生活，这座美丽城市时不时给我最大的慰藉。<br>研一生活，感念导师，师姐教导，略有收获，已是极为庆幸。<br>十二月份，与往事断绝，情场失意。看清对方只是不舍我的关怀备至，且未有半点珍惜，遂断绝。找回迷失已久自我，幸得好导师，好师姐，好兄弟，聊以慰藉。<br>敢于将以往放下，开始新生活，珍惜眼前人。蝴蝶之所以美丽，是因为破蛹而出的一瞬，丢弃了曾经禁自己锢的牢笼。成长的一瞬，便应丢弃阻碍成长的枷锁，人生才可得以轻松洒脱。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>来此学习与之前所学大不相同，但依然是新的开端，敢于开启，不破不立，勇往直前。</p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>程序代码可以运行无数遍之后，亦可以重新开始运行，下一次就可能找到问题的关键。<br>搭建博客也是一样，不断重来，不断摸索着前进。<br>不要畏惧重新开始，重新开始不是回到原点，而是重新上升了一个层次，并且有可能跳出了死循环。<br>也许所有死结最好的解决方法，就是重启。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书与生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Fortran90的Rpstar3大气辐射传输系统源代码文档</title>
      <link href="/archives/8c1f6a98.html"/>
      <url>/archives/8c1f6a98.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文程序在Rstar7与Pstar3的基础上于2020. 3.31 创建，并更新于2020. 8. 7。 英文文件：<a href="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9F%BA%E4%BA%8EFortran90%E7%9A%84Rpstar3%E8%BE%90%E5%B0%84%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/R_Pstar3_Readme.docx">R-Pstar_Readme</a></p><p>主要开发者：Miho SEKIGUCHI、Yoshifumi Ota和Teruyuki NAKAJIMA<br>贡献者列表如下:</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9F%BA%E4%BA%8EFortran90%E7%9A%84Rpstar3%E8%BE%90%E5%B0%84%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/Contributor.png" alt="R-Pstar系统贡献者"></p><h1 id="“R-Pstar3”简介？"><a href="#“R-Pstar3”简介？" class="headerlink" title="“R-Pstar3”简介？"></a>“R-Pstar3”简介？</h1><p>“Pstar3”是用于在大气-陆地&#x2F;海洋耦合系统中模拟极化辐射场的通用软件包。”R-pstar3’是一个类似Rstar的并用于合并和集成Rstar和Pstar的Pstar包。该模拟基于离散纵坐标&#x2F;矩阵算子法在平面平行问题中的应用分为若干均匀层的大气，下伏地面或海洋表面。Pstar3还能够处理辐射传输与平面平行海洋耦合（Ota et al.，2010）。</p><p>最初的Pstar3最初是为观测温室气体而开发的日本国家环境研究所卫星（GOSAT）项目（NIES），由日本JAXA&#x2F;EORC运营。R-Pstar3包通过<a href="http://157.82.240.167/~clastr/">Open CLASTR</a>项目分发。</p><h1 id="软件包程序清单"><a href="#软件包程序清单" class="headerlink" title="软件包程序清单"></a>软件包程序清单</h1><blockquote><ul><li>README: 自述文档。</li></ul></blockquote><blockquote><ul><li>Makefile: 生成可执行文件的配置文件，可以利用此文档一键编译。</li></ul></blockquote><blockquote><ul><li>Mkinclude: Makefile中配置程序中使用的的编译器设置。</li></ul></blockquote><blockquote><ul><li>main.f90: R-pstar3软件包主程序。</li></ul></blockquote><blockquote><ul><li><p>data: R-pstar3输入参数样本文件（默认值：指向data0的符号链接）。</p><blockquote><ul><li>data0: 朗伯表面的非偏振辐射</li><li>data10: 海洋表面的非偏振辐射（海洋层&#x3D;0）</li><li>data1: 海洋表面的非偏振辐射（海洋层&#x3D;2）</li><li>data0p:  朗伯表面的偏振辐射</li><li>data10p: 海洋表面偏振辐射（海洋层&#x3D;0）</li><li>data1p: 海洋表面偏振辐射（海洋层&#x3D;2）</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><p>out_test: R-pstar3输出文件的示例，文件命名对应于data文件包：data0,10,1,0p,10p,1p–&gt;out0,10,1,0p,10p,1p。</p><p>如果你想得到同样的结果，你应该选择Frohlich和Shaw 1980并在路径LBR&#x2F;pstr4.f90文件中注释掉第528行-第529行（我看到源码中已经注释了）。</p></li></ul></blockquote><blockquote><ul><li><p>这些数据库文件是从ps3r_dbs_200329.tar.gz中提取的。这是一个数据哭的压缩包，需要解压之后将提取的文件放在项目根目录之中。</p><blockquote><ul><li><p>MLATMD: 大气剖面（廓线）文件</p></li><li><p>AERDB: Rstar7的粒子剖面（廓线）文件</p></li><li><p>PKRNL.OUT: Mie散射核心文件（增加Mie散射的角度网格）</p></li><li><p>pyphsf_vis.dat: 六边形固体冰柱数据（近红外和可见光）</p></li><li><p>pyphsf_ir.dat: 六角形固体冰柱数据（红外）</p><p>以上2个文件的字节顺序为little-endian，这些文件与极化辐射不对应。</p></li><li><p>dkrnl&#x2F;PKRNL.OUT_aspXXX: 球体散射数据</p><p>XXX表示宽高比；宽高比&#x3D;X.XX，也就是说如果文件命名为PKRNL.OUT_asp033，那么宽高比就是0.33，这些文件与非极化辐射不对应</p></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>ckd.g.ch_2_1e3_big: big endian机制的k分布文件</li><li>ckd.g.ch_2_1e3_ltl: little endian机制的k分发文件</li><li>ckd.g.ch_2_2e3_big: big endian机制的精细k分布文件</li><li>ckd.g.ch_2_2e3_ltl: little endian机制的精细k分发文件</li></ul></blockquote><h1 id="源码运行与编译"><a href="#源码运行与编译" class="headerlink" title="源码运行与编译"></a>源码运行与编译</h1><p>a、 请仔细阅读本文件。<br>b、 复制计算机目录中的所有文件并将数据库文件放在同一目录中。<br>c、 选择普通或更细的波数栅格，并复制或链接一个文件到新文件’ckd.g.ch_2’。还应指示正常（1e3）或主程序中DINTVL的更精细（2e3）网格。<br>d、 如果要计算球体粒子，选择一个球体散射数据文件，以备最佳使用并在main7.f90中修改文件名。<br>e、 在Mkinclude中修改编译器设置。用户需要指定Fortran编译器（FC）及其选项（FFLAGS和FMATH）。使用FFLAGS进行编译器优化，和用于链接LAPACK库的FMATH（见下文）。</p><blockquote><p><em>关于FMATH</em><br>Pstar4需要LAPACK和相关例行程序（<em>1）。要构建Pstar4的可执行文件，编译器选项“FMATH”必须为在Mkinclude中指定，以链接LAPACK库。示例选项<br>对于典型的编译器，可以在Mkinclude中找到。强烈建议用户准备优化的LAPACK库用于他们自己的计算机架构（</em>2），并使用“FMATH”链接它选项，因为Pstar4的计算效率在很大程度上取决于LAPACK库，尤其是在IPOL&#x3D;4的情况下。<br>（<em>1）<a href="http://www.netlib.org/lapack/">LAPACK — Linear Algebra PACKage</a><br>（</em>2）例如英特尔数学内核库或AMD核心数学库。</p><p>注：</p></blockquote><p>f、 在根目录下输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>开始编译，生成Makefile中所要求的执行文件，默认为a.out(MacOS or Linux)或者a.exe(Win)。然后找到此执行文件（在Mkinclude文件中可以设置或者修改执行文件的名称，默认为TARGET &#x3D; a.out）。<br>g、 运行执行文件，输入命令：.&#x2F;的意思是执行当前目录下的执行文件+文件名a.out</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure><p>回车之后就开始运行执行文件了。会得到一个输出文件out，其中包括计算结果。输出结果out的内容与out0文件的内容相同，如果有差异可能就是四舍五入误差的容许误差，或者计算机的精度差异。代码正常运行，具有自动双精度选项的双精度运行，fortran编译器可以更好地保持准确性，有时会出现输入&#x2F;输出错误，检查在主程序的最开始处打开语句。<br>h、 对于使用R-Pstar3的应用程序，可以更改数据或者输入参数。改变<strong>大气参数和&#x2F;或粒子光学特性</strong>，必须更改<strong>MLATMD和&#x2F;或AERDB</strong>。请参阅后面的一节。<br>当你计算多案例时，首个案例会非常慢，因为代码需要读取大文件PKRNL，所以制造连续计算，无需拆分为多个作业。<br>i、 您可能需要更改应用程序的参数设置，在这种情况下，应该更改主程序中的模块“paras”。</p><h1 id="实验参数文件：数据"><a href="#实验参数文件：数据" class="headerlink" title="实验参数文件：数据"></a>实验参数文件：数据</h1><p>主程序中的读取顺序如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> read(iui,*, <span class="keyword">iostat</span>=ierr) isol,inda,indg,imthd,ipol,nda,nds</span><br><span class="line">     <span class="keyword">if</span>(ierr/=<span class="number">0</span>) <span class="keyword">exit</span></span><br><span class="line">     read(iui,*) na0, th0(<span class="number">1</span>:na0)</span><br><span class="line">     read(iui,*) na1,th1(<span class="number">1</span>:na1)</span><br><span class="line">     read(iui,*) nfi,fi(<span class="number">1</span>:nfi)</span><br><span class="line">     read(iui,*) nw0</span><br><span class="line">     read(iui,*) rx(<span class="number">1</span>:nw0+<span class="number">1</span>)</span><br><span class="line">     read(iui,*) rf(<span class="number">1</span>:nw0)</span><br><span class="line">     read(iui,*) nw</span><br><span class="line">     read(iui,*) wl(<span class="number">1</span>:nw)</span><br><span class="line">     read(iui,*) dw(<span class="number">1</span>:nw)</span><br><span class="line">     read(iui,*) galb(<span class="number">1</span>:nw)</span><br><span class="line">     read(iui,*) matm,nlna,nlno</span><br><span class="line">     nlna1=nlna+<span class="number">1</span></span><br><span class="line"><span class="comment">! if ipbf&gt;0 then field out</span></span><br><span class="line">     read(iui,*) ipbf(<span class="number">1</span>:nlna1)</span><br><span class="line"><span class="comment">! input CO2 and ground temperature</span></span><br><span class="line">     read(iui,*) gtmp,co2ppm</span><br><span class="line">     read(iui,*) ifrh,trh</span><br><span class="line">     read(iui,*) npoly,icn,wlcn</span><br><span class="line">     <span class="keyword">do</span> i=<span class="number">1</span>,npoly</span><br><span class="line">        read(iui,*) ncomp(i),cnpt(i)</span><br><span class="line">        read(iui,*) mptc(i,<span class="number">1</span>:ncomp(i))</span><br><span class="line">        read(iui,*) vptc(i,<span class="number">1</span>:ncomp(i))</span><br><span class="line">     <span class="keyword">enddo</span></span><br><span class="line">     <span class="keyword">if</span>(nlno &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">        read(iui,*) dptw(<span class="number">1</span>:nlno)</span><br><span class="line">        read(iui,*) chla(<span class="number">1</span>:nlno)</span><br><span class="line">     <span class="keyword">endif</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重复进行其他实验:</p><p>说明：</p><blockquote><ul><li>ISOL：0为夜间<br>       1为白天</li></ul></blockquote><blockquote><ul><li>INDA：0为仅通量<br>        1为用于通量和辐射计算</li></ul></blockquote><blockquote><ul><li>INDG：0为朗伯表面<br>        1为用于海洋表面<br>          3为适用于平坦的海洋表面</li></ul></blockquote><blockquote><ul><li>IMTHD：选择通量&#x2F;强度计算模式开关。详见<a href="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9F%BA%E4%BA%8EFortran90%E7%9A%84Rpstar3%E8%BE%90%E5%B0%84%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/MatrixFormulationForTheTransferOfSolarRadiationInAPlane-ParallelScatteringAtmosphere.pdf">Nakajima和Tanaka（1988）Matrix formulation for the transfer of solar radiation in a plane-parallel scattering atmosphere</a></li></ul></blockquote><blockquote><p>对于非管理员用户，假定IMTHD&#x3D;2。<br>-1: 计算字段时不进行任何更正。<br>0: DM（Delta-M）-方法。适合通量计算。<br>1: MS（多+单）-方法。适用于辐射计算。<br>2: TMS（截断多个+单个）-方法。有利于反射辐射计算。<br>3: IMS（改进的多+单）-方法。适用于传输辐射计算。<br>（该方法不适用于多孔辐射场）<br>在使用相同的正交流值-NDA-的条件下，与NT&#x2F;DM方法相比，MS&#x2F;TMS&#x2F;IMS方法更精确。<br>在除中厚层以外的大多数情况下，TMS比MS更精确。IMS方法是计算太阳周围强度（太阳光环）的最佳方法。<br>对于极各向异性的相函数，如光学厚度较大的云，TMS将是最好的，且收敛速度比MS方法快得多。</p></blockquote><p>以下是选择IMTHD的指导表：</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E5%9F%BA%E4%BA%8EFortran90%E7%9A%84Rpstar3%E8%BE%90%E5%B0%84%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E6%BA%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/imthd.png" alt="IMTHD选择"></p><blockquote><ul><li>IPOL：斯托克斯参数的数量<br>1： 用于标量计算（忽略极化效应）<br>4： 用于矢量计算（计算I、Q、U和V）</li></ul></blockquote><blockquote><ul><li><p>NDA：半球中高斯正交点的数目，用于积分大气中辐射传输方程的最底角积分。增加该值意味着使用更多计算时间获得更准确的结果（增加NDA**2.5规则）。对计算时间敏感的用户应该通过比较NDA的几个值的结果来调整NDA。</p><p>对于通量计算，NDA&#x3D;2-4对于大多数应用来说就足够了。<br>对于辐射率计算，NDA&#x3D;6-10对于TM&#x2F;IMS方法中的大多数应用来说已经足够了。</p></li></ul></blockquote><blockquote><ul><li>NDS: 半球中用于积分海洋辐射传输方程纳迪亚尔角积分的高斯正交点的数目。</li></ul></blockquote><blockquote><ul><li>NA0: 太阳天顶角数（大于0）。</li></ul></blockquote><blockquote><ul><li>TH0（1:NA0）：太阳天顶角（度）。仅当NA0&gt;0时指定。</li></ul></blockquote><blockquote><ul><li>NA1：出现辐射的天顶角数（大于0）。</li></ul></blockquote><blockquote><ul><li>TH1（1:NA1）：出现辐射的天顶角（度）。<br>透射辐射&lt;90，反射辐射&gt;90。</li></ul></blockquote><blockquote><ul><li>NFI：方位角数。</li></ul></blockquote><blockquote><ul><li>FI（1：NFI）：天顶角（度）。<br>0表示前向散射方向。</li></ul></blockquote><blockquote><ul><li>NW0：用于计算响应函数的亚波长网格数。</li></ul></blockquote><blockquote><ul><li>RX（1：NW0+1）：DW*RX&#x3D;微米波长位移对于子小波网格。<br>-0.5&lt;&#x3D;RX&lt;&#x3D;0.5</li></ul></blockquote><blockquote><ul><li>RF（1:NW0）：辐射计组件的综合响应功能RX功能（相对单位正常）。</li></ul></blockquote><blockquote><ul><li>对于单色计算，给出NW0&#x3D;1，RX（1:2）&#x3D;0，RF&#x3D;1。</li></ul></blockquote><blockquote><ul><li>平均辐射率：<br>L&#x3D;总和（I&#x3D;1，N；辐射率（I）*射频（I））&#x2F;总和（I&#x3D;1，N；射频（I））</li></ul></blockquote><blockquote><ul><li>NWL：中心波长数。</li></ul></blockquote><blockquote><ul><li>WL：中心波长（微米）。</li></ul></blockquote><blockquote><ul><li>GALB：INDG&#x3D;0时，Lmabert表面的通量反照率。</li></ul></blockquote><blockquote><ul><li>如果INDG&#x3D;1，则海面以上10 m处的风速（m&#x2F;s）。<br>（如果u10&gt;0.01，可以进行计算。）</li></ul></blockquote><blockquote><ul><li><p>MATM：大气数（与AFGL lowtran相同（Kneizys等人，1988年））。</p><p>1： 热带，<br>2： 中纬度夏季<br>3：中纬度冬季<br>4： 高纬夏季<br>5：高纬冬季<br>6： 美国标准</p></li></ul></blockquote><blockquote><ul><li>NLNA：定义大气的子层数。</li></ul></blockquote><blockquote><ul><li>NLNO：定义海洋的子层数。</li></ul></blockquote><blockquote><ul><li>IPBF（1：NLNA+1）：定义要构造的子层的接口号大气。从上到下，即必须按照从上到下的顺序给出：<br>IPBF（1）&#x3D;50，IPBF（NLN+1）&#x3D;1。如果&gt;0，则计算辐射场；如果&lt;0，则无辐射场计算层编号在大气模型中定义MLATMD。</li></ul></blockquote><p>对于IR计算，最好有多个层以获得更高的精度。</p><p>默认值如下:</p><p>IPBF的表格：</p><table><thead><tr><th align="center">接口数量</th><th align="center">高度(km)</th><th align="center">接口数量</th><th align="center">高度(km)</th></tr></thead><tbody><tr><td align="center">50</td><td align="center">120.0</td><td align="center">25</td><td align="center">24.0</td></tr><tr><td align="center">49</td><td align="center">115.0</td><td align="center">24</td><td align="center">23.0</td></tr><tr><td align="center">48</td><td align="center">110.0</td><td align="center">23</td><td align="center">22.0</td></tr><tr><td align="center">47</td><td align="center">105.0</td><td align="center">22</td><td align="center">21.0</td></tr><tr><td align="center">46</td><td align="center">100.0</td><td align="center">21</td><td align="center">20.0</td></tr><tr><td align="center">45</td><td align="center">95.0</td><td align="center">20</td><td align="center">19.0</td></tr><tr><td align="center">44</td><td align="center">90.0</td><td align="center">19</td><td align="center">18.0</td></tr><tr><td align="center">43</td><td align="center">85.0</td><td align="center">18</td><td align="center">17.0</td></tr><tr><td align="center">42</td><td align="center">80.0</td><td align="center">17</td><td align="center">16.0</td></tr><tr><td align="center">41</td><td align="center">75.0</td><td align="center">16</td><td align="center">15.0</td></tr><tr><td align="center">40</td><td align="center">70.0</td><td align="center">15</td><td align="center">14.0</td></tr><tr><td align="center">39</td><td align="center">65.0</td><td align="center">14</td><td align="center">13.0</td></tr><tr><td align="center">38</td><td align="center">60.0</td><td align="center">13</td><td align="center">12.0</td></tr><tr><td align="center">37</td><td align="center">55.0</td><td align="center">12</td><td align="center">11.0</td></tr><tr><td align="center">36</td><td align="center">50.0</td><td align="center">11</td><td align="center">10.0</td></tr><tr><td align="center">35</td><td align="center">47.5</td><td align="center">10</td><td align="center">9.0</td></tr><tr><td align="center">34</td><td align="center">45.0</td><td align="center">9</td><td align="center">8.0</td></tr><tr><td align="center">33</td><td align="center">42.5</td><td align="center">8</td><td align="center">7.0</td></tr><tr><td align="center">32</td><td align="center">40.0</td><td align="center">7</td><td align="center">6.0</td></tr><tr><td align="center">31</td><td align="center">37.5</td><td align="center">6</td><td align="center">5.0</td></tr><tr><td align="center">30</td><td align="center">35.0</td><td align="center">5</td><td align="center">4.0</td></tr><tr><td align="center">29</td><td align="center">32.5</td><td align="center">4</td><td align="center">3.0</td></tr><tr><td align="center">28</td><td align="center">30.0</td><td align="center">3</td><td align="center">2.0</td></tr><tr><td align="center">27</td><td align="center">27.5</td><td align="center">2</td><td align="center">1.0</td></tr><tr><td align="center">26</td><td align="center">25.0</td><td align="center">1</td><td align="center">0.0</td></tr></tbody></table><blockquote><ul><li>IFRH: 0: R.H.从模型大气中使用<br>      1: R.H.使用总R.H.（TRH）</li></ul></blockquote><blockquote><ul><li>TRH: 总相对湿度（0-1）</li></ul></blockquote><blockquote><ul><li>NPOLY：粒子多分散体的数量。例如如果有水云和气溶胶，值为2。</li></ul></blockquote><blockquote><ul><li><p>ICN：如果CNPT是每个多分散体的总柱干体积，则为0。</p><p>1如果CNPT是每个多分散体的总柱体积<br>2如果CNPT是标度波长WLCN处的光学厚度<br>3如果CNPT是每个波长的光学厚度</p></li></ul></blockquote><blockquote><ul><li>WLCN：CNPT作为光学元件的缩放波长（厘米）测量厚度。</li></ul></blockquote><p>重复多分散体的数量</p><blockquote><ul><li>NCOMP：组成多分散体的粒子模型数</li></ul></blockquote><blockquote><ul><li>CNPT：ICN定义的每个多分散体的总体积<br>如果ICN&#x3D;0,1，总体积（cm3&#x2F;cm2）<br>当ICN&#x3D;2,3时，WLCN处的光学厚度</li></ul></blockquote><blockquote><ul><li>MPTC：每个多分散体的粒子型号（请参阅AERDB7一节中的更多信息）</li></ul></blockquote><blockquote><ul><li>VPTC：颗粒模型外部混合的相对干体积浓度*结束重复</li></ul></blockquote><blockquote><ul><li>DPTW：各海洋层的地质厚度【m】</li></ul></blockquote><blockquote><ul><li>叶绿素a：各海洋层的叶绿素a浓度【mg&#x2F;m3】（Bricaud等人（1995），Morel和Maritorena（2001））</li></ul></blockquote><blockquote><ul><li>###粒子模型类型###<br>1： 水<br>2： 冰<br>3： 粉尘类<br>4： 烟尘<br>5： 火山灰<br>6： 75%H2SO4<br>7： 乡村<br>8： 海上浪花<br>9： 城市<br>10：对流层<br>11：黄沙</li></ul></blockquote><blockquote><ul><li>ISPH注释<br>为了使用椭球核数据，需要选择内核数据（FN\u PKRNL1），它取决于球体的纵横比粒子和用户的计算机体系结构（小&#x2F;大端）。内核数据在模块GTPH1（src&#x2F;share&#x2F;01gtph1.f90）中指定，以及可从PKRNL中选择。OUT\u asp{033048069100144207299}in数据库&#x2F;目录。诸如“033”之类的数字表示球状颗粒（“033”表示0.33），由a&#x2F;b定义，其中a是球体长轴的半径，b是短轴的半径。椭球核数据与提供的数据相同rstar7.pack，这是一种RT代码，可从open Slactr网站获得。与rstar7数据的唯一区别是偏振分量。Pstar3除了提供P11数据外，还提供P22、P33、P44、P12和P34数据，配备rstar7。有关内核数据的详细信息，请参见rstar7的描述和Dubovik et al.（2002）的一篇论文。以下read语句用于设置用户定义相对湿度下的水汽分布。<br>读取标题<br>读取（CNG（L，1），L&#x3D;1，NL）</li></ul></blockquote><blockquote><p>使用子程序INITS5，在第L层和第M分子的CONG（L，M）数组中设置PPMV单元中的气体浓度分布。Geseus数M定义如下：</p><p>1: H2O  2: CO2   3: O3   4: N2O   5: CO   6: CH4   7: O2  8: NO   9: SO2  10: NO2  11: NH3  12: HNO3 13: OH   14: HF  15: HCL  16: HBR  17: HI   18: CLO  19: OCS  20: H2CO  21: HOCL   22: N2  23: HCN  24: CH3CL 25: H2O2  26: C2H2 27: C2H6  28: PH3</p><p>在许多应用程序中，用户可能希望在相对湿度，不以PPMV为单位。在主程序中，这种情况假设将相对湿度数据放入数据文件中，然后<br>设定模型大气PPMV浓度后，读取CONG（L，1从数据文件中获取相对湿度值。进入前主程序rstr5，该相对湿度剖面被转换通过常规WVCAL进入PPMV单元。如果你不需要这种情况，只需在主程序中删除此部分。如本例行程序所示，最好修改已装运的干管为您的应用程序编写更好的例程。自结构主程序很简单，用户可以很容易地自己制作一个。</p></blockquote><h1 id="气体参数文件：MLATMD"><a href="#气体参数文件：MLATMD" class="headerlink" title="气体参数文件：MLATMD"></a>气体参数文件：MLATMD</h1><p>数据文件MLATMD包括常规MLATM读取的Lowtran-7大气模型参数，读取顺序如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">read NM1,NM2,NATM,NL</span><br><span class="line">    NM=NM1+NM2</span><br><span class="line">    read header</span><br><span class="line">    read AIRM</span><br><span class="line">    read header</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">2</span> I=<span class="number">1</span>,NM</span><br><span class="line">      read IDM(I)</span><br><span class="line">      read NS</span><br><span class="line">      read (IDMS(I,J),J=<span class="number">1</span>,NS)</span><br><span class="line">      read (WMOL(I,J),J=<span class="number">1</span>,NS)</span><br><span class="line">  <span class="number">2</span>   read (RAMS(I,J),J=<span class="number">1</span>,NS)</span><br><span class="line">    read header</span><br><span class="line">    read (ALT(I),I=<span class="number">1</span>,NL)</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">4</span> J=<span class="number">1</span>,NATM</span><br><span class="line">      read header</span><br><span class="line">  <span class="number">4</span>   read (PMATM(I,J),I=<span class="number">1</span>,NL)</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">5</span> J=<span class="number">1</span>,NATM</span><br><span class="line">      read header</span><br><span class="line">  <span class="number">5</span>   read (TMATM(I,J),I=<span class="number">1</span>,NL)</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">6</span> K=<span class="number">1</span>,NM1</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">6</span> J=<span class="number">1</span>,NATM</span><br><span class="line">      read header</span><br><span class="line">  <span class="number">6</span>   read (AMOL(I,K,J),I=<span class="number">1</span>,NL)</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">7</span> J=<span class="number">1</span>,NATM</span><br><span class="line">      read header</span><br><span class="line">  <span class="number">7</span>   read (DNSTY(I,J),I=<span class="number">1</span>,NL)</span><br><span class="line">    <span class="keyword">DO</span> <span class="number">8</span> K=<span class="number">1</span>,NM2</span><br><span class="line">      read header</span><br><span class="line">  <span class="number">8</span>   read (TRAC(I,K),I=<span class="number">1</span>,NL)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：有关详细讨论，请参阅AFGL&#x2F;Lowtran文档</p><blockquote><ul><li>NM1：第一类分子的数目。</li></ul></blockquote><blockquote><ul><li>NM2：第二类分子的数量。</li></ul></blockquote><blockquote><ul><li>NATM：模型大气的数量。</li></ul></blockquote><blockquote><ul><li>NL：高度级别数。</li></ul></blockquote><blockquote><ul><li>AIRM：空气分子量</li></ul></blockquote><blockquote><ul><li>IDM（1:NM）：分子代码（A8）。</li></ul></blockquote><blockquote><ul><li>NS：同位素数量。</li></ul></blockquote><blockquote><ul><li>IDMS（1:nm，1:ns）：同位素代码。</li></ul></blockquote><blockquote><ul><li>WMOL（1:nm，1:ns）：同位素分子量。</li></ul></blockquote><blockquote><ul><li>RAMS（1:nm，1:ns）：同位素相对丰度。</li></ul></blockquote><blockquote><ul><li>高度（1:50）：从底部到顶部的高度（km）。</li></ul></blockquote><blockquote><ul><li>PMATM（1:nl，1:natm）：水平大气压力（hPa）。</li></ul></blockquote><blockquote><ul><li>TMATM（1:nl，1:natm）：水平的大气温度（K）。</li></ul></blockquote><blockquote><ul><li>AMOL（1:nl，1:nm1，1:natm）：第一类分子的体积混合比。</li></ul></blockquote><blockquote><ul><li>DNSTY（1:nl，1:natm）：模型的空气分子密度（1&#x2F;cm3）。</li></ul></blockquote><blockquote><ul><li>TRAC（1:NL，1:NM1）：第二类分子的体积混合比。</li></ul></blockquote><h1 id="粒子参数文件：AERDB"><a href="#粒子参数文件：AERDB" class="headerlink" title="粒子参数文件：AERDB"></a>粒子参数文件：AERDB</h1><p>数据文件AERDB包括由例程GETPAR读取的粒子模型参数，读取顺序如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">read header</span><br><span class="line">     read RMIN,RMAX</span><br><span class="line">     read NPTC</span><br><span class="line">     <span class="keyword">DO</span> <span class="number">6</span> M=<span class="number">1</span>,NPTC</span><br><span class="line">       read header</span><br><span class="line">   <span class="number">6</span>   read (CNPRF(L,M),L=<span class="number">1</span>,NL)</span><br><span class="line">     <span class="keyword">DO</span> <span class="number">1</span> M=<span class="number">1</span>,NPTC</span><br><span class="line">       read header</span><br><span class="line">       read (ISPCV(I,M),I=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">       read (RFRAC(I,M),I=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">       read RHO(M)</span><br><span class="line">       read NMODE</span><br><span class="line">       DRYAER(<span class="number">1</span>,<span class="number">2</span>,M)=NMODE</span><br><span class="line">       DRYAER(<span class="number">1</span>,<span class="number">3</span>,M)=RMIN</span><br><span class="line">       DRYAER(<span class="number">1</span>,<span class="number">4</span>,M)=RMAX</span><br><span class="line">       <span class="keyword">DO</span> <span class="number">3</span> J=<span class="number">1</span>,NMODE</span><br><span class="line">   <span class="number">3</span>     read (DRYAER(I,J,M),I=<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">       read NAW(M)</span><br><span class="line">       <span class="keyword">IF</span>(NAW(M).GT<span class="number">.0</span>) <span class="keyword">then</span></span><br><span class="line">         read header</span><br><span class="line">         <span class="keyword">DO</span> <span class="number">7</span> I=<span class="number">1</span> ,NAW(M)</span><br><span class="line">   <span class="number">7</span>       read (AWCR(I,M,K),K=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">       <span class="keyword">endif</span></span><br><span class="line">   <span class="number">1</span> <span class="keyword">continue</span></span><br><span class="line">     read header</span><br><span class="line">     read NV,NWLV</span><br><span class="line">     read (WLV(I),I=<span class="number">1</span>,NWLV)</span><br><span class="line">     <span class="keyword">DO</span> <span class="number">4</span> IV=<span class="number">1</span>,NV</span><br><span class="line">       read header</span><br><span class="line">       read (RFI(I,IV,<span class="number">1</span>),I=<span class="number">1</span>,NWLV)</span><br><span class="line">   <span class="number">4</span>   read (RFI(I,IV,<span class="number">2</span>),I=<span class="number">1</span>,NWLV)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><blockquote><ul><li>RMIN：最小粒子半径（cm）。</li></ul></blockquote><blockquote><ul><li>RMAX：最大粒子半径（cm）。</li></ul></blockquote><blockquote><ul><li>NPTC：粒子模型的数量。</li></ul></blockquote><blockquote><ul><li>AERDB中的默认型号集如下所示：</li></ul></blockquote><blockquote><ul><li>粒子模型类型<br>1： 水2：冰<br>3： 粉尘类4：烟尘<br>5： 火山灰6：75%H2SO4<br>7： 乡村8：海上浪花<br>9： 城市10：对流层<br>11： 黄沙</li></ul></blockquote><p>（（CNPRF（L，M），L&#x3D;1，NL），M&#x3D;1，NPTC）：以相对单位表示的干颗粒体积浓度的垂直剖面。<br>（摘自d’Almeida等人）<br>（（ISPCV（I，M），I&#x3D;1,3），M&#x3D;1，NPTC）：我们假设每个模型都有三种成分的内部混合物。ISPCV定义了混合物的基本材料（1-9）。</p><blockquote><ul><li>基础材料（无生长机制）<br>1： 水2：冰<br>3： 粉尘4：水溶性<br>5： 海盐6：烟尘<br>7： 火山灰8：75%H2SO4<br>9： 黄沙</li></ul></blockquote><blockquote><p>（（RFRAC（I，M），I&#x3D;1,3），M&#x3D;1，NPTC）：RFRAC定义混合物的干组分体积分数。<br>（ρ（M），M&#x3D;1，NPTC）：干混合物的颗粒密度（g&#x2F;cm3）。<br>（（DRYAER（I，J，M），I&#x3D;2,6，J&#x3D;1，NMODE），M&#x3D;1，NPTC）：卷大小分布（dV&#x2F;dln r）的参数包。<br>其中NMODE是大小分布的模式数。<br>此参数包用于例程VLSPC2定义卷参数包PR的大小分布。</p></blockquote><blockquote><p>PR（1,1）&#x3D;r粒子半径（cm）<br>PR（1,2）&#x3D;模半径的NMODE数<br>PR（1,3）&#x3D;rmin最小粒子半径（cm）<br>PR（1,4）&#x3D;rmax最大粒子半径（cm）<br>对于每个第j个模式（&lt;&#x3D;4）<br>PR（2，j）：模式的功能类型（ITP）。<br>ITP&#x3D;1：幂律<br>PR（3，j）&#x3D;C，PR（4，j）&#x3D;R0，PR（5，j）&#x3D;P<br>vj&#x3D;C<em>（R&#x2F;R0）**（4-P），如果R&gt;R0；&#x3D;C</em>（R&#x2F;R0）</p></blockquote><blockquote><p><strong>4如果R&lt;R0<br>ITP&#x3D;2：对数正常<br>PR（3，j）&#x3D;C，PR（4，j）&#x3D;S，PR（5，j）&#x3D;RM<br>vj&#x3D;C*exp（（ln（R&#x2F;RM）&#x2F;ln（S））</strong>2&#x2F;2）<br>ITP&#x3D;3：修正伽马射线<br>PR（3，j）&#x3D;C，PR（4，j）&#x3D;α，PR（5，j）&#x3D;β，PR（6，j）&#x3D;γ<br>vj&#x3D;C<em>（R1）**（阿尔法+4）经验（-β</em>R1*<em>γ），其中R1&#x3D;R</em>1.0E4<br>（NAW（M），M&#x3D;1，NPTC）：定义颗粒生长的相对湿度数。如果为0，则无增长。<br>（（AWCR（I，M，K），K&#x3D;1,3，I&#x3D;1，NAW（M）），M&#x3D;1，NPTC）：Shettle&amp;Fenn的生长参数（AW、CAW、RMMD）</p></blockquote><blockquote><p>AW水活性解释RMMD的CAW系数。</p></blockquote><blockquote><p>RMMD Hanel的吸水率数据。</p></blockquote><blockquote><p>NV：基本材料的数量。</p></blockquote><blockquote><p>NWLV：定义折射率的波长。</p></blockquote><blockquote><p>（WLV（I），I&#x3D;1，NWLV）：波长，单位为微米。<br>（（RFI（I，IV，1），I&#x3D;1，NWLV），IV&#x3D;1，NV）<br>（（RFI（I，IV，2），I&#x3D;1，NWLV），IV&#x3D;1，NV）：粒子的真实和吸收指数（Mr，Mi）复折射率&#x3D;Mr-i Mi。</p></blockquote><h1 id="分层设计"><a href="#分层设计" class="headerlink" title="分层设计"></a>分层设计</h1><p>rstar6b采用了三种垂直分层系统。</p><blockquote><ul><li>（1） 分层以定义大气模型。默认为50层layerign公司。</li></ul></blockquote><blockquote><ul><li>（2） 分层定义用于辐射传输计算的层系统。可以通过在（1）中的50个层中设置IPBF来设置此分层。</li></ul></blockquote><blockquote><ul><li>（3） 如果IPBF&gt;0，则rstar6b将计算通量和强度（如果设置INDA）。</li></ul></blockquote><blockquote><p>采用这种相当复杂的分层策略来实现rstar6b在许多应用中的最高效率。一些用户想要计算许多角度方向，而其他一些用户希望<br>设置多个图层。在这些情况下，计算机内存可能会不足如果rstar6b必须记住所有计算值。例如，数组强度的AI0是一个四维数组。对于这些情况，高级用户可以通过调整这些分层来调整最大内存效率保存计算机内存。有关调整方式，请参阅’参数调整’ 。</p></blockquote><h1 id="主程序结构"><a href="#主程序结构" class="headerlink" title="主程序结构"></a>主程序结构</h1><p>主例程RSTR5需要许多输入数据才能运行。这些数据是读取三个数据文件：data、MLATMD、AERDB和KRNL。退出。设置数据的步骤<br>我们准备了一个数据初始化例程INITS5。</p><blockquote><ul><li>主程序结构如下：<br>（1） 从数据中读取数据<br>（2） 初始化5b<br>（3） pstr4<br>（4） 将结果输出到out</li></ul></blockquote><blockquote><ul><li>用户有两种方法来输入参数，而不是默认值<br>参数：<br>（a） 更改数据文件中的参数。<br>（b） 更换步骤（2）和（3）之间的参数。<br>方法（b）将是暂时更改参数的更简单方法，而方法（a）将是将模型设置为默认值的更好方法参数。</li></ul></blockquote><blockquote><ul><li>主程序RSTR6的输入参数如下：<br>初始化1：初始化例程<br>0：跳过波长独立部分<br>内核文件的IUK设备号<br>INDG-1：无地面<br>0：Lambert曲面<br>1： 初始化的海洋表面<br>2： 无初始化的海面<br>当INDG&gt;0且IMTHD&gt;0时，则进行单次散射校正用于海洋表面反射<br>3： 带初始化的平坦海面<br>4： 无初始化的平坦海面<br>INDA 0：通量<br>1： 通量和辐射<br>IMTHD-1:NT，0:DMS-强度&#x2F;通量法<br>1： MS，2:TMS，3:IMS-强度法。<br>当INDG&gt;0且IMTHD&gt;0时，则进行单次散射校正用于海洋表面反射<br>IMS方法不能应用于IPOL&#x3D;4。<br>ISOL 0：夜间<br>1： 白天<br>NDA：半球中的流数<br>NA0：太阳入射次数<br>TH0（NA0）: 太阳天顶角（0-90度）<br>NA1: 球体中出现的最底角数<br>TH1（NA1）: 紧急最底角（0-90：向下；90-180：向上）NFI方位角数<br>FI（NFI）: 方位角（度）（0方向&#x3D;前向散射）<br>WL: 中心波长（微米）<br>DW: 缩放波长RX的DW缩放因子，单色计算取0<br>NW0： 用于计算响应函数的亚波长网格数<br>RX（NW0）DW*RX&#x3D;亚波长网格的波长位移（微米）-0.5&lt;&#x3D;RX&lt;&#x3D;0.5<br>radiomter的RF（NW0）集成响应功能作为RX的功能（相对单位正常）。<br>对于单色计算，给出NW0&#x3D;1、RX&#x3D;0、RF&#x3D;1。<br>平均辐射率：<br>L&#x3D;总和（I&#x3D;1，N；辐射率（I）*射频（I））&#x2F;总和（I&#x3D;1，N；射频（I））<br>如果INDG&#x3D;0，GALB地面反照率<br>如果INDG&gt;0，则为U10（米&#x2F;秒）<br>ICN 0，1：CNPT为体积<br>2，3:CNPT是WLCN处的光学厚度<br>ICN&#x3D;2，3的WLCN缩放波长<br>NPOLY多分散体数<br>CNPT（NPOLY）总体积（ICN&#x3D;0,1）或光学厚度（ICN&#x3D;2,3）<br>对于每个多分散体。<br>NL定义模型大气的大气层数<br>层间界面高度（km），从下到上<br>各层界面处的PRS（NL）压力（mb）<br>各层界面的TMP（NL）温度（K）<br>NMOL气体数<br>CNG（NL，NMOL）气体浓度（ppmv）<br>CNP（NL，NPOLY）干体积浓度曲线（相对单位）<br>ISPCVP（3，NPOLY）3压缩机基本材料。内部混合物（1-8）<br>RFRACP（3，NPOLY）干混合物的干体积分数<br>ROP（NPOLY）颗粒相对于水的密度<br>干混料的DRYAP（6,4，KPOLY）dV&#x2F;dlnr参数<br>见VLSPC2<br>C值（体积谱系数）是相对的<br>AW的NAWP（NPOLY）编号<br>AWCRP R（NAW，NPOLY，3）1：AW水活性（见Shettle和Fenn。）<br>2： 解释RMMD的CAW系数<br>3： RMMD RMMD<br>基本物种的NV数量（1-8）<br>折射率表的NWLV波长数<br>基波折射率的WLV（NWLV）波长<br>材料（微米）<br>RFI（NWLV，NV，2）基本材料的折射率（mr，mi）<br>&#x3D;mr-i mi<br>具有对数规则波长间隔<br>NLN用于辐射传输的大气层数。<br>IPBF（NLN+1）接口编号，用于定义要构造的子层<br>MLATM中的传输气氛。<br>必须按照从上到下的顺序给出：<br>IPBF（1）&#x3D;50，IPBF（NLN+1）&#x3D;1<br>如果&gt;0，则计算辐射场<br>如果&lt;0，则无辐射场计算</li></ul></blockquote><h1 id="来自R-Pstar3的输出"><a href="#来自R-Pstar3的输出" class="headerlink" title="来自R-Pstar3的输出"></a>来自R-Pstar3的输出</h1><blockquote><ul><li>THK0（NLN，10）</li></ul><p>（L，1）：总光学厚度（从大气顶层到地面）<br>（L，2）：粒子光学厚度<br>（L，3）：瑞利光学厚度<br>（L，4）：单次散射反照率</p></blockquote><blockquote><ul><li><p>太阳入射辐照度（W&#x2F;m2&#x2F;微米）<br>FLXD0（KNA0，KNTAU）： 向下通量（W&#x2F;m2&#x2F;微米）<br>IPBF&gt;0时</p><p>FLXD00（KNA0，KNTAU）:直接入射通量（W&#x2F;m2&#x2F;微米）<br>IPBF&gt;0时</p><p>FLXU0（KNA0，KNTAU）:向上通量（W&#x2F;m2&#x2F;微米）<br>IPBF&gt;0时</p><p>AI0（KNA1U、KNA0、KNFI、KNTAU、1）<br>辐射率:（W&#x2F;m2&#x2F;微米&#x2F;str）<br>IPBF&gt;0时</p></li></ul></blockquote><blockquote><ul><li>PL:（KNA1U、KNA0、KNFI、KNTAU）<br>偏振度&#x3D;sqrt（Q<strong>2+U</strong>2+V**2）&#x2F;I</li></ul></blockquote><h1 id="调整参数大小"><a href="#调整参数大小" class="headerlink" title="调整参数大小"></a>调整参数大小</h1><blockquote><ul><li>您可能需要更改应用程序的参数设置。<br>参数的含义如下：<br>KNA0：最大太阳入射次数。<br>KNA1U：球体中的最大出射角数。<br>KNFI：最大方位角数。<br>KNW0：最大接收数。<br>KNW：最大波长数。<br>KNLN：辐射传输计算的最大层数。它应该等于或小于49。<br>KNTAU：辐射场所在层界面的最大数量计算它应等于或小于KNLN。<br>以下参数调整需要详细了解rstar6b编码,不建议普通用户更改。<br>KNDM：辐射传输的最大流数。<br>KNL：模型大气水平的最大数量（一般用户不应更改此设置）<br>KNM0：最大GESE数。<br>KPOLY：辐射传输的最大粒子多色散数。<br>KAW：水活动的最大数量。<br>KWLV：定义折射率的最大波长数<br>基本材料。<br>KNV：粒子基本材料的最大数量。<br>KLGN1：相位函数勒让德展开的最大阶数+1<br>在IMS方法中。<br>kptc：粒子类型的最大数量<br>kp：用于吸收的压力格栅数量（与ckd.g\U ch2相关）<br>kt：用于吸收的温度网格数（与ckd.g\U ch2相关）<br>kmol：吸收气体种类数（与ckd、g\U ch2相关）<br>knang：散射角网格数（与KRNL.OUT、pyphsf、dkrnl相关）<br>kplk1：多项式拟合普朗克函数的最大阶数<br>kww：气体吸收的最大波数积分数<br>kch：k分布的积分点数（与ckd.g\U ch2相关）<br>kintvl：KRNL的最大大小参数网格数。外出<br>kpol：最大极化数（&#x3D;1表示rstar）<br>krvis:pyphsf\u vis的波长网格数<br>krir:pyphsf\u ir的波长网格数<br>kintvl\U du：dkrnl的尺寸参数网格数<br>knm：最大气体种类数</li></ul></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><ul><li>此包是从Rstar7 ocean修改而来的，因此存在一些差异来自下面列出的原始Pstar3包。<br>*LBL计算部分不包含此包。<br>*IMS方法不适用于极化辐射场。<br>*太阳光谱仅包含2个（将更新）。<br>*平坦的海面对于蒸发辐射场来说是不好的。<br>（可能有一些未知的bug…）</li></ul></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]d’Almeida, G. A., P. Koepke, and E. P. Shettle, 1991: Atmospheric aerosols.</p><p> Global climatology and radiative characteristics. A. Deepak Publishing.</p><p>[2]Dubovik, O., B. N. Holben, T. Lapyonok, A. Sinyuk, M. I. Mishchenko, P. Yang,</p><p> and I. Slutsker 2002: Non-spherical aerosol retrieval method employing </p><p> light scattering by spheroids, Geophys. Res. Lett., 29(10), 1415, </p><p> doi:10.1029&#x2F;2001GL014506.</p><p>[3]Hanel, G., 1976: The properties of atmospheric aerosol particles as functions</p><p> of the relative humidity as a thermodynamic equillibrium with the surrounding</p><p> moist air. Advances in Geophys., 19, 73-188.</p><p>[4]Kneizys, F. X., E. P. Shettle, L. W. Abreu, J. H. Chetwynd, G. P. Anderson,</p><p> W. O. Gallery, J. E. A. Selby, and S. A. Clough, 1988: Users Guide to</p><p> LOWTRAN 7. AFGL-TR-88-0177.</p><p>[5]Nakajima, T., and M. Tanaka, 1986: Matrix formulations for the transfer</p><p> of solar radiation in a plane-parallel scattering atmosphere. J.</p><p> Quant. Spectrosc. Radiat. Transfer, 35, 13-21.</p><p>[6]Nakajima, T., and M. Tanaka, 1988: Algorithms for radiative intensity</p><p> calculations in moderately thick atmospheres using a truncation</p><p> approximation. J. Quant. Spectrosc. Radiat. Transfer , 40, 51-69.</p><p>[7]Nakajima, T., M. Tsukamoto, Y. Tsushima, A. Numaguti, and T. Kimura, 2000: </p><p> Modeling of the radiative process in an atmospheric general circulation model.</p><p> Appl. Opt., 39, 4869-4878.</p><p>[8]Ota, Y., A. Higurashi, T. Nakajima and T. Yokota, 2010: Matrix formulations</p><p> of radiative transfer including the polarization effect in a coupled</p><p> atmosphere-ocean system, J. Quant. Spectrosc. Radiat. Transfer,</p><p> 111, 878-894, doi:10.1016&#x2F;j.jqsrt.2009.11.021.</p><p>[9]Sekiguchi, M., and T. Nakaima, 2008: A study of the absorption process and</p><p> its computational optimization in an atmospheric general circulation model.</p><p> J. Quant. Spectrosc. Radiat. Transfer, 109, 2779-2793,</p><p> doi:10.1016&#x2F;j.jqsrt.2008.07.013.</p><p>[10]Shettle, E. P., and R. W. Fenn, 1979: Models for the aerosols of the lower</p><p> atmosphere and the effects of humidity variations on their optical</p><p> properties. AFGL-TR-79-0214.</p><p>[11]Yang, P., K. N. Liou, K. Wyser, and D. Mitchell 2000: Parameterization of </p><p> the scattering and absorption properties of individual ice crystals, </p><p> J. Geophys. Res., 105(D4), 4699–4718, doi:10.1029&#x2F;1999JD900755.</p><p>[12]Yang, P., H. Wei, H.-L. Huang, B. A. Baum, Y. X. Hu, G. W. Kattawar, </p><p> M. I. Mishchenko, and Q. Fu, 2005: Scattering and absorption property </p><p> database for nonspherical ice particles in the near- through far-infrared</p><p> spectral region Appl. Opt. 44, 5512-5523.</p><h1 id="出资者"><a href="#出资者" class="headerlink" title="出资者"></a>出资者</h1><blockquote><ul><li>Higurashi，Akiko（海面）<br>国家环境研究所<br>电话：+81-29-850-2423；传真：+81-29-850-2960<br>电子邮件：<a href="mailto:&#104;&#97;&#107;&#x69;&#107;&#x6f;&#x40;&#x6e;&#105;&#101;&#x73;&#x2e;&#103;&#111;&#46;&#x6a;&#x70;">&#104;&#97;&#107;&#x69;&#107;&#x6f;&#x40;&#x6e;&#105;&#101;&#x73;&#x2e;&#103;&#111;&#46;&#x6a;&#x70;</a></li></ul></blockquote><blockquote><ul><li>中岛，Teruyuki（辐射传输）<br>国家环境研究所<br>电子邮件：<a href="mailto:&#116;&#101;&#114;&#114;&#x79;&#x2d;&#x6e;&#x6b;&#106;&#64;&#x6e;&#x69;&#102;&#116;&#x79;&#x2e;&#99;&#x6f;&#109;">&#116;&#101;&#114;&#114;&#x79;&#x2d;&#x6e;&#x6b;&#106;&#64;&#x6e;&#x69;&#102;&#116;&#x79;&#x2e;&#99;&#x6f;&#109;</a></li></ul></blockquote><blockquote><ul><li>Ota，Yoshifumi（海洋辐射传输）<br>日本气象厅<br>电子邮件：<a href="mailto:&#x6f;&#x74;&#97;&#121;&#111;&#115;&#x68;&#x69;&#x40;&#109;&#101;&#x74;&#46;&#x6b;&#105;&#115;&#104;&#x6f;&#x75;&#x2e;&#103;&#111;&#x2e;&#106;&#x70;">&#x6f;&#x74;&#97;&#121;&#111;&#115;&#x68;&#x69;&#x40;&#109;&#101;&#x74;&#46;&#x6b;&#105;&#115;&#104;&#x6f;&#x75;&#x2e;&#103;&#111;&#x2e;&#106;&#x70;</a></li></ul></blockquote><blockquote><ul><li>Sekiguchi，Miho（气体吸收模型和辐射传输）<br>东京海洋科技大学<br>电话和传真：+81-3-5245-7463<br>电子邮件：<a href="mailto:&#x6d;&#x69;&#x68;&#111;&#64;&#107;&#97;&#105;&#x79;&#x6f;&#x64;&#97;&#x69;&#46;&#97;&#x63;&#46;&#x6a;&#112;">&#x6d;&#x69;&#x68;&#111;&#64;&#107;&#97;&#105;&#x79;&#x6f;&#x64;&#97;&#x69;&#46;&#97;&#x63;&#46;&#x6a;&#112;</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辐射传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>惊人的美</title>
      <link href="/archives/49977e84.html"/>
      <url>/archives/49977e84.html</url>
      
        <content type="html"><![CDATA[<ul><li>世界上最美的东西并非</li><li>由粒子构成。它是那些</li><li>目睹自己世界崩塌的人身上的力量，</li><li>他们挚爱过的一切被碾成千万碎片。</li><li>然而每天早晨，他们醒来重建</li><li>他们的生活，从头再来。哀悼所失</li><li>平静而沉默。我从未见过</li><li>比这更惊人的美。<br>——努尔·乌纳哈 王亚鸽译《昨日我是月亮》</li></ul><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/lastnightmoon.jpeg" alt="昨日我是月亮"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯——勒让德求积公式与复化高斯型求积公式(等距节点)误差分析</title>
      <link href="/archives/a8ccf4cb.html"/>
      <url>/archives/a8ccf4cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>试建立8个节点的Gauss-Legendre求积公式，要求数值求积公式中的Gauss点以及求积系数都具有8位有效数字；用所建立的Gauss型求积公式计算积分</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F1.png"></p><p>的近似值，并用四等分区间的复化两点Gauss型求积公式计算该积分的近似值，对二者的精度进行比较，并解释其原因。（提示：用非线性方程迭代解法求得Gauss 点，求积系数根据插值型求积公式的系数计算，具体的积分值可以用数值方法求得)。</p><h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><h2 id="高斯——勒让德求积公式"><a href="#高斯——勒让德求积公式" class="headerlink" title="高斯——勒让德求积公式"></a>高斯——勒让德求积公式</h2><p>插值型求积公式任意给定n + 1个节点，至少有 n 次代数精度。 牛顿-柯特斯公式是等距节点的插值求积公式，当 n 为 偶数时，有n + 1次代数精度。插值求积公式中有n + 1个节点，n + 1个求积系数，共有2n + 2个未知参数，适当选取这些参数可使求积公式具有2n + 1次代数精度，这时就构成了高斯型求积公式。高斯型求积公式就是最高次代数精度的求积公式。高斯公式不局限与等步长分区域，意思是不用二分的方法直接划分区域，在简单的计算下就可以得到高精度的积分式子。插值型求积公式的节点a &lt; x0 &lt; x1 &lt; … &lt; xn &lt; b是高斯点的充分必要条件是以这些节点为零点的多项式。与任何次数不超过n的多项式P（x）带权正交，同时由于其系数都大于0，所以我们也可以得到该求积公式是收敛的。对于勒让德求积公式，就是说我们取权函数P（x）&#x3D;1，同时区间为[-1, 1]，所以勒让德多项式的零点就是我们的求积的高斯点。使插值求积公式有2n+1次代数精度的节点xi,i&#x3D;0,1,…,n称为高斯点，该插值求积公式称为高斯型求积公式，简称高斯公式。高斯点的确定原则上可以根据它们满足的代数精度要求、通过求解非线性方程组得出。对勒让德多项式取其零点作为求积节点，即可构造出高斯-勒让德(Gauss-Legendre)公式，也简称高斯公式。</p><h2 id="复化高斯公式"><a href="#复化高斯公式" class="headerlink" title="复化高斯公式"></a>复化高斯公式</h2><p>将求积区间[a，b]分为 n 等分：n&#x3D;(b-a)&#x2F;h上使用低阶高斯公式(如一阶中矩形公式):<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E5%A4%8D%E5%8C%96%E4%B8%A4%E7%82%B9%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F.png" alt="复化两点高斯型求积公式"><br>高斯公式的值随节点数目的增加而收敛到准确积分值。</p><blockquote><p>优点:</p></blockquote><ul><li><p>收敛、稳定；</p></li><li><p>计算量小，代数精度高。</p></li></ul><blockquote><p> 缺点：</p></blockquote><ul><li><p>高斯点难求（即多项式的根难求）；</p></li><li><p>高斯点是无理数，求积系数也是无理数。</p></li></ul><blockquote><p> 使用情况：</p></blockquote><ul><li><p>f(x) 赋值量大；</p></li><li><p>计算的积分多。</p></li></ul><h1 id="程序框图"><a href="#程序框图" class="headerlink" title="程序框图"></a>程序框图</h1><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/gausslegendre.png" alt="高斯——勒让德求积公式"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/compositegausspro.png" alt="复化高斯型求积公式"></p><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p>本次编程采用Python的面向对象方法进行编写，其中对算法的初步理解以及求解方程的根的数值方法是本程序的难点所在。<br>利用所编程序，确定并计算题目中所给积分的数值解:<br>以下将用Python进行编程实验，分别利用高斯——勒让德求积公式与复化两点高斯型求积公式对积分要求积分进行求解，最后进行结果分析与讨论。<br>Python代码详解及运行结果如下：</p><h2 id="代码详解："><a href="#代码详解：" class="headerlink" title="代码详解："></a>代码详解：</h2><blockquote><p>gauss_legendre_int.py: 高斯——勒让德求积公式文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/13 4:05 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: gauss_legendre_int.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GaussLegendreIntegration</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    高斯——勒让德求积公式，核心部分求解零点与系数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, int_fun, int_interval, zeros_num=<span class="number">10</span></span>):</span><br><span class="line">        self.int_fun = int_fun  <span class="comment"># 被积函数，符号定义</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(int_interval) == <span class="number">2</span>:</span><br><span class="line">            self.a, self.b = int_interval[<span class="number">0</span>], int_interval[<span class="number">1</span>]  <span class="comment"># 被积区间</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;积分区间参数设置不规范，应为[a,b].&quot;</span>)</span><br><span class="line">        self.n = <span class="built_in">int</span>(zeros_num)  <span class="comment"># 正交多项式的零点数</span></span><br><span class="line">        self.zeros_points = <span class="literal">None</span>  <span class="comment"># 勒让德高斯零点</span></span><br><span class="line">        self.int_value = <span class="literal">None</span>  <span class="comment"># 积分值结果</span></span><br><span class="line">        self.A_k = <span class="literal">None</span>  <span class="comment"># 求积系数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_int</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        高斯——勒让德求积公式</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._cal_Ak_coef_()  <span class="comment"># 求解求积系数Ak与零点</span></span><br><span class="line">        fun_val = self.int_fun(self.zeros_points)  <span class="comment"># 零点函数值</span></span><br><span class="line">        self.int_value = np.dot(self.A_k, fun_val)  <span class="comment"># 插值型求积公式</span></span><br><span class="line">        <span class="keyword">return</span> self.int_value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cal_gauss_zeros_points_</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算高斯零点</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        t = sympy.Symbol(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">        <span class="comment"># 勒让德多项式构造</span></span><br><span class="line">        p_n = (t ** <span class="number">2</span> - <span class="number">1</span>) ** self.n / (math.factorial(self.n) * <span class="number">2</span> ** self.n)</span><br><span class="line">        diff_p_n = sympy.diff(p_n, t, self.n)  <span class="comment"># 多项式的n阶导数</span></span><br><span class="line">        <span class="comment"># print(diff_p_n)</span></span><br><span class="line">        <span class="comment"># 求解高斯——勒让德多项式的全部零点</span></span><br><span class="line">        self.zeros_points = np.asarray(sympy.solve(diff_p_n, t), dtype=np.float_)</span><br><span class="line">        <span class="comment"># print(&quot;高斯点:&quot;, self.zeros_points, sep=&quot;\n&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> diff_p_n, t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cal_Ak_coef_</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算Ak系数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        diff_p_n, t = self._cal_gauss_zeros_points_()  <span class="comment"># 求解高斯零点，传递函数和符号参数</span></span><br><span class="line">        Ak_poly = sympy.lambdify(t, <span class="number">2</span> / ((<span class="number">1</span> - t ** <span class="number">2</span>) * (diff_p_n.diff(t, <span class="number">1</span>) ** <span class="number">2</span>)))</span><br><span class="line">        self.A_k = Ak_poly(self.zeros_points)  <span class="comment"># 求解求积系数Ak</span></span><br><span class="line">        <span class="comment"># 区间转换，[a, b] --&gt; [-1, 1]</span></span><br><span class="line">        self.A_k = self.A_k * (self.b - self.a) / <span class="number">2</span></span><br><span class="line">        self.zeros_points = (self.b - self.a) / <span class="number">2</span> * self.zeros_points + (self.a + self.b) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># print(&quot;高斯点:&quot;, self.zeros_points, sep=&quot;\n&quot;)</span></span><br><span class="line">        <span class="comment"># print(&quot;求积系数:&quot;, self.A_k, sep=&quot;\n&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>test_gauss_legendre.py: 高斯——勒让德求积公式测试文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/13 4:57 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: test_gauss_legendre.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> NumericalIntegration.gauss_legendre_int <span class="keyword">import</span> GaussLegendreIntegration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义积分的被积函数</span></span><br><span class="line"><span class="string">    :param x:自变量</span></span><br><span class="line"><span class="string">    :return:被积函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(x) * np.exp(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    gauss_zeros_num = np.arange(<span class="number">8</span>, <span class="number">20</span>, <span class="number">1</span>)</span><br><span class="line">    int_accurate = -<span class="number">0.5</span> * (np.exp(np.pi) + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;精确值:&quot;</span>, int_accurate)</span><br><span class="line">    precision = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> gauss_zeros_num:</span><br><span class="line">        legendre = GaussLegendreIntegration(fun, [<span class="number">0</span>, np.pi], zeros_num=num)</span><br><span class="line">        int_value = legendre.cal_int()</span><br><span class="line">        precision.append(int_accurate - int_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;num:%d,积分值:%.15f,误差:%.15e&quot;</span> % (num, int_value, precision[-<span class="number">1</span>]))  <span class="comment"># append list中最后一个值用precision[-1]</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&quot;Gauss-Legendre Quadrature Formula Error Curve&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">15</span>&#125;)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;The Number of Gauss Zero-Points&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">12</span>&#125;)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;Error&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">12</span>&#125;)</span><br><span class="line">    plt.plot(gauss_zeros_num, precision, <span class="string">&#x27;ro-&#x27;</span>)</span><br><span class="line">    plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;/Users/leo/Desktop/Gauss-Legendre.png&quot;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># legendre._cal_gauss_zeros_points_()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>composite_2points_gauss_legendre.py:复化两点高斯型求积公式文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/15 5:11 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: composite_2points_gauss_legendre.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompositeGaussLegendreIntegration</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    复化两点高斯——勒让德求积公式，等距节点数自定义</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, int_fun, int_interval, interval_num=<span class="number">4</span></span>):</span><br><span class="line">        self.int_fun = int_fun  <span class="comment"># 被积函数，符号定义</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(int_interval) == <span class="number">2</span>:</span><br><span class="line">            self.a, self.b = int_interval[<span class="number">0</span>], int_interval[<span class="number">1</span>]  <span class="comment"># 被积区间</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;积分区间参数设置不规范，应为[a, b].&quot;</span>)</span><br><span class="line">        self.interval_num = interval_num</span><br><span class="line">        self.int_value = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_int</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        复化两点高斯——勒让德求积公式</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        fun_value = <span class="number">0</span>  <span class="comment"># 初始化函数值</span></span><br><span class="line">        interval_len = (self.b - self.a) / self.interval_num</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(self.interval_num - <span class="number">1</span>):</span><br><span class="line">            fun_value += self.int_fun(self.a + (k + <span class="number">1</span> / <span class="number">2</span>) * interval_len)</span><br><span class="line">        self.int_value = interval_len * fun_value</span><br><span class="line">        <span class="keyword">return</span> self.int_value</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>test_composite_2points_gauss_legendre.py:复化两点高斯型求积公式测试文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/5/15 5:56 下午</span></span><br><span class="line"><span class="comment"># @Author  : Leo</span></span><br><span class="line"><span class="comment"># @FileName: test_composite_2points_gauss_legendre.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://guojxblog.cn</span></span><br><span class="line"><span class="comment"># @GitHub  ：https://github.com/guojx0820</span></span><br><span class="line"><span class="comment"># @Email   ：guojiaxiang0820@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> symbol</span><br><span class="line"><span class="keyword">from</span> NumericalIntegration.composite_2points_gauss_legendre <span class="keyword">import</span> CompositeGaussLegendreIntegration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义积分被积函数</span></span><br><span class="line"><span class="string">    :param x: 自由变量</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> np.cos(x) * np.exp(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    interval_num = np.arange(<span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">100000</span>)</span><br><span class="line">    int_accurate = -<span class="number">0.5</span> * (np.exp(np.pi) + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;精确解:&quot;</span>, int_accurate)</span><br><span class="line">    precision = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> interval_num:</span><br><span class="line">        legendre = CompositeGaussLegendreIntegration(fun, [<span class="number">0</span>, np.pi], interval_num=num)</span><br><span class="line">        int_value = legendre.cal_int()</span><br><span class="line">        precision.append(int_accurate - int_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;num=%d,积分值:%.15f,误差:%.15e&quot;</span> % (num, int_value, precision[-<span class="number">1</span>]))  <span class="comment"># append list中最后一个值用precision[-1]</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&quot;Composite Gauss Quadrature Formula Error Curve&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">16</span>&#125;)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;The Number of Integral Intervals&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">12</span>&#125;)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;Error&quot;</span>, fontdict=&#123;<span class="string">&quot;fontsize&quot;</span>: <span class="number">12</span>&#125;)</span><br><span class="line">    plt.plot(interval_num, precision, <span class="string">&#x27;ro-&#x27;</span>)</span><br><span class="line">    plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, color=<span class="string">&#x27;b&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;/Users/leo/Desktop/CompositeGauss.png&quot;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E9%AB%98%E6%96%AF%E7%82%B9.png" alt="高斯——勒让德求积公式高斯点计算结果"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E6%B1%82%E7%A7%AF%E7%B3%BB%E6%95%B0.png" alt="高斯——勒让德求积公式求积系数计算结果"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%8F%8A%E8%AF%AF%E5%B7%AE.png" alt="高斯——勒让德求积公式精确值与数值解及误差"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/Gauss-Legendre.png" alt="高斯——勒让德求积公式误差曲线"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/%E6%95%B0%E5%80%BC%E8%A7%A3%E5%8F%8A%E8%AF%AF%E5%B7%AE1.png" alt="复化两点高斯求积公式精确值与数值解及误差"></p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E9%AB%98%E6%96%AF%E5%8B%92%E8%AE%A9%E5%BE%B7%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%A4%8D%E5%8C%96%E9%AB%98%E6%96%AF%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%AD%89%E8%B7%9D%E8%8A%82%E7%82%B9/CompositeGauss.png" alt="复化高斯型求积公式误差曲线"></p><h1 id="结果分析与讨论"><a href="#结果分析与讨论" class="headerlink" title="结果分析与讨论"></a>结果分析与讨论</h1><ul><li><p>有两种求积公式的结果可以看出，高斯——勒让德求积公式计算较为复杂，但收敛速度快且精度较高，在20个高斯零点以内可以收敛，且误差缩小到1e-14的个数量级；而复化两点高斯型积分公式收敛速度较慢，需要将区间分为1e6个小区间之后，精度只能达到1e-6个数量级，继续增加其区间，缩小步长时，程序运行速度明显变慢，说明其效率低于高斯——勒让德求积公式（由于n&#x3D;4，四等分区间时，其结果差异很大，所以舍弃，只能用百万区间划分才能确保精度）。</p></li><li><p>高斯——勒让德求积公式精度高，收敛速度快的主要原因是：高斯——勒让德求积公式的高斯节点的选取的特殊性，并不采用等距节点，而是利用勒让德多项式的插值节点作为高斯点进行积分，其结果更加精确，且收敛速度更快，也更加容易接近精确解。</p></li><li><p>反观等距节点插值，对于高次具有强震荡曲线的函数，效果并不理想。主要是由于函数在小区间内的变化率太大，所引起的误差较大，因此需要不断增加其等距节点个数，缩小步长或区间范围，在小区间中用高斯型求积公式进行积分求解才更有效果。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><strong>[1]《数值分析》欧阳洁等。</strong></p><p><strong>[2]</strong> <a href="https://www.bilibili.com/video/BV1Lq4y1U7Hj?p=29&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Lq4y1U7Hj?p=29&amp;spm_id_from=pageDriver</a></p><p><strong>[3]</strong> <a href="https://wenku.baidu.com/view/b3fc62d74b7302768e9951e79b89680203d86bb7.html">https://wenku.baidu.com/view/b3fc62d74b7302768e9951e79b89680203d86bb7.html</a></p><p><strong>[4]</strong> <a href="https://blog.csdn.net/poqw2010/article/details/79487919">https://blog.csdn.net/poqw2010/article/details/79487919</a></p><p><strong>[5]</strong> <a href="https://blog.csdn.net/catinlbb/article/details/103534439">https://blog.csdn.net/catinlbb/article/details/103534439</a></p><p><strong>[6]</strong> <a href="https://www.doc88.com/p-3901680450501.html">https://www.doc88.com/p-3901680450501.html</a></p><p><strong>[7]</strong> <a href="https://zhuanlan.zhihu.com/p/439768015">https://zhuanlan.zhihu.com/p/439768015</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像读取与显示</title>
      <link href="/archives/8063fed6.html"/>
      <url>/archives/8063fed6.html</url>
      
        <content type="html"><![CDATA[<h2 id="OpenCV简介"><a href="#OpenCV简介" class="headerlink" title="OpenCV简介"></a>OpenCV简介</h2><p>OpenCV是一个强大的图像处理的函数库，里面包含了数种经典函数，用于数字图像处理程序的调用。</p><h2 id="数字图像处理"><a href="#数字图像处理" class="headerlink" title="数字图像处理"></a>数字图像处理</h2><p>将图像数字化称为数字图像，将数字图像进行转化成多维数组，进行数学上的统计与计算，用以提高图像质量以便增加人眼的识别效果的方法成为数字图像处理。其中Python数字图像处理非常流行，如今已经有机器学习，卷积神经网络，深度学习等算法在计算机视觉，遥感与摄影测量等领域应用。</p><h2 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h2><blockquote><p>方法一：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在读取真彩色RGB三波段图像时，需要用到openCV开源库中的函数，较为方便，但也可以自己写函数处理，openCV是专门用于图像处理的开源库，</span></span><br><span class="line"><span class="string">应用较为方便简单所以本程序应用到了其split函数，就是为了分出图像的三个通道。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Step 1：读取图像并显示保存</span></span><br><span class="line"><span class="comment"># 读取图像，应用openCV的imread函数</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;Typhoon Chanthu image09182021_500m.jpeg&quot;</span>)</span><br><span class="line"><span class="comment"># 显示图像，应用openCV的imshow函数</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Color&quot;</span>, img)</span><br><span class="line"><span class="comment"># 利用openCV的split函数将彩色图像的R、G、B三个波段的灰度图分开，并将其值赋给b,g,r</span></span><br><span class="line"><span class="comment"># 在此需要注意的是，第n波段是图像的第3维信息，在python中顺序是从0开始的，所以波段对应为0对应b（蓝波段），</span></span><br><span class="line"><span class="comment"># 1对应g（绿波段），2对应r（红波段）</span></span><br><span class="line">b, g, r = cv2.split(img)</span><br><span class="line"><span class="comment"># 分别显示三个波段的图像，显示框标题分别设为：&quot;Blue 1&quot;，&quot;Green 1&quot;，&quot;Red 1&quot;</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Blue&quot;</span>, b)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Green&quot;</span>, g)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Red&quot;</span>, r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别将图像的三个波段写出</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon_r.jpg&quot;</span>, r)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon_g.jpg&quot;</span>, g)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon_b.jpg&quot;</span>, b)</span><br><span class="line"><span class="comment"># 这里出现了error，如果需要显示图像窗口时，如imshow图像的时候，需要加上cv2.waitKay()函数，控制着imshow的持续时间</span></span><br><span class="line"><span class="comment"># 其中waitKay()函数中的参数值代表弛豫时间，0和不填代表无限制时间，也就是说，图像显示窗口无限制时间显示。若是其他数字，</span></span><br><span class="line"><span class="comment"># 则是以毫秒为计数单位，写多少就代表图像显示多少毫秒。需要注意的是，窗口显示图像时，按任意键会结束显示。</span></span><br><span class="line">cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># cv2.destroyAllWindows() 用来删除窗口的，（）里不指定任何参数，则删除所有窗口，删除特定的窗口，往（）输入特定的窗口值。</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2 读取各个波段的像素值</span></span><br><span class="line"><span class="comment"># 首先打印图像的信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像形状大小：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像像素数目：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像数据类型：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点（左上角）(0,0)的各个通道值，在此item()函数则是字典函数，遍历图像找到图像中的像素值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(838, 757)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">838</span>, <span class="number">757</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">838</span>, <span class="number">757</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">838</span>, <span class="number">757</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(726, 1287)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">726</span>, <span class="number">1287</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">726</span>, <span class="number">1287</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">726</span>, <span class="number">1287</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(2096, 1870)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(2168, 2014)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.item(<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>方法二：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在提取图像中的像素值时，首先需要将图像转化为数组，对数组进行提取，因此需要用到numpy库。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Step 1：读取图像，并显示和储存</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;Typhoon Chanthu image09182021_500m.jpeg&quot;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Color 2&quot;</span>, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;img&quot;,img)</span></span><br><span class="line"><span class="comment"># b, g, r = cv2.split(img)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;Blue 1&quot;, b)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;Green 1&quot;, g)</span></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;Red 1&quot;, r)</span></span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br><span class="line"><span class="comment"># cv2.destroyAllWindows()</span></span><br><span class="line"><span class="comment"># 此处没有用openCV中的split函数进行RGB图的拆分，而是定义了三个拆分函数，其效果与split函数一致。</span></span><br><span class="line"><span class="comment"># 第一函数get_red(),输入参数为三波段RGB图像，其中2，1，0分别对应蓝，绿，红三个波段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_red</span>(<span class="params">img</span>):</span><br><span class="line">    redImg = img[:, :, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> redImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_green</span>(<span class="params">img</span>):</span><br><span class="line">    greenImg = img[:, :, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> greenImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_blue</span>(<span class="params">img</span>):</span><br><span class="line">    blueImg = img[:, :, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> blueImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用上述定义函数进行波段赋值</span></span><br><span class="line">b = get_blue(img)</span><br><span class="line">g = get_green(img)</span><br><span class="line">r = get_red(img)</span><br><span class="line"><span class="comment"># 再将三个波段用窗口展示</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;Blue 2&quot;</span>, b)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Green 2&quot;</span>, g)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Red 2&quot;</span>, r)</span><br><span class="line"><span class="comment"># 分别将图像的三个波段写出</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon2_r.jpg&quot;</span>, r)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon2_g.jpg&quot;</span>, g)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;typtoon2_b.jpg&quot;</span>, b)</span><br><span class="line"><span class="comment"># 定义弛豫时间，按任意键结束</span></span><br><span class="line">cv2.waitKey()</span><br><span class="line"><span class="comment"># 关闭窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2：获取图像的像素值</span></span><br><span class="line"><span class="comment"># 首先打印图像的信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像形状大小：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像像素数目：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像数据类型：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此为第二种获取图像像素值的方法，需要将图像先转化为三维数组np.array(),然后输出数组对应的值来获取图像的像素值</span></span><br><span class="line"><span class="comment"># 将图像转化为数组</span></span><br><span class="line">img_array = np.array(img)</span><br><span class="line"><span class="comment"># 利用数组的位置（三维坐标）来获取所需的像素值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点（左上角）(0,0)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(0,0)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(838, 757)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">838</span>, <span class="number">757</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">838</span>, <span class="number">757</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(838,757)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">838</span>, <span class="number">757</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(726, 1287)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">726</span>, <span class="number">1287</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">726</span>, <span class="number">1287</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(726,1287)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">726</span>, <span class="number">1287</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(2096, 1870)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2096,1870)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2096</span>, <span class="number">1870</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印像素点(2168, 2014)的各个通道值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的R通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的G通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;像素点(2168,2014)的B通道值为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_array[<span class="number">2168</span>, <span class="number">2014</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><blockquote><p>（1）RGB真彩色影像</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80%E4%B9%8BOpenCV%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/TyphoonChanthuimage09182021_500m.jpeg" alt="RGB真彩色影像"></p><blockquote><p>（2）红色通道R</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80%E4%B9%8BOpenCV%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/R.png" alt="红色通道R"></p><blockquote><p>（3）绿色通道G</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80%E4%B9%8BOpenCV%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/G.png" alt="绿色通道G"></p><blockquote><p>（4）蓝色通道B</p></blockquote><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80%E4%B9%8BOpenCV%E5%9B%BE%E5%83%8F%E8%AF%BB%E5%8F%96%E4%B8%8E%E6%98%BE%E7%A4%BA/B.png" alt="蓝色通道B"></p><blockquote><p>代码与结果详见：</p></blockquote><p><a href="https://github.com/guojx0820/OpenCVImgReadAndShow"><img src="https://github-readme-stats.vercel.app/api/pin/?username=guojx0820&repo=OpenCVImgReadAndShow&theme=radical" alt="OpenCVImgReadAndShow"></a></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肖申克的救赎——经久不衰的经典之作</title>
      <link href="/archives/a1db3116.html"/>
      <url>/archives/a1db3116.html</url>
      
        <content type="html"><![CDATA[<h2 id="情节概述"><a href="#情节概述" class="headerlink" title="情节概述"></a>情节概述</h2><p>这部电影笔者已经观看了数遍，每次观看都会有不同的感受。<br>这部影片讲述了一个受冤被陷害杀了自己妻子和情夫而入狱的安迪，通过十九年坚持与智慧成功越狱，重获自由的故事，并讲述了两位主角在肖申克监狱中互相帮助的深厚友情。</p><h2 id="人生哲理"><a href="#人生哲理" class="headerlink" title="人生哲理"></a>人生哲理</h2><p>Hope is a good thing, maybe the best of things, and no good thing ever dies.</p><h2 id="观影感悟"><a href="#观影感悟" class="headerlink" title="观影感悟"></a>观影感悟</h2><p>万物之中，希望至美，至美之物，永不凋零。</p><h2 id="现实视角"><a href="#现实视角" class="headerlink" title="现实视角"></a>现实视角</h2><p>现实是残酷的，但只要心怀希望，就一定可以抵达远方。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活与感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GEE遥感影像监督分类</title>
      <link href="/archives/1abb07a6.html"/>
      <url>/archives/1abb07a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="写本文的初衷"><a href="#写本文的初衷" class="headerlink" title="写本文的初衷"></a>写本文的初衷</h2><p>美好的四月已经结束，五月在悄悄拉开帷幕，夏季承载着毕业生的所有期望悄悄展露头脚，毕业设计将成为她最美的画卷。前几天看到一位师妹做毕设时，用线下软件处理数据时的万般无奈与纠结，对于这种线下下载式的遥感处理方法，在GEE（Google Earth Engine, 谷歌地球引擎）出现之后便以逐步被很多科研工作者所弃用抑或是被淘汰，也许是这种云端处理模式之于遥感大数据而言，就本该是绝配。大数据时代的到来，也预示着这种线下处理模式的凋零，5G与互联网技术的进步正使得遥感数据云端处理成为可能。</p><h2 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h2><p>本文是一个技术博客，主要解决某线下处理软件不中用的问题。这种依赖于个人电脑配置以及付费软件版本功能的遥感大数据处理方式，本就应该逐步被云端处理所替代。当然，在此声明，并非针对某E姓软件，此软件在线下处理遥感数据的能力至今无软件可以匹敌，主要还是由于其对遥感数据具有强大的解析能力，但很无奈随着软件的升级，并非所有电脑都可以适配，因此云端处理数据就显得尤为重要。</p><h2 id="GEE的优势"><a href="#GEE的优势" class="headerlink" title="GEE的优势"></a>GEE的优势</h2><p>GEE（Google Earth Engine），第一次听到这个美好的名字时还是在读大二，记得那时候有一位不近学长强烈推荐使用GEE进行数据处理。然而当时年少轻狂，不知学长的苦心。坚持用某种E姓线下处理软件处理遥感大数据，要知道一景高分辨率遥感数据的数据量就高达1个G，是不是还有好几个G的，当时的电脑配置处理速度一个上午也处理不了几景。之后听说该软件加入了批处理功能，只要在刚开始设置好处理流程和相应的参数，就能一键三连，甚至一键好多连。但是，软件设计者却没有考虑到，一旦进入了这种批处理模式，电脑不能多线程工作，依然需要等一上午，才能把流程走完，才能处理之后的数据。不得不说这是一种巨大的进步呀！解放了人的双手，本就是科技革命的本质目的呢！</p><p>GEE具有如下优势：</p><p>（1）GEE可以实现远程云端处理，提供非常巨大的服务器，不需要担心个人电脑配置问题；</p><p>（2）GEE可以进行多线程处理遥感数据，可以同时开多个网页端，进行编程计算，效率大大提提升；</p><p>（3）GEE利用Javascript动态语言，灵活多变，且简单易学；</p><p>（4）GEE中集成了大量遥感数据处理模型与函数API，可以随时调用，不用自行编写；</p><p>（5）GEE还提供了Python接口，利用Python脚本就可以实现相应功能；</p><p>……</p><h1 id="数据源与预处理"><a href="#数据源与预处理" class="headerlink" title="数据源与预处理"></a>数据源与预处理</h1><h2 id="GEE-SR数据集介绍"><a href="#GEE-SR数据集介绍" class="headerlink" title="GEE SR数据集介绍"></a>GEE SR数据集介绍</h2><p>SR数据集是某些卫星传感器的大气校正表面反射率以及其他经过与处理之后的的卫星遥感数据的集合。这些图像包含可见光、近红外（VNIR）波段、短波红外（SWIR）波段被处理成正交的表面反射率，以及热红外（TIR）波段被处理成正交的亮度温度的数据。这些数据已经进行了大气校正，包括用CFMASK制作的云、影、水和雪掩码，以及每个像素的饱和掩码。收集的数据条被打包成重叠的 “场景”，使用标准化的参考网格，覆盖大约170公里x183公里。另见美国地质调查局关于SR质量保证带的网页。SR只能为处理到L1TP级别的Landsat资产制作。</p><p>——来自数据提供者</p><blockquote><p>参考:</p><p><a href="https://blog.csdn.net/qq_31988139/article/details/120402644">Google Earth Engine ——LANDSAT8_SR数据集</a></p></blockquote><h2 id="研究区域"><a href="#研究区域" class="headerlink" title="研究区域"></a>研究区域</h2><p>本文就选择青岛地区作为研究区进行数据处理。</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/GEE%E9%81%A5%E6%84%9F%E5%BD%B1%E5%83%8F%E7%9B%91%E7%9D%A3%E5%88%86%E7%B1%BB/S2Qingdao.png" alt="青岛地区Sentinel-2数据"></p><h2 id="哨兵-2号数据"><a href="#哨兵-2号数据" class="headerlink" title="哨兵-2号数据"></a>哨兵-2号数据</h2><p>哨兵-2号卫星，又名Sentinel-2，是欧空局于2017年发射，搭载高分辨率多光谱卫星传感器的光学遥感卫星。空间分辨率可达10米。主要用于土地利用，资源探测，自然灾害监测以及定量反演的一种资源卫星。哨兵2A与2B两颗由空中巴士国防航天等多个产业团队共同研发及制造，两架卫星的设计大致相同，且绕行同一太阳同步轨道，惟彼此所在的位置相距180度。</p><p>哨兵2号将可在多方面提供关于地球陆地地表与海岸区域变化的应用。该任务主要提供农业与森林管理相关影像资料，并可协助管理食品安全。卫星影像可用以测定多种植生指数，例如植物叶面积、叶绿素与含水量指数。这对地球上的植物量与农作物收获量推估特别重要。哨兵2号监测植物生长的同时，也可以在影像中表示地表覆盖物变迁与监测全世界森林。它也可提供湖泊与沿海污染状况影像。卫星还可拍摄洪水、火山爆发与山崩等天灾影像进行测绘，以协助人道救援。哨兵2号影像应用的例子如下：</p><ul><li>针对环境监测观察土地利用变化。</li><li>农业应用，例如作物监控与管理，协助粮食安全。</li><li>详细的植被与森林监测，与相关参数制作（例如叶面积指数、叶绿素含量、碳量估计）</li><li>观测沿海地区（海洋环境监测、沿海地区测绘）</li><li>内陆水域监测</li><li>冰川监测、海冰分布测绘、积雪监测</li><li>洪水区测绘与管理（风险分析、损害评估、洪水期间灾害管控）</li></ul><p>哨兵计画的卫星观测网提供了简单的方式监测与分析基于哨兵2号拍摄影像的地表变迁。</p><p>——维基百科</p><p>以下是其波段设计：</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/GEE%E9%81%A5%E6%84%9F%E5%BD%B1%E5%83%8F%E7%9B%91%E7%9D%A3%E5%88%86%E7%B1%BB/Sentinel-2Bands.png" alt="哨兵-2号波段设计（图源于维基百科）"></p><h1 id="方法原理"><a href="#方法原理" class="headerlink" title="方法原理"></a>方法原理</h1><h2 id="辐射校正"><a href="#辐射校正" class="headerlink" title="辐射校正"></a>辐射校正</h2><p>辐射校正包括辐射定标和大气校正，属于遥感数据预处理的内容。GEE中的SR数据集已经做了遥感数据预处理，所以在此只是利用FMASK进行云检测与去除即可（详见代码）。</p><h2 id="地理校正"><a href="#地理校正" class="headerlink" title="地理校正"></a>地理校正</h2><p>数据集已经做过几何校正与几何精校正。</p><h2 id="机器学习——随机森林算法模型"><a href="#机器学习——随机森林算法模型" class="headerlink" title="机器学习——随机森林算法模型"></a>机器学习——随机森林算法模型</h2><p>随机森林模型可以理解为一种用多个决策树组成的随机数的投票机制进行模式识别的过程，属于机器学习中监督学习的一种。</p><h2 id="其他模型"><a href="#其他模型" class="headerlink" title="其他模型"></a>其他模型</h2><p>SVM（支持向量机）</p><p>决策树……</p><h1 id="GEE中的分类器与分类方法详解（代码与分析方法）"><a href="#GEE中的分类器与分类方法详解（代码与分析方法）" class="headerlink" title="GEE中的分类器与分类方法详解（代码与分析方法）"></a>GEE中的分类器与分类方法详解（代码与分析方法）</h1><h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2><h2 id="代码与方法详解"><a href="#代码与方法详解" class="headerlink" title="代码与方法详解"></a>代码与方法详解</h2><p>样本选取（分类依据）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> water = <span class="comment">/* color: #1238d6 */</span>ee.<span class="title class_">FeatureCollection</span>(</span><br><span class="line">        [ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.20902134280091</span>, <span class="number">36.366615266547605</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.22859073977357</span>, <span class="number">36.423268311469755</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.22691705516193</span>, <span class="number">36.36163695583249</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.42535760691975</span>, <span class="number">36.46276088800295</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.93889828164347</span>, <span class="number">36.008296081362744</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.01065273720988</span>, <span class="number">36.01440578843647</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.04635830361613</span>, <span class="number">36.01176756392882</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;6&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.43683930490783</span>, <span class="number">36.95302971145465</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;7&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.44782563303283</span>, <span class="number">36.94424971643165</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.14089509104065</span>, <span class="number">36.86188806223697</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;9&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.23496552561096</span>, <span class="number">36.96674642762685</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.76976179656316</span>, <span class="number">35.76148094110215</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">            &#125;)]),</span><br><span class="line">    forest = <span class="comment">/* color: #0c6c0d */</span>ee.<span class="title class_">FeatureCollection</span>(</span><br><span class="line">        [ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.94339981050962</span>, <span class="number">35.81958333441058</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.94558849306577</span>, <span class="number">35.82010313531279</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.82961706577312</span>, <span class="number">35.87820141012196</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.82956878601085</span>, <span class="number">35.878805584997174</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.0430490811918</span>, <span class="number">35.987221588668284</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.03816209636666</span>, <span class="number">35.98757317717099</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.04118066355771</span>, <span class="number">36.97603292697505</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;6&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.03922801539487</span>, <span class="number">36.97607149704851</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;7&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.99538412831197</span>, <span class="number">35.78700580416246</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.99416640541921</span>, <span class="number">35.78794574354011</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;9&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.60185426463654</span>, <span class="number">36.199152594317674</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.60916060199311</span>, <span class="number">36.198719701190235</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">            &#125;)]),</span><br><span class="line">    city = <span class="comment">/* color: #d2b762 */</span>ee.<span class="title class_">FeatureCollection</span>(</span><br><span class="line">        [ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41650156503648</span>, <span class="number">36.129044116121754</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41429142480821</span>, <span class="number">36.129650704761204</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41075090890855</span>, <span class="number">36.13015330322532</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.40731768136949</span>, <span class="number">36.13140111998</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.40678123956651</span>, <span class="number">36.13245828253948</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.40596584802599</span>, <span class="number">36.13261425613783</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41094402795763</span>, <span class="number">36.13259692575331</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;6&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.43519119745226</span>, <span class="number">36.134035334643784</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;7&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.3765044642064</span>, <span class="number">36.13712869094811</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.36266426568956</span>, <span class="number">36.136175568950556</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;9&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41381935602159</span>, <span class="number">36.13368006742981</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.42368131510972</span>, <span class="number">36.36322623928067</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.42664247386216</span>, <span class="number">36.36450489817577</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;12&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.42889552943467</span>, <span class="number">36.36379645462681</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;13&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.43430286280869</span>, <span class="number">36.360668858459796</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;14&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.1530537247987</span>, <span class="number">36.000872283292146</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;15&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.1313628962036</span>, <span class="number">35.99522397160657</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;16&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.00107276402414</span>, <span class="number">35.86535928375581</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;17&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.00620559321929</span>, <span class="number">36.7583440992046</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.95093062984039</span>, <span class="number">36.77374584237985</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">3</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;19&quot;</span></span><br><span class="line">            &#125;)]),</span><br><span class="line">    cropland = <span class="comment">/* color: #20ff0b */</span>ee.<span class="title class_">FeatureCollection</span>(</span><br><span class="line">        [ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.11102335818197</span>, <span class="number">36.619067818509706</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.13436930544759</span>, <span class="number">36.62733409634618</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.81873343673892</span>, <span class="number">36.69381851197602</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.86147711960025</span>, <span class="number">36.688174860750884</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.33817687859451</span>, <span class="number">36.58809087721563</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.3939523804311</span>, <span class="number">36.61929112620923</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.41438008428852</span>, <span class="number">36.620737784630805</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;6&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.46562100530903</span>, <span class="number">36.60454744022903</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;7&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.76090298257323</span>, <span class="number">36.09103938085209</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.7595296915576</span>, <span class="number">36.08656564731201</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;9&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.78566513619872</span>, <span class="number">36.099257902091296</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.65844860243544</span>, <span class="number">35.70823232349895</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">4</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">            &#125;)]),</span><br><span class="line">    grassland = <span class="comment">/* color: #abff46 */</span>ee.<span class="title class_">FeatureCollection</span>(</span><br><span class="line">        [ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.98312553510928</span>, <span class="number">36.764253556519925</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.96921023474002</span>, <span class="number">36.764562973144855</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.96060296055511</span>, <span class="number">36.76853351705692</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.9530015802069</span>, <span class="number">36.768331547359665</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.99397598302684</span>, <span class="number">36.77292546571223</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.99547571008006</span>, <span class="number">36.772754148239926</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;5&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.40651565455876</span>, <span class="number">36.33991890340855</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;6&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.4503965940424</span>, <span class="number">36.33621129204126</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;7&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.54005730875981</span>, <span class="number">36.354946496140364</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.52396457788124</span>, <span class="number">36.35739759356269</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;9&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">120.39922041742305</span>, <span class="number">36.18777775513172</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">            &#125;),</span><br><span class="line">        ee.<span class="title class_">Feature</span>(</span><br><span class="line">            ee.<span class="property">Geometry</span>.<span class="title class_">Point</span>([<span class="number">119.93996242142477</span>, <span class="number">35.882724414600965</span>]),</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">&quot;landcover&quot;</span>: <span class="number">5</span>,</span><br><span class="line">              <span class="string">&quot;system:index&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">            &#125;)]);</span><br></pre></td></tr></table></figure><p>算法详解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择需要裁剪的矢量数据 </span></span><br><span class="line"><span class="keyword">var</span> aoi = ee.<span class="title class_">FeatureCollection</span>(<span class="string">&quot;users/guojiaxiang0820/Qingdao&quot;</span>);</span><br><span class="line"><span class="comment">//加载矢量边框，以便于在边界内选取样本点</span></span><br><span class="line"><span class="keyword">var</span> empty = ee.<span class="title class_">Image</span>().<span class="title function_">toByte</span>();</span><br><span class="line"><span class="keyword">var</span> outline = empty.<span class="title function_">paint</span>(&#123;</span><br><span class="line"> <span class="attr">featureCollection</span>:aoi, <span class="comment">// 行政边界命名为fc</span></span><br><span class="line"> <span class="attr">color</span>:<span class="number">0</span>, <span class="comment">//颜色透明</span></span><br><span class="line"> <span class="attr">width</span>:<span class="number">3</span> <span class="comment">//边界宽度</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Map</span>.<span class="title function_">addLayer</span>(outline, &#123;<span class="attr">palette</span>: <span class="string">&quot;ff0000&quot;</span>&#125;, <span class="string">&quot;outline&quot;</span>);</span><br><span class="line"><span class="comment">//Function to mask the clouds in Sentinel-2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maskS2clouds</span>(<span class="params">image</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> qa = image.<span class="title function_">select</span>(<span class="string">&#x27;QA60&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bits 10 and 11 are clouds and cirrus, respectively.</span></span><br><span class="line">  <span class="keyword">var</span> cloudBitMask = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> cirrusBitMask = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Both flags should be set to zero, indicating clear conditions.</span></span><br><span class="line">  <span class="keyword">var</span> mask = qa.<span class="title function_">bitwiseAnd</span>(cloudBitMask).<span class="title function_">eq</span>(<span class="number">0</span>)</span><br><span class="line">      .<span class="title function_">and</span>(qa.<span class="title function_">bitwiseAnd</span>(cirrusBitMask).<span class="title function_">eq</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> image.<span class="title function_">updateMask</span>(mask).<span class="title function_">divide</span>(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Build the Sentinel 2 collection, filtered by date, bounds and percentage of cloud cover </span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.<span class="title class_">ImageCollection</span>(<span class="string">&#x27;COPERNICUS/S2_SR&#x27;</span>)</span><br><span class="line">                  .<span class="title function_">filterDate</span>(<span class="string">&#x27;2019-01-01&#x27;</span>,<span class="string">&#x27;2020-12-31&#x27;</span>)</span><br><span class="line">                  .<span class="title function_">filterBounds</span>(aoi)</span><br><span class="line">                  .<span class="title function_">filter</span>(ee.<span class="property">Filter</span>.<span class="title function_">lt</span>(<span class="string">&#x27;CLOUDY_PIXEL_PERCENTAGE&#x27;</span>,<span class="number">10</span>))</span><br><span class="line">                  .<span class="title function_">map</span>(maskS2clouds);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;Sentinel 2 Image Collection&quot;</span>,dataset);</span><br><span class="line"><span class="keyword">var</span> dem = ee.<span class="title class_">Image</span>(<span class="string">&quot;NASA/NASADEM_HGT/001&quot;</span>) <span class="comment">//添加dem数据 </span></span><br><span class="line"><span class="comment">// Construct Classfication Dataset</span></span><br><span class="line"><span class="comment">// RS Index Cacluate(NDVI\NDWI\EVI\BSI)</span></span><br><span class="line"><span class="keyword">var</span> add_RS_index = <span class="keyword">function</span>(<span class="params">img</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> ndvi = img.<span class="title function_">normalizedDifference</span>([<span class="string">&#x27;B8&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).<span class="title function_">rename</span>(<span class="string">&#x27;NDVI&#x27;</span>).<span class="title function_">copyProperties</span>(img,[<span class="string">&#x27;system:time_start&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> ndwi = img.<span class="title function_">normalizedDifference</span>([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B8&#x27;</span>]).<span class="title function_">rename</span>(<span class="string">&#x27;NDWI&#x27;</span>).<span class="title function_">copyProperties</span>(img,[<span class="string">&#x27;system:time_start&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> evi = img.<span class="title function_">expression</span>(<span class="string">&#x27;2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))&#x27;</span>, </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&#x27;NIR&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B8&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;RED&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B4&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;BLUE&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B2&#x27;</span>)</span><br><span class="line">  &#125;).<span class="title function_">rename</span>(<span class="string">&#x27;EVI&#x27;</span>).<span class="title function_">copyProperties</span>(img,[<span class="string">&#x27;system:time_start&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> bsi = img.<span class="title function_">expression</span>(<span class="string">&#x27;((RED + SWIR1) - (NIR + BLUE)) / ((RED + SWIR1) + (NIR + BLUE)) &#x27;</span>, </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&#x27;RED&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B4&#x27;</span>), </span><br><span class="line">    <span class="string">&#x27;BLUE&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B2&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;NIR&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B8&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;SWIR1&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B11&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  &#125;).<span class="title function_">rename</span>(<span class="string">&#x27;BSI&#x27;</span>).<span class="title function_">copyProperties</span>(img,[<span class="string">&#x27;system:time_start&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ibi = img.<span class="title function_">expression</span>(<span class="string">&#x27;(2 * SWIR1 / (SWIR1 + NIR) - (NIR / (NIR + RED) + GREEN / (GREEN + SWIR1))) / (2 * SWIR1 / (SWIR1 + NIR) + (NIR / (NIR + RED) + GREEN / (GREEN + SWIR1)))&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;SWIR1&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B11&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;NIR&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B8&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;RED&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B4&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;GREEN&#x27;</span>: img.<span class="title function_">select</span>(<span class="string">&#x27;B3&#x27;</span>)</span><br><span class="line">  &#125;).<span class="title function_">rename</span>(<span class="string">&#x27;IBI&#x27;</span>).<span class="title function_">copyProperties</span>(img,[<span class="string">&#x27;system:time_start&#x27;</span>]);</span><br><span class="line">  <span class="keyword">return</span> img.<span class="title function_">addBands</span>([ndvi, ndwi, evi, bsi, ibi]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> dataset = dataset.<span class="title function_">map</span>(add_RS_index); </span><br><span class="line"><span class="keyword">var</span> bands = [<span class="string">&#x27;B2&#x27;</span>,<span class="string">&#x27;B3&#x27;</span>,<span class="string">&#x27;B4&#x27;</span>,<span class="string">&#x27;B5&#x27;</span>,<span class="string">&#x27;B6&#x27;</span>,<span class="string">&#x27;B7&#x27;</span>,<span class="string">&#x27;B8&#x27;</span>,<span class="string">&#x27;B8A&#x27;</span>,<span class="string">&#x27;B11&#x27;</span>,<span class="string">&#x27;NDVI&#x27;</span>,<span class="string">&#x27;NDWI&#x27;</span>,<span class="string">&#x27;BSI&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> imgcol_median = dataset.<span class="title function_">select</span>(bands).<span class="title function_">median</span>(); <span class="comment">//获取日期范围内的像素中值，以以减小误差</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> aoi_dem = dem.<span class="title function_">select</span>(<span class="string">&#x27;elevation&#x27;</span>).<span class="title function_">clip</span>(aoi).<span class="title function_">rename</span>(<span class="string">&#x27;DEM&#x27;</span>);<span class="comment">//裁剪DEM</span></span><br><span class="line"><span class="keyword">var</span> construct_img = imgcol_median.<span class="title function_">addBands</span>(aoi_dem).<span class="title function_">clip</span>(aoi);</span><br><span class="line"><span class="comment">//分类样本</span></span><br><span class="line"><span class="keyword">var</span> train_points = cropland.<span class="title function_">merge</span>(grassland).<span class="title function_">merge</span>(city).<span class="title function_">merge</span>(forest).<span class="title function_">merge</span>(water);<span class="comment">//分类样本，可以加类 </span></span><br><span class="line"><span class="keyword">var</span> train_data= construct_img.<span class="title function_">sampleRegions</span>(&#123;</span><br><span class="line">  <span class="attr">collection</span>: train_points,</span><br><span class="line">  <span class="attr">properties</span>: [<span class="string">&#x27;landcover&#x27;</span>],</span><br><span class="line">  <span class="attr">scale</span>: <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//精度评价</span></span><br><span class="line"><span class="keyword">var</span> withRandom = train_data.<span class="title function_">randomColumn</span>(<span class="string">&#x27;random&#x27;</span>);<span class="comment">//样本点随机的排列</span></span><br><span class="line"><span class="keyword">var</span> split = <span class="number">0.7</span>; </span><br><span class="line"><span class="keyword">var</span> trainingPartition = withRandom.<span class="title function_">filter</span>(ee.<span class="property">Filter</span>.<span class="title function_">lt</span>(<span class="string">&#x27;random&#x27;</span>, split));<span class="comment">//筛选70%的样本作为训练样本</span></span><br><span class="line"><span class="keyword">var</span> testingPartition = withRandom.<span class="title function_">filter</span>(ee.<span class="property">Filter</span>.<span class="title function_">gte</span>(<span class="string">&#x27;random&#x27;</span>, split));<span class="comment">//筛选30%的样本作为测试样本</span></span><br><span class="line"><span class="comment">//分类方法选择随机森林</span></span><br><span class="line"><span class="keyword">var</span> rf = ee.<span class="property">Classifier</span>.<span class="title function_">smileRandomForest</span>(&#123;</span><br><span class="line">  <span class="attr">numberOfTrees</span>: <span class="number">20</span>,  </span><br><span class="line">  <span class="attr">bagFraction</span>: <span class="number">0.8</span></span><br><span class="line">&#125;).<span class="title function_">train</span>(&#123;</span><br><span class="line">  <span class="attr">features</span>: train_data,</span><br><span class="line">  <span class="attr">classProperty</span>: <span class="string">&#x27;landcover&#x27;</span>,</span><br><span class="line">  <span class="comment">// inputProperties: inputbands</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//对哨兵数据进行随机森林分类</span></span><br><span class="line"><span class="keyword">var</span> img_classfication = construct_img.<span class="title function_">classify</span>(rf); </span><br><span class="line"><span class="comment">//运用测试样本分类，确定要进行函数运算的数据集以及函数</span></span><br><span class="line"><span class="keyword">var</span> test = testingPartition.<span class="title function_">classify</span>(rf);</span><br><span class="line"><span class="comment">//计算混淆矩阵</span></span><br><span class="line"><span class="keyword">var</span> confusionMatrix = test.<span class="title function_">errorMatrix</span>(<span class="string">&#x27;landcover&#x27;</span>, <span class="string">&#x27;classification&#x27;</span>);</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;confusionMatrix&#x27;</span>,confusionMatrix);<span class="comment">//面板上显示混淆矩阵</span></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;overall accuracy&#x27;</span>, confusionMatrix.<span class="title function_">accuracy</span>());<span class="comment">//面板上显示总体精度</span></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;kappa accuracy&#x27;</span>, confusionMatrix.<span class="title function_">kappa</span>());<span class="comment">//面板上显示kappa值</span></span><br><span class="line"><span class="title class_">Map</span>.<span class="title function_">centerObject</span>(aoi)</span><br><span class="line"><span class="title class_">Map</span>.<span class="title function_">addLayer</span>(aoi);</span><br><span class="line"><span class="title class_">Map</span>.<span class="title function_">addLayer</span>(img_classfication.<span class="title function_">clip</span>(aoi), &#123;<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">4</span>, <span class="attr">palette</span>: [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>]&#125;);</span><br><span class="line"><span class="keyword">var</span> class1=img_classfication.<span class="title function_">clip</span>(aoi)</span><br><span class="line"><span class="comment">//导出分类图</span></span><br><span class="line"><span class="title class_">Export</span>.<span class="property">image</span>.<span class="title function_">toDrive</span>(&#123;  </span><br><span class="line">       <span class="attr">image</span>: class1,  </span><br><span class="line">       <span class="attr">description</span>: <span class="string">&#x27;rfclass&#x27;</span>,  </span><br><span class="line">       <span class="attr">fileNamePrefix</span>: <span class="string">&#x27;rf&#x27;</span>,  <span class="comment">//文件命名</span></span><br><span class="line">       <span class="attr">folder</span>: <span class="string">&quot;class&quot;</span>,  <span class="comment">//保存的文件夹</span></span><br><span class="line">       <span class="attr">scale</span>: <span class="number">10</span>,  <span class="comment">//分辨率</span></span><br><span class="line">       <span class="attr">region</span>: aoi,  <span class="comment">//研究区</span></span><br><span class="line">       <span class="attr">maxPixels</span>: <span class="number">1e13</span>,  <span class="comment">//最大像元素，默认就好</span></span><br><span class="line">       <span class="attr">crs</span>: <span class="string">&quot;EPSG:4326&quot;</span>  <span class="comment">//设置投影</span></span><br><span class="line">   &#125;);  </span><br></pre></td></tr></table></figure><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><h2 id="结果图展示"><a href="#结果图展示" class="headerlink" title="结果图展示"></a>结果图展示</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/GEE%E9%81%A5%E6%84%9F%E5%BD%B1%E5%83%8F%E7%9B%91%E7%9D%A3%E5%88%86%E7%B1%BB/%E5%88%86%E7%B1%BB%E7%BB%93%E6%9E%9C.png" alt="随机森林分类结果"></p><h2 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h2><h2 id="KAPPA系数"><a href="#KAPPA系数" class="headerlink" title="KAPPA系数"></a>KAPPA系数</h2><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>遥感数据本身就不该局限于个人电脑配置软件处理能力，大数据就应当为科学研究，工程项目等服务全人类的事业作出贡献，而不是固步自封，费用昂贵，阻碍科技的进步与生活的无限可能。未来的世界应当是一个大数据时代，数据共享时代，科研与应用相结合的时代。科技的进步需要所有人的共同努力，科技本身不是为个人制造利益的，而是为大众服务。我们之所以努力地推动科技的进步，就是希望每个人都能活得更有尊严，这才应是科研者和技术人所应有的本心。</p>]]></content>
      
      
      <categories>
          
          <category> 遥感与大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感影像分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python类中self的作用</title>
      <link href="/archives/fe82aeb3.html"/>
      <url>/archives/fe82aeb3.html</url>
      
        <content type="html"><![CDATA[<h2 id="self定义。"><a href="#self定义。" class="headerlink" title="self定义。"></a>self定义。</h2><p>要想理解self就首先要理解Python中的类，不信的话，先看看他的定义：self是对象的载体，可以理解为一个储存实例化对象属性的字典（dict），self储存属性，而没有动作执行，self总是指向调用时类的实例。（怎么样，还行吧！）</p><h2 id="什么是类。"><a href="#什么是类。" class="headerlink" title="什么是类。"></a>什么是类。</h2><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都相互独立、互不影响；方法是与实例绑定的函数，和普通的函数不同，方法可以直接访问实例的数据。也就是说方法（method）是类（class）中的函数（function）。</p><h2 id="self的通俗理解。"><a href="#self的通俗理解。" class="headerlink" title="self的通俗理解。"></a>self的通俗理解。</h2><p>self简言之就是把类（class）中定义的变量和方法（method）变成实例变量和实例方法，即把抽象的编程具体的：具体的学生，XXX（姓名）&#x3D;抽象的人。作为类的成员，使得成员间能互相调用（变量，方法），互相传递（变量，方法）。而不需要从外部调用数据（即变量）和方法（即函数），以实现数据的封装。</p><p>怎么样，self是不是很厉害呢？下面这篇文章写的很好，可以借鉴呢。</p><blockquote><p>参考文献：</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/356325860">Python中的self详细解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限问题的解决</title>
      <link href="/archives/f3ecd78a.html"/>
      <url>/archives/f3ecd78a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>问题描述：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">err: Error: Spawn failed</span><br><span class="line">at ChildProcess.&lt;anonymous&gt; (/Users/leo/Documents/Blog/LuoMuBlog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">at ChildProcess.emit (events.js:315:20)</span><br><span class="line">at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">code: 128</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MacOS系统本机Root权限问题"><a href="#MacOS系统本机Root权限问题" class="headerlink" title="MacOS系统本机Root权限问题"></a>MacOS系统本机Root权限问题</h2><h3 id="1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。"><a href="#1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。" class="headerlink" title="1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考Mac本机读写权限。"></a>1、需要将自建博客的本地根目录（一般为Blog）文件夹赋予Root权限，参考<a href="https://blog.csdn.net/qq_40657321/article/details/106528128">Mac本机读写权限</a>。</h3><h3 id="2、进入Mac终端，输入命令：sudo-su-给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。"><a href="#2、进入Mac终端，输入命令：sudo-su-给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。" class="headerlink" title="2、进入Mac终端，输入命令：sudo su, 给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。"></a>2、进入Mac终端，输入命令：sudo su, 给所有命令以Root权限，再执行其他开源依赖库的安装或者命令的执行。</h3><h2 id="GitHub部署权限问题"><a href="#GitHub部署权限问题" class="headerlink" title="GitHub部署权限问题"></a>GitHub部署权限问题</h2><h3 id="1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限"><a href="#1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限" class="headerlink" title="1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考GitHub更新令牌后部署权限"></a>1、在更新Token令牌之后在部署博客到GitHub时可能会报错，一般而言都是权限问题。解决方法可以参考<a href="https://nokiasonic.github.io/2021/08/30/%E3%80%90Hexo%E3%80%91github%E5%BC%80%E5%90%AF%E4%BB%A4%E7%89%8C%E9%AA%8C%E8%AF%81%E5%90%8E%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0Blog%E7%9A%84%E9%97%AE%E9%A2%98/">GitHub更新令牌后部署权限</a></h3><h3 id="2、问题解决关键，多试几遍！"><a href="#2、问题解决关键，多试几遍！" class="headerlink" title="2、问题解决关键，多试几遍！"></a>2、问题解决关键，多试几遍！</h3>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么要自建博客网站</title>
      <link href="/archives/7576230f.html"/>
      <url>/archives/7576230f.html</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><h3 id="写博客的初心是可以记录生活，学习与工作上值得记录的事情。"><a href="#写博客的初心是可以记录生活，学习与工作上值得记录的事情。" class="headerlink" title="写博客的初心是可以记录生活，学习与工作上值得记录的事情。"></a>写博客的初心是可以记录生活，学习与工作上值得记录的事情。</h3><h2 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h2><h3 id="然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。"><a href="#然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。" class="headerlink" title="然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。"></a>然而在使用简书博客有时候会一些小崩溃，为了我的信息不丢失，我毅然决然选择了自建博客网站。</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/timg.jpeg" alt="心好累～"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书与生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo--Hexo 初步运行指令</title>
      <link href="/archives/573e690a.html"/>
      <url>/archives/573e690a.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程基础</title>
      <link href="/archives/4360a9bd.html"/>
      <url>/archives/4360a9bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-学习基础"><a href="#C-学习基础" class="headerlink" title="C++学习基础"></a>C++学习基础</h1><h2 id="C-学习计划"><a href="#C-学习计划" class="headerlink" title="C++学习计划"></a>C++学习计划</h2><p>（1）基础语法（复习）——初步了解，基础编程<br>（2）核心编程——面向对象<br>（3）提高编程——泛型编程，STL</p><h2 id="C-编程流程（Clion）"><a href="#C-编程流程（Clion）" class="headerlink" title="C++编程流程（Clion）"></a>C++编程流程（Clion）</h2><p>（1）创建项目<br>（2）创建文件<br>（3）编写代码<br>（4）运行程序</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>作用：给一段指定的内存空间取名，以方便操作这段内存，管理内存空间<br>语法：数据类型 变量名 &#x3D; 初始值;<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%9B%BE%E7%A4%BA.png" alt="变量与内存图示"></p><blockquote><p>注意：<br>1、C++关键字不能用做变量名标识符<br>常用的关键字如下：<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C%2B%2B%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="C++关键字"><br>2、标识符是有字母、数字、下划线组成<br>3、标识符的第一个字符只能是字母或者下划线，不能是数字<br>4、标识符区分大小写<br><strong>建议：在给变量命名之时，最好能够见名知义</strong></p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量的定义方式通常有两种：<br>1、#define 宏常量：#define 常量名 常量值<br>（注：#define定义的宏常量一般放在函数之外或者开头）<br>2、const修饰的变量：const 变量类型 变量名 &#x3D; 变量值<br>（注：变量分全局变量和局部变量……)</p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by Leo on 2022/4/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//常量的定义方式有</span></span><br><span class="line"><span class="comment">//1、define宏常量</span></span><br><span class="line"><span class="comment">//2、const修饰的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、define宏常量，不能修改,一旦修改就会报错</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Day 24 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Week 7 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Year 12 <span class="comment">//定义一个常量，#define 常量名 常量值</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    2、const修饰的变量也被定义为常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Month = <span class="number">30</span>; <span class="comment">//定义一个变量，数据类型 变量名 = 变量初始值</span></span><br><span class="line"><span class="comment">//    Month = 31;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*分别输出</span></span><br><span class="line"><span class="comment">     * 一天，</span></span><br><span class="line"><span class="comment">     * 一周，</span></span><br><span class="line"><span class="comment">     * 一年的时间*/</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一天有&quot;</span> &lt;&lt; Day &lt;&lt; <span class="string">&quot;小时&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一周有&quot;</span> &lt;&lt; Week &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一月有&quot;</span> &lt;&lt; Month &lt;&lt; <span class="string">&quot;天&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一年有&quot;</span> &lt;&lt; Year &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p><strong>作用：在给变量分配内存时 ，需要给其一个合理的内存空间</strong></p></blockquote><p>1、整形<br>int：整形；<br>short：短整形<br>long：长整形<br>long long：长长整形<br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/Cpp%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%95%B4%E5%9E%8B%E6%89%80%E5%8D%A0%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D.png" alt="整型所占用的内存空间分配"></p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Leo on 2022/4/8.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    1、短整型(值的范围为：-32768～32767)</span></span><br><span class="line">    <span class="type">short</span> num1 = <span class="number">32767</span>;</span><br><span class="line"><span class="comment">//    2、整型</span></span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">32768</span>;</span><br><span class="line"><span class="comment">//    3、长整型</span></span><br><span class="line">    <span class="type">long</span> num3 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//    4、长长整型；</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num4 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输出的数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num3 = &quot;</span> &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num4 = &quot;</span> &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、实型<br>（1）单精度：float<br>（2） 双精度：double<br>float 变量名 &#x3D; 变量值f;<br>double 变量名 &#x3D; 变量值;</p><blockquote><p>示例代码：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by Leo on 2022/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    1、单精度</span></span><br><span class="line"><span class="comment">//    2、双精度</span></span><br><span class="line"><span class="comment">//    C++中默认输出的数字位数为6位有效数字</span></span><br><span class="line">    <span class="type">float</span> f1 = <span class="number">3.1415966f</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1 = &quot;</span> &lt;&lt; f1 &lt;&lt; endl; <span class="comment">//占用4个字节</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> d1 = <span class="number">3.1415966</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 = &quot;</span> &lt;&lt; d1 &lt;&lt; endl; <span class="comment">//占用8个字节</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f1占用的内存空间为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1占用的内存空间为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(d1) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    3、科学计数法</span></span><br><span class="line">    <span class="type">float</span> f2 = <span class="number">1e4</span>; <span class="comment">//10000</span></span><br><span class="line">    <span class="type">float</span> f3 = <span class="number">1e-4</span>; <span class="comment">//0.0001</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、字符型<br>作用：字符型变量用于显示单个字符<br>语法：char 变量名 &#x3D; ‘变量值’;</p><blockquote><p>代码实例：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Leo on 2022/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、字符型变量创建方式</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ch = &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"><span class="comment">//2、字符型变量所占内存的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符型变量所占内存大小为&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(ch) &lt;&lt; <span class="string">&quot;个字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//3、字符型变量常见的错误</span></span><br><span class="line"><span class="comment">//    char ch1 = &#x27;abc&#x27;; //字符型变量&#x27;&#x27;内不能存放多个字符，放一个字符</span></span><br><span class="line"><span class="comment">//    char ch1 = &quot;a&quot;; //字符型变量不能用双引号</span></span><br><span class="line"><span class="comment">//  a的ASCII码为97</span></span><br><span class="line"><span class="comment">//  A的ASCII码为65</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;所对应的ASCII码数值为&quot;</span> &lt;&lt; (<span class="type">int</span>) ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国内陆Google搜索使用</title>
      <link href="/archives/266295d8.html"/>
      <url>/archives/266295d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转发自 <a href="http://www.javanx.cn/20190318/google/">Web秀 作者：<a href="http://www.javanx.cn/author/1/">Javan</a> </a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自2010年Google退出中国内陆后，搜索引擎百度一家独大，很多小伙伴也是很不甘心啊，毕竟百度和Google比，还是Google搜索更好用一些。</p><p>搜索内容准确，不会出现乱七八糟的广告，推广等。</p><p>先来看一波，对比：</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><p><strong>推荐工具的前提是，希望大家都能借助工具学习有用的知识啊，作为一名程序猿，有时<a href="http://www.javanx.cn/tag/google%E6%90%9C%E7%B4%A2/">google搜索</a>带来的知识还是很客观的。希望大家用在正途。</strong></p><h1 id="谷歌访问助手使用"><a href="#谷歌访问助手使用" class="headerlink" title="谷歌访问助手使用"></a><a href="http://www.javanx.cn/tag/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/">谷歌访问助手</a>使用</h1><h2 id="这里我们需要安装一个Chrome扩展插件——谷歌访问助手"><a href="#这里我们需要安装一个Chrome扩展插件——谷歌访问助手" class="headerlink" title="这里我们需要安装一个Chrome扩展插件——谷歌访问助手"></a>这里我们需要安装一个Chrome扩展插件——<a href="http://www.javanx.cn/wp-content/themes/lensnews2.2/images/google.rar">谷歌访问助手</a></h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="打开Chrome浏览器，设置-——-更多工具-——-扩展程序。"><a href="#打开Chrome浏览器，设置-——-更多工具-——-扩展程序。" class="headerlink" title="打开Chrome浏览器，设置 —— 更多工具 —— 扩展程序。"></a>打开Chrome浏览器，设置 —— 更多工具 —— 扩展程序。</h2><h2 id="将已经下载并解压的-谷歌访问助手-v2-3-0-crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。"><a href="#将已经下载并解压的-谷歌访问助手-v2-3-0-crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。" class="headerlink" title="将已经下载并解压的 谷歌访问助手_v2.3.0.crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。"></a>将已经下载并解压的 谷歌访问助手_v2.3.0.crx文件拖动到Google扩展程序界面，或者点击“加载已解压的扩展程序”，选择文件。</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E4%B8%8B%E8%BD%BD%E8%A7%A3%E5%8E%8B.png" alt="内陆也能使用Google了，如何能使用Google教程"><br>这时候会弹框提示：</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E6%B7%BB%E5%8A%A0%E6%8B%93%E5%B1%95%E7%A8%8B%E5%BA%8F.png" alt="内陆也能使用Google了，如何能使用Google教程"><br>完成安装后，用户有12个小时的免费试用时间。如何永久免费使用了？</p><p>其实也很简单，只需要将<code>123.hao245.com</code>设置成主页就可以了。</p><p>安装成功后，浏览器右上角就有这个图标了，如果发现不能使用，可以重启它。</p><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="谷歌访问助手常见问题"><a href="#谷歌访问助手常见问题" class="headerlink" title="谷歌访问助手常见问题"></a>谷歌访问助手常见问题</h2><p>(1)设置首页成功，但是重启浏览器还是显示没有激活，一般是因为关闭浏览器并没有真正退出浏览器。chrome浏览器的退出方法是点击选项-&gt;退出彻底关闭浏览器。也可以尝试在任务管理器中结束浏览器的所有进程。</p><p>(2)如果设置首页不成功或者不会设置首页的，可以设置自动打开首页。点左图上的设置图标，勾选自动打开首页，任意勾选一个主页，在重启浏览器器（务必重启浏览器）。</p><p>(3)谷歌访问助手软件安装成功后，用户有12个小时的免费试用时间。</p><p>(4)有用户反应，谷歌访问助手在使用的过程中会突然无法使用，或者说前几天谷歌访问助手还挺好用的，突然就不好用了。出现这个问题是原因可能是浏览器的默认首页被更改了，因为我都知道谷歌访问助手由于考虑自身的经营问题强制要求用户必须使用好123导航作为首页。所以如果你的谷歌访问助手之前是可以使用后来突然不能正常使用了，那么首先请考率你是不是修改了默认主页。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%881.png" alt="内陆也能使用Google了，如何能使用Google教程"><br><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%882.png" alt="内陆也能使用Google了，如何能使用Google教程"></p><h2 id="YOUTUBE访问指南"><a href="#YOUTUBE访问指南" class="headerlink" title="YOUTUBE访问指南"></a>YOUTUBE访问指南</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/YouTube.png" alt="YOUTUBE访问指南"></p><p>当前你google访问助手安装成功后，访问<a href="https://chrome.google.com/webstore/category/extensions?hl=zh">google插件市场</a></p><h2 id="谷歌网上应用商店"><a href="#谷歌网上应用商店" class="headerlink" title="谷歌网上应用商店"></a>谷歌网上应用商店</h2><p><img src="https://luomublog.oss-cn-qingdao.aliyuncs.com/ImgHost/%E4%B8%AD%E5%9B%BD%E5%86%85%E9%99%86Google%E6%90%9C%E7%B4%A2%E4%BD%BF%E7%94%A8/%E7%BD%91%E4%B8%8A%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97.png" alt="Google网上应用商店"></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络与浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建自己的个人博客网站</title>
      <link href="/archives/23cd4859.html"/>
      <url>/archives/23cd4859.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载并安装git-nodeJS框架"><a href="#下载并安装git-nodeJS框架" class="headerlink" title="下载并安装git nodeJS框架"></a>下载并安装git nodeJS框架</h2><h2 id="打开终端，进入root模式，命令行：sudo-su"><a href="#打开终端，进入root模式，命令行：sudo-su" class="headerlink" title="打开终端，进入root模式，命令行：sudo su"></a>打开终端，进入root模式，命令行：sudo su</h2><h3 id="输入密码回车"><a href="#输入密码回车" class="headerlink" title="输入密码回车"></a>输入密码回车</h3><h2 id="利用npm安装包管理器cnpm达到提速的目的，命令行：npm-install-g-cnpm-–registry-x3D-https-registry-npm-taobao-org"><a href="#利用npm安装包管理器cnpm达到提速的目的，命令行：npm-install-g-cnpm-–registry-x3D-https-registry-npm-taobao-org" class="headerlink" title="利用npm安装包管理器cnpm达到提速的目的，命令行：npm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org"></a>利用npm安装包管理器cnpm达到提速的目的，命令行：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></h2><h2 id="利用cnpm安装hexo，命令行：cnpm-install-g-hexo-cli"><a href="#利用cnpm安装hexo，命令行：cnpm-install-g-hexo-cli" class="headerlink" title="利用cnpm安装hexo，命令行：cnpm install -g hexo-cli"></a>利用cnpm安装hexo，命令行：cnpm install -g hexo-cli</h2><h2 id="新建空文件夹，命令行：mkdir-blog"><a href="#新建空文件夹，命令行：mkdir-blog" class="headerlink" title="新建空文件夹，命令行：mkdir blog"></a>新建空文件夹，命令行：mkdir blog</h2><h2 id="进入博客，命令行：cd-blog"><a href="#进入博客，命令行：cd-blog" class="headerlink" title="进入博客，命令行：cd blog"></a>进入博客，命令行：cd blog</h2><h2 id="利用hexo初始化一个博客，命令行：sudo-hexo-init"><a href="#利用hexo初始化一个博客，命令行：sudo-hexo-init" class="headerlink" title="利用hexo初始化一个博客，命令行：sudo hexo init"></a>利用hexo初始化一个博客，命令行：sudo hexo init</h2><h2 id="本地启动，命令行：hexo-s"><a href="#本地启动，命令行：hexo-s" class="headerlink" title="本地启动，命令行：hexo s"></a>本地启动，命令行：hexo s</h2><h3 id="浏览器：localhost-4000端口打开"><a href="#浏览器：localhost-4000端口打开" class="headerlink" title="浏览器：localhost:4000端口打开"></a>浏览器：localhost:4000端口打开</h3><h2 id="新建一篇博客文章，命令行：hexo-n-“博客文章”"><a href="#新建一篇博客文章，命令行：hexo-n-“博客文章”" class="headerlink" title="新建一篇博客文章，命令行：hexo n “博客文章”"></a>新建一篇博客文章，命令行：hexo n “博客文章”</h2><h3 id="cd-到文件夹下，用vim打开，命令行：vim-博客文章-md"><a href="#cd-到文件夹下，用vim打开，命令行：vim-博客文章-md" class="headerlink" title="cd 到文件夹下，用vim打开，命令行：vim 博客文章.md"></a>cd 到文件夹下，用vim打开，命令行：vim 博客文章.md</h3><h2 id="保存退出，命令行：esc-wq或者Ctl-C"><a href="#保存退出，命令行：esc-wq或者Ctl-C" class="headerlink" title="保存退出，命令行：esc :wq或者Ctl+C"></a>保存退出，命令行：esc :wq或者Ctl+C</h2><h3 id="cd到根目录-x2F-blog下"><a href="#cd到根目录-x2F-blog下" class="headerlink" title="cd到根目录&#x2F;blog下"></a>cd到根目录&#x2F;blog下</h3><h2 id="hexo-clean清除一下目录"><a href="#hexo-clean清除一下目录" class="headerlink" title="hexo clean清除一下目录"></a>hexo clean清除一下目录</h2><h2 id="hexo-g或者hexo-generate，更新"><a href="#hexo-g或者hexo-generate，更新" class="headerlink" title="hexo g或者hexo generate，更新"></a>hexo g或者hexo generate，更新</h2><h2 id="hexo-s或者hexo-server，部署到本地服务器上"><a href="#hexo-s或者hexo-server，部署到本地服务器上" class="headerlink" title="hexo s或者hexo server，部署到本地服务器上"></a>hexo s或者hexo server，部署到本地服务器上</h2><h2 id="hexo-d或者hexo-deploy，部署到远端托管"><a href="#hexo-d或者hexo-deploy，部署到远端托管" class="headerlink" title="hexo d或者hexo deploy，部署到远端托管"></a>hexo d或者hexo deploy，部署到远端托管</h2><blockquote><p>持续更新中…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
